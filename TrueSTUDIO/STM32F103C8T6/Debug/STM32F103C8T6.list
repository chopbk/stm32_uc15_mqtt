
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002734  200001dc  08005de0  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002910  08005de0  00022910  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000b56b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029fb4  00000000  00000000  0002b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051c4  00000000  00000000  00055724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001378  00000000  00000000  0005a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb8  00000000  00000000  0005bc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f055  00000000  00000000  0005d818  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006d4b  00000000  00000000  0006c86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000735b8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049bc  00000000  00000000  00073634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005718 	.word	0x08005718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005718 	.word	0x08005718

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000160:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000162:	e003      	b.n	800016c <LoopCopyDataInit>

08000164 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000164:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000166:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000168:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800016a:	3104      	adds	r1, #4

0800016c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800016c:	480a      	ldr	r0, [pc, #40]	; (8000198 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800016e:	4b0b      	ldr	r3, [pc, #44]	; (800019c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000170:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000172:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000174:	d3f6      	bcc.n	8000164 <CopyDataInit>
  ldr r2, =_sbss
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000178:	e002      	b.n	8000180 <LoopFillZerobss>

0800017a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800017a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800017c:	f842 3b04 	str.w	r3, [r2], #4

08000180 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000182:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000184:	d3f9      	bcc.n	800017a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000186:	f000 fae5 	bl	8000754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800018a:	f003 fbed 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800018e:	f000 f8bd 	bl	800030c <main>
  bx lr
 8000192:	4770      	bx	lr
  ldr r3, =_sidata
 8000194:	08005c04 	.word	0x08005c04
  ldr r0, =_sdata
 8000198:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800019c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80001a0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80001a4:	20002910 	.word	0x20002910

080001a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001a8:	e7fe      	b.n	80001a8 <ADC1_2_IRQHandler>

080001aa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80001aa:	b570      	push	{r4, r5, r6, lr}
 80001ac:	460e      	mov	r6, r1
 80001ae:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b0:	460c      	mov	r4, r1
 80001b2:	1ba3      	subs	r3, r4, r6
 80001b4:	429d      	cmp	r5, r3
 80001b6:	dc01      	bgt.n	80001bc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80001b8:	4628      	mov	r0, r5
 80001ba:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80001bc:	f3af 8000 	nop.w
 80001c0:	f804 0b01 	strb.w	r0, [r4], #1
 80001c4:	e7f5      	b.n	80001b2 <_read+0x8>

080001c6 <_write>:

int _write(int file, char *ptr, int len)
{
 80001c6:	b570      	push	{r4, r5, r6, lr}
 80001c8:	460e      	mov	r6, r1
 80001ca:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001cc:	460c      	mov	r4, r1
 80001ce:	1ba3      	subs	r3, r4, r6
 80001d0:	429d      	cmp	r5, r3
 80001d2:	dc01      	bgt.n	80001d8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80001d4:	4628      	mov	r0, r5
 80001d6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80001d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80001dc:	f000 f864 	bl	80002a8 <__io_putchar>
 80001e0:	e7f5      	b.n	80001ce <_write+0x8>
	...

080001e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80001e4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <_sbrk+0x2c>)
{
 80001e8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80001ea:	6819      	ldr	r1, [r3, #0]
 80001ec:	b909      	cbnz	r1, 80001f2 <_sbrk+0xe>
		heap_end = &end;
 80001ee:	4909      	ldr	r1, [pc, #36]	; (8000214 <_sbrk+0x30>)
 80001f0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80001f2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80001f4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80001f6:	4402      	add	r2, r0
 80001f8:	428a      	cmp	r2, r1
 80001fa:	d906      	bls.n	800020a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80001fc:	f003 fbae 	bl	800395c <__errno>
 8000200:	230c      	movs	r3, #12
 8000202:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000204:	f04f 30ff 	mov.w	r0, #4294967295
 8000208:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800020a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800020c:	bd08      	pop	{r3, pc}
 800020e:	bf00      	nop
 8000210:	200001f8 	.word	0x200001f8
 8000214:	20002910 	.word	0x20002910

08000218 <_close>:

int _close(int file)
{
	return -1;
}
 8000218:	f04f 30ff 	mov.w	r0, #4294967295
 800021c:	4770      	bx	lr

0800021e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800021e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000222:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000224:	604b      	str	r3, [r1, #4]
}
 8000226:	4770      	bx	lr

08000228 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000228:	2001      	movs	r0, #1
 800022a:	4770      	bx	lr

0800022c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800022c:	2000      	movs	r0, #0
 800022e:	4770      	bx	lr

08000230 <displayTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTaskFunc */
void displayTaskFunc(void const * argument)
{
 8000230:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN displayTaskFunc */
  /* Infinite loop */
	uint8_t rxchar;
	printf("task 2 is running...\r\n");
 8000232:	4815      	ldr	r0, [pc, #84]	; (8000288 <displayTaskFunc+0x58>)
 8000234:	f003 fc44 	bl	8003ac0 <puts>
  for(;;)
  {
	if(RINGBUF_GetFill(&RxUart3RingBuff)){
 8000238:	4d14      	ldr	r5, [pc, #80]	; (800028c <displayTaskFunc+0x5c>)
		RINGBUF_Get(&RxUart3RingBuff, &rxchar);
		HAL_UART_Transmit(&huart1, &rxchar, 1, 0xFFFF);
 800023a:	4e15      	ldr	r6, [pc, #84]	; (8000290 <displayTaskFunc+0x60>)
	}
	if(RINGBUF_GetFill(&RxUart1RingBuff)){
 800023c:	4c15      	ldr	r4, [pc, #84]	; (8000294 <displayTaskFunc+0x64>)
	if(RINGBUF_GetFill(&RxUart3RingBuff)){
 800023e:	4628      	mov	r0, r5
 8000240:	f001 ff46 	bl	80020d0 <RINGBUF_GetFill>
 8000244:	b160      	cbz	r0, 8000260 <displayTaskFunc+0x30>
		RINGBUF_Get(&RxUart3RingBuff, &rxchar);
 8000246:	f10d 0107 	add.w	r1, sp, #7
 800024a:	4628      	mov	r0, r5
 800024c:	f001 ff29 	bl	80020a2 <RINGBUF_Get>
		HAL_UART_Transmit(&huart1, &rxchar, 1, 0xFFFF);
 8000250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000254:	2201      	movs	r2, #1
 8000256:	f10d 0107 	add.w	r1, sp, #7
 800025a:	4630      	mov	r0, r6
 800025c:	f001 f98a 	bl	8001574 <HAL_UART_Transmit>
	if(RINGBUF_GetFill(&RxUart1RingBuff)){
 8000260:	4620      	mov	r0, r4
 8000262:	f001 ff35 	bl	80020d0 <RINGBUF_GetFill>
 8000266:	2800      	cmp	r0, #0
 8000268:	d0e9      	beq.n	800023e <displayTaskFunc+0xe>
		RINGBUF_Get(&RxUart1RingBuff, &rxchar);
 800026a:	f10d 0107 	add.w	r1, sp, #7
 800026e:	4620      	mov	r0, r4
 8000270:	f001 ff17 	bl	80020a2 <RINGBUF_Get>
		HAL_UART_Transmit(&huart3, &rxchar, 1, 0xFFFF);
 8000274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000278:	2201      	movs	r2, #1
 800027a:	f10d 0107 	add.w	r1, sp, #7
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <displayTaskFunc+0x68>)
 8000280:	f001 f978 	bl	8001574 <HAL_UART_Transmit>
 8000284:	e7db      	b.n	800023e <displayTaskFunc+0xe>
 8000286:	bf00      	nop
 8000288:	080057e8 	.word	0x080057e8
 800028c:	20002630 	.word	0x20002630
 8000290:	20002390 	.word	0x20002390
 8000294:	20002648 	.word	0x20002648
 8000298:	20002350 	.word	0x20002350

0800029c <StartDefaultTask>:
 800029c:	b508      	push	{r3, lr}
 800029e:	2001      	movs	r0, #1
 80002a0:	f001 ff42 	bl	8002128 <osDelay>
 80002a4:	e7fb      	b.n	800029e <StartDefaultTask+0x2>
	...

080002a8 <__io_putchar>:
{
 80002a8:	b507      	push	{r0, r1, r2, lr}
 80002aa:	a902      	add	r1, sp, #8
 80002ac:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80002b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002b4:	2201      	movs	r2, #1
 80002b6:	4803      	ldr	r0, [pc, #12]	; (80002c4 <__io_putchar+0x1c>)
 80002b8:	f001 f95c 	bl	8001574 <HAL_UART_Transmit>
}
 80002bc:	9801      	ldr	r0, [sp, #4]
 80002be:	b003      	add	sp, #12
 80002c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80002c4:	20002390 	.word	0x20002390

080002c8 <SystemClock_Config>:
{
 80002c8:	b500      	push	{lr}
 80002ca:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	2228      	movs	r2, #40	; 0x28
 80002ce:	2100      	movs	r1, #0
 80002d0:	a806      	add	r0, sp, #24
 80002d2:	f003 fb78 	bl	80039c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	2214      	movs	r2, #20
 80002d8:	2100      	movs	r1, #0
 80002da:	a801      	add	r0, sp, #4
 80002dc:	f003 fb73 	bl	80039c6 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	2302      	movs	r3, #2
 80002e2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e8:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f000 fc81 	bl	8000bf4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f2:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fa:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	f000 fe3f 	bl	8000f84 <HAL_RCC_ClockConfig>
}
 8000306:	b011      	add	sp, #68	; 0x44
 8000308:	f85d fb04 	ldr.w	pc, [sp], #4

0800030c <main>:
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000310:	f000 fa46 	bl	80007a0 <HAL_Init>
  SystemClock_Config();
 8000314:	f7ff ffd8 	bl	80002c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	2210      	movs	r2, #16
 800031a:	2100      	movs	r1, #0
 800031c:	a80f      	add	r0, sp, #60	; 0x3c
 800031e:	f003 fb52 	bl	80039c6 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000322:	4b59      	ldr	r3, [pc, #356]	; (8000488 <main+0x17c>)
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000324:	21a0      	movs	r1, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000328:	4858      	ldr	r0, [pc, #352]	; (800048c <main+0x180>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	f042 0204 	orr.w	r2, r2, #4
 800032e:	619a      	str	r2, [r3, #24]
 8000330:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	f002 0204 	and.w	r2, r2, #4
 8000338:	9201      	str	r2, [sp, #4]
 800033a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	f042 0208 	orr.w	r2, r2, #8
 8000344:	619a      	str	r2, [r3, #24]
 8000346:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	f003 0308 	and.w	r3, r3, #8
 800034e:	9302      	str	r3, [sp, #8]
 8000350:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000352:	f000 fbc9 	bl	8000ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WISMO_ON_GPIO_Port, WISMO_ON_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035c:	484c      	ldr	r0, [pc, #304]	; (8000490 <main+0x184>)
 800035e:	f000 fbc3 	bl	8000ae8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = STA1_Pin|WISMO_RESET_Pin;
 8000364:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	a90f      	add	r1, sp, #60	; 0x3c
 8000368:	4848      	ldr	r0, [pc, #288]	; (800048c <main+0x180>)
  GPIO_InitStruct.Pin = STA1_Pin|WISMO_RESET_Pin;
 800036a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000372:	f000 fad3 	bl	800091c <HAL_GPIO_Init>
  HAL_GPIO_Init(WISMO_RDY_GPIO_Port, &GPIO_InitStruct);
 8000376:	a90f      	add	r1, sp, #60	; 0x3c
 8000378:	4845      	ldr	r0, [pc, #276]	; (8000490 <main+0x184>)
  GPIO_InitStruct.Pin = WISMO_RDY_Pin;
 800037a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(WISMO_RDY_GPIO_Port, &GPIO_InitStruct);
 8000380:	f000 facc 	bl	800091c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WISMO_ON_Pin;
 8000384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  huart1.Init.BaudRate = 115200;
 8000388:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038c:	9612      	str	r6, [sp, #72]	; 0x48
  huart1.Init.Mode = UART_MODE_TX_RX;
 800038e:	260c      	movs	r6, #12
  HAL_GPIO_Init(WISMO_ON_GPIO_Port, &GPIO_InitStruct);
 8000390:	a90f      	add	r1, sp, #60	; 0x3c
 8000392:	483f      	ldr	r0, [pc, #252]	; (8000490 <main+0x184>)
  GPIO_InitStruct.Pin = WISMO_ON_Pin;
 8000394:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(WISMO_ON_GPIO_Port, &GPIO_InitStruct);
 800039a:	f000 fabf 	bl	800091c <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800039e:	483d      	ldr	r0, [pc, #244]	; (8000494 <main+0x188>)
  huart1.Init.BaudRate = 115200;
 80003a0:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <main+0x18c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a2:	6146      	str	r6, [r0, #20]
  huart1.Init.BaudRate = 115200;
 80003a4:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a8:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003aa:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ac:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	f001 f8b1 	bl	8001518 <HAL_UART_Init>
  huart3.Instance = USART3;
 80003b6:	4839      	ldr	r0, [pc, #228]	; (800049c <main+0x190>)
 80003b8:	4b39      	ldr	r3, [pc, #228]	; (80004a0 <main+0x194>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003ba:	6146      	str	r6, [r0, #20]
  huart3.Init.BaudRate = 115200;
 80003bc:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003c0:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003c2:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003c4:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003ca:	f001 f8a5 	bl	8001518 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 80003ce:	4835      	ldr	r0, [pc, #212]	; (80004a4 <main+0x198>)
  hi2c1.Init.ClockSpeed = 100000;
 80003d0:	4a35      	ldr	r2, [pc, #212]	; (80004a8 <main+0x19c>)
 80003d2:	4b36      	ldr	r3, [pc, #216]	; (80004ac <main+0x1a0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d4:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80003d6:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e2:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003e4:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e8:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ea:	f000 fb83 	bl	8000af4 <HAL_I2C_Init>
  printf("hello world\n\r");
 80003ee:	4830      	ldr	r0, [pc, #192]	; (80004b0 <main+0x1a4>)
 80003f0:	f003 faf2 	bl	80039d8 <iprintf>
	RINGBUF_Init(&RxUart3RingBuff, ring3_buff, BUFF_SIZE);
 80003f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f8:	492e      	ldr	r1, [pc, #184]	; (80004b4 <main+0x1a8>)
 80003fa:	482f      	ldr	r0, [pc, #188]	; (80004b8 <main+0x1ac>)
 80003fc:	f001 fe30 	bl	8002060 <RINGBUF_Init>
	RINGBUF_Init(&RxUart1RingBuff, ring1_buff, BUFF_SIZE);
 8000400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000404:	492d      	ldr	r1, [pc, #180]	; (80004bc <main+0x1b0>)
 8000406:	482e      	ldr	r0, [pc, #184]	; (80004c0 <main+0x1b4>)
 8000408:	f001 fe2a 	bl	8002060 <RINGBUF_Init>
  osSemaphoreDef(myBinarySem01);
 800040c:	a814      	add	r0, sp, #80	; 0x50
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800040e:	4629      	mov	r1, r5
  osSemaphoreDef(myBinarySem01);
 8000410:	f840 4d50 	str.w	r4, [r0, #-80]!
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000414:	f001 fe90 	bl	8002138 <osSemaphoreCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000418:	4d2a      	ldr	r5, [pc, #168]	; (80004c4 <main+0x1b8>)
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800041a:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <main+0x1bc>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800041c:	af05      	add	r7, sp, #20
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800041e:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000422:	462e      	mov	r6, r5
 8000424:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000426:	f856 3b04 	ldr.w	r3, [r6], #4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800042a:	4621      	mov	r1, r4
 800042c:	a805      	add	r0, sp, #20
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800042e:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000430:	f001 fe61 	bl	80020f6 <osThreadCreate>
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <main+0x1c0>)
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 8000436:	af0a      	add	r7, sp, #40	; 0x28
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000438:	6018      	str	r0, [r3, #0]
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 800043a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800043c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800043e:	6833      	ldr	r3, [r6, #0]
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 8000440:	4621      	mov	r1, r4
 8000442:	a80a      	add	r0, sp, #40	; 0x28
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 8000444:	603b      	str	r3, [r7, #0]
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 8000446:	f001 fe56 	bl	80020f6 <osThreadCreate>
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <main+0x1c4>)
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 800044c:	f105 0718 	add.w	r7, r5, #24
 8000450:	ae0f      	add	r6, sp, #60	; 0x3c
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 8000452:	6018      	str	r0, [r3, #0]
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 8000454:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000456:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000458:	683b      	ldr	r3, [r7, #0]
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 800045a:	4621      	mov	r1, r4
 800045c:	a80f      	add	r0, sp, #60	; 0x3c
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 800045e:	6033      	str	r3, [r6, #0]
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 8000460:	f001 fe49 	bl	80020f6 <osThreadCreate>
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <main+0x1c8>)
  osMessageQDef(datQueue, 16, uint16_t);
 8000466:	352c      	adds	r5, #44	; 0x2c
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 8000468:	6018      	str	r0, [r3, #0]
  osMessageQDef(datQueue, 16, uint16_t);
 800046a:	ab03      	add	r3, sp, #12
 800046c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000470:	e883 0003 	stmia.w	r3, {r0, r1}
  datQueueHandle = osMessageCreate(osMessageQ(datQueue), NULL);
 8000474:	4618      	mov	r0, r3
 8000476:	4621      	mov	r1, r4
 8000478:	f001 febe 	bl	80021f8 <osMessageCreate>
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <main+0x1cc>)
 800047e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000480:	f001 fe34 	bl	80020ec <osKernelStart>
 8000484:	e7fe      	b.n	8000484 <main+0x178>
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	40010c00 	.word	0x40010c00
 8000494:	20002390 	.word	0x20002390
 8000498:	40013800 	.word	0x40013800
 800049c:	20002350 	.word	0x20002350
 80004a0:	40004800 	.word	0x40004800
 80004a4:	200023d4 	.word	0x200023d4
 80004a8:	40005400 	.word	0x40005400
 80004ac:	000186a0 	.word	0x000186a0
 80004b0:	080057fe 	.word	0x080057fe
 80004b4:	20002530 	.word	0x20002530
 80004b8:	20002630 	.word	0x20002630
 80004bc:	20002428 	.word	0x20002428
 80004c0:	20002648 	.word	0x20002648
 80004c4:	08005730 	.word	0x08005730
 80004c8:	20002644 	.word	0x20002644
 80004cc:	200023d0 	.word	0x200023d0
 80004d0:	20002528 	.word	0x20002528
 80004d4:	20002640 	.word	0x20002640
 80004d8:	2000252c 	.word	0x2000252c

080004dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004dc:	6802      	ldr	r2, [r0, #0]
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x10>)
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d101      	bne.n	80004e8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80004e4:	f000 b96e 	b.w	80007c4 <HAL_IncTick>
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40000800 	.word	0x40000800

080004f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_MspInit+0x48>)
{
 80004f2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f4:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f6:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f8:	f042 0201 	orr.w	r2, r2, #1
 80004fc:	619a      	str	r2, [r3, #24]
 80004fe:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000500:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000504:	f002 0201 	and.w	r2, r2, #1
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	69da      	ldr	r2, [r3, #28]
 800050e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000512:	61da      	str	r2, [r3, #28]
 8000514:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000516:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000520:	f000 f974 	bl	800080c <HAL_NVIC_SetPriority>

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <HAL_MspInit+0x4c>)
 8000526:	6853      	ldr	r3, [r2, #4]
 8000528:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	b003      	add	sp, #12
 8000534:	f85d fb04 	ldr.w	pc, [sp], #4
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000540:	b510      	push	{r4, lr}
 8000542:	4604      	mov	r4, r0
 8000544:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	2210      	movs	r2, #16
 8000548:	2100      	movs	r1, #0
 800054a:	a802      	add	r0, sp, #8
 800054c:	f003 fa3b 	bl	80039c6 <memset>
  if(hi2c->Instance==I2C1)
 8000550:	6822      	ldr	r2, [r4, #0]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_I2C_MspInit+0x58>)
 8000554:	429a      	cmp	r2, r3
 8000556:	d11c      	bne.n	8000592 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4c10      	ldr	r4, [pc, #64]	; (800059c <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	4810      	ldr	r0, [pc, #64]	; (80005a0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	61a3      	str	r3, [r4, #24]
 8000566:	69a3      	ldr	r3, [r4, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000570:	23c0      	movs	r3, #192	; 0xc0
 8000572:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000574:	2312      	movs	r3, #18
 8000576:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f000 f9ce 	bl	800091c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000580:	69e3      	ldr	r3, [r4, #28]
 8000582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000586:	61e3      	str	r3, [r4, #28]
 8000588:	69e3      	ldr	r3, [r4, #28]
 800058a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000592:	b006      	add	sp, #24
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop
 8000598:	40005400 	.word	0x40005400
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010c00 	.word	0x40010c00

080005a4 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2210      	movs	r2, #16
{
 80005a6:	b510      	push	{r4, lr}
 80005a8:	4604      	mov	r4, r0
 80005aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	eb0d 0002 	add.w	r0, sp, r2
 80005b0:	2100      	movs	r1, #0
 80005b2:	f003 fa08 	bl	80039c6 <memset>
  if(huart->Instance==USART1)
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	4a33      	ldr	r2, [pc, #204]	; (8000688 <HAL_UART_MspInit+0xe4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d131      	bne.n	8000622 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <HAL_UART_MspInit+0xe8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	4832      	ldr	r0, [pc, #200]	; (8000690 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005ca:	619a      	str	r2, [r3, #24]
 80005cc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	f042 0204 	orr.w	r2, r2, #4
 80005de:	619a      	str	r2, [r3, #24]
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f000 f990 	bl	800091c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	a904      	add	r1, sp, #16
 8000602:	4823      	ldr	r0, [pc, #140]	; (8000690 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000604:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f000 f987 	bl	800091c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800060e:	2025      	movs	r0, #37	; 0x25
 8000610:	4622      	mov	r2, r4
 8000612:	2105      	movs	r1, #5
 8000614:	f000 f8fa 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000618:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800061a:	f000 f92b 	bl	8000874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800061e:	b008      	add	sp, #32
 8000620:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <HAL_UART_MspInit+0xf0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d1fa      	bne.n	800061e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 800062c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	481a      	ldr	r0, [pc, #104]	; (8000698 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000630:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000634:	61da      	str	r2, [r3, #28]
 8000636:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800063a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800063e:	9202      	str	r2, [sp, #8]
 8000640:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	f042 0208 	orr.w	r2, r2, #8
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	9303      	str	r3, [sp, #12]
 8000652:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f000 f95b 	bl	800091c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000666:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	a904      	add	r1, sp, #16
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800066e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f000 f952 	bl	800091c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000678:	2027      	movs	r0, #39	; 0x27
 800067a:	4622      	mov	r2, r4
 800067c:	2105      	movs	r1, #5
 800067e:	f000 f8c5 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000682:	2027      	movs	r0, #39	; 0x27
 8000684:	e7c9      	b.n	800061a <HAL_UART_MspInit+0x76>
 8000686:	bf00      	nop
 8000688:	40013800 	.word	0x40013800
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800
 8000694:	40004800 	.word	0x40004800
 8000698:	40010c00 	.word	0x40010c00

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800069e:	4601      	mov	r1, r0
{
 80006a0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80006a2:	2200      	movs	r2, #0
 80006a4:	201e      	movs	r0, #30
 80006a6:	f000 f8b1 	bl	800080c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80006aa:	201e      	movs	r0, #30
 80006ac:	f000 f8e2 	bl	8000874 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006b2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006b4:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006b6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006b8:	f042 0204 	orr.w	r2, r2, #4
 80006bc:	61da      	str	r2, [r3, #28]
 80006be:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006c0:	4c11      	ldr	r4, [pc, #68]	; (8000708 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ca:	f000 fd2d 	bl	8001128 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ce:	f000 fd0b 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <HAL_InitTick+0x70>)
 80006d4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80006d6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80006da:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_InitTick+0x74>)
 80006de:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80006e2:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80006e4:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80006e6:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80006e8:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 80006ea:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80006ee:	f000 fe23 	bl	8001338 <HAL_TIM_Base_Init>
 80006f2:	b920      	cbnz	r0, 80006fe <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 fd36 	bl	8001166 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80006fa:	b008      	add	sp, #32
 80006fc:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80006fe:	2001      	movs	r0, #1
 8000700:	e7fb      	b.n	80006fa <HAL_InitTick+0x5e>
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	20002658 	.word	0x20002658
 800070c:	40000800 	.word	0x40000800
 8000710:	000f4240 	.word	0x000f4240

08000714 <NMI_Handler>:
 8000714:	4770      	bx	lr

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	e7fe      	b.n	800071a <BusFault_Handler>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler>

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	4770      	bx	lr

08000720 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <TIM4_IRQHandler+0x8>)
 8000722:	f000 bd2f 	b.w	8001184 <HAL_TIM_IRQHandler>
 8000726:	bf00      	nop
 8000728:	20002658 	.word	0x20002658

0800072c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800072c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <USART1_IRQHandler+0x10>)
 8000730:	f000 ffe4 	bl	80016fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uart1_RxCallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8000734:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uart1_RxCallBack();
 8000738:	f001 ba02 	b.w	8001b40 <uart1_RxCallBack>
 800073c:	20002390 	.word	0x20002390

08000740 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <USART3_IRQHandler+0x10>)
 8000744:	f000 ffda 	bl	80016fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Gsm_RxCallBack();
  /* USER CODE END USART3_IRQn 1 */
}
 8000748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Gsm_RxCallBack();
 800074c:	f001 b9d2 	b.w	8001af4 <Gsm_RxCallBack>
 8000750:	20002350 	.word	0x20002350

08000754 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <SystemInit+0x40>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f042 0201 	orr.w	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <SystemInit+0x44>)
 8000762:	400a      	ands	r2, r1
 8000764:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800076c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000770:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000778:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000780:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000782:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000786:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <SystemInit+0x48>)
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	f8ff0000 	.word	0xf8ff0000
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x20>)
{
 80007a2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ae:	f000 f81b 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ff72 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe9a 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80007bc:	2000      	movs	r0, #0
 80007be:	bd08      	pop	{r3, pc}
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <HAL_IncTick+0x10>)
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <HAL_IncTick+0x14>)
 80007c8:	6811      	ldr	r1, [r2, #0]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	440b      	add	r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20002698 	.word	0x20002698
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007dc:	4b01      	ldr	r3, [pc, #4]	; (80007e4 <HAL_GetTick+0x8>)
 80007de:	6818      	ldr	r0, [r3, #0]
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20002698 	.word	0x20002698

080007e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000802:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000804:	60d3      	str	r3, [r2, #12]
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	68dc      	ldr	r4, [r3, #12]
 8000812:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000816:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	2b04      	cmp	r3, #4
 800081e:	bf28      	it	cs
 8000820:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000828:	bf98      	it	ls
 800082a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	fa05 f303 	lsl.w	r3, r5, r3
 8000830:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000834:	bf88      	it	hi
 8000836:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4019      	ands	r1, r3
 800083a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	fa05 f404 	lsl.w	r4, r5, r4
 8000840:	3c01      	subs	r4, #1
 8000842:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000844:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000846:	ea42 0201 	orr.w	r2, r2, r1
 800084a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	bfaf      	iteee	ge
 8000850:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	4b06      	ldrlt	r3, [pc, #24]	; (8000870 <HAL_NVIC_SetPriority+0x64>)
 8000856:	f000 000f 	andlt.w	r0, r0, #15
 800085a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	bfa5      	ittet	ge
 800085e:	b2d2      	uxtbge	r2, r2
 8000860:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800086a:	bd30      	pop	{r4, r5, pc}
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	e000ed14 	.word	0xe000ed14

08000874 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000874:	2301      	movs	r3, #1
 8000876:	0942      	lsrs	r2, r0, #5
 8000878:	f000 001f 	and.w	r0, r0, #31
 800087c:	fa03 f000 	lsl.w	r0, r3, r0
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <HAL_NVIC_EnableIRQ+0x14>)
 8000882:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800088c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000890:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000892:	2b02      	cmp	r3, #2
 8000894:	d003      	beq.n	800089e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000896:	2304      	movs	r3, #4
 8000898:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800089a:	2001      	movs	r0, #1
 800089c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800089e:	6803      	ldr	r3, [r0, #0]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f022 020e 	bic.w	r2, r2, #14
 80008a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f022 0201 	bic.w	r2, r2, #1
 80008ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_DMA_Abort_IT+0x88>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d01f      	beq.n	80008f6 <HAL_DMA_Abort_IT+0x6a>
 80008b6:	3214      	adds	r2, #20
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d01e      	beq.n	80008fa <HAL_DMA_Abort_IT+0x6e>
 80008bc:	3214      	adds	r2, #20
 80008be:	4293      	cmp	r3, r2
 80008c0:	d01d      	beq.n	80008fe <HAL_DMA_Abort_IT+0x72>
 80008c2:	3214      	adds	r2, #20
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d01d      	beq.n	8000904 <HAL_DMA_Abort_IT+0x78>
 80008c8:	3214      	adds	r2, #20
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d01d      	beq.n	800090a <HAL_DMA_Abort_IT+0x7e>
 80008ce:	3214      	adds	r2, #20
 80008d0:	4293      	cmp	r3, r2
 80008d2:	bf0c      	ite	eq
 80008d4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80008d8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008de:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008e0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008e2:	2301      	movs	r3, #1
 80008e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80008e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80008ea:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80008ee:	b17b      	cbz	r3, 8000910 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80008f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008f2:	4620      	mov	r0, r4
 80008f4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008f6:	2301      	movs	r3, #1
 80008f8:	e7f0      	b.n	80008dc <HAL_DMA_Abort_IT+0x50>
 80008fa:	2310      	movs	r3, #16
 80008fc:	e7ee      	b.n	80008dc <HAL_DMA_Abort_IT+0x50>
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	e7eb      	b.n	80008dc <HAL_DMA_Abort_IT+0x50>
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	e7e8      	b.n	80008dc <HAL_DMA_Abort_IT+0x50>
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	e7e5      	b.n	80008dc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000910:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000912:	bd10      	pop	{r4, pc}
 8000914:	40020008 	.word	0x40020008
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000920:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000922:	4616      	mov	r6, r2
 8000924:	4b65      	ldr	r3, [pc, #404]	; (8000abc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000acc <HAL_GPIO_Init+0x1b0>
 800092a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000ad0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800092e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000934:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000938:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800093c:	45a0      	cmp	r8, r4
 800093e:	d17f      	bne.n	8000a40 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000940:	684d      	ldr	r5, [r1, #4]
 8000942:	2d12      	cmp	r5, #18
 8000944:	f000 80af 	beq.w	8000aa6 <HAL_GPIO_Init+0x18a>
 8000948:	f200 8088 	bhi.w	8000a5c <HAL_GPIO_Init+0x140>
 800094c:	2d02      	cmp	r5, #2
 800094e:	f000 80a7 	beq.w	8000aa0 <HAL_GPIO_Init+0x184>
 8000952:	d87c      	bhi.n	8000a4e <HAL_GPIO_Init+0x132>
 8000954:	2d00      	cmp	r5, #0
 8000956:	f000 808e 	beq.w	8000a76 <HAL_GPIO_Init+0x15a>
 800095a:	2d01      	cmp	r5, #1
 800095c:	f000 809e 	beq.w	8000a9c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000960:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000964:	2cff      	cmp	r4, #255	; 0xff
 8000966:	bf93      	iteet	ls
 8000968:	4682      	movls	sl, r0
 800096a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800096e:	3d08      	subhi	r5, #8
 8000970:	f8d0 b000 	ldrls.w	fp, [r0]
 8000974:	bf92      	itee	ls
 8000976:	00b5      	lslls	r5, r6, #2
 8000978:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800097c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800097e:	fa09 f805 	lsl.w	r8, r9, r5
 8000982:	ea2b 0808 	bic.w	r8, fp, r8
 8000986:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098a:	bf88      	it	hi
 800098c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000990:	ea48 0505 	orr.w	r5, r8, r5
 8000994:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000998:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800099c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80009a0:	d04e      	beq.n	8000a40 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4d47      	ldr	r5, [pc, #284]	; (8000ac0 <HAL_GPIO_Init+0x1a4>)
 80009a4:	4f46      	ldr	r7, [pc, #280]	; (8000ac0 <HAL_GPIO_Init+0x1a4>)
 80009a6:	69ad      	ldr	r5, [r5, #24]
 80009a8:	f026 0803 	bic.w	r8, r6, #3
 80009ac:	f045 0501 	orr.w	r5, r5, #1
 80009b0:	61bd      	str	r5, [r7, #24]
 80009b2:	69bd      	ldr	r5, [r7, #24]
 80009b4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80009b8:	f005 0501 	and.w	r5, r5, #1
 80009bc:	9501      	str	r5, [sp, #4]
 80009be:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009c2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80009cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009d0:	fa09 f90b 	lsl.w	r9, r9, fp
 80009d4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d8:	4d3a      	ldr	r5, [pc, #232]	; (8000ac4 <HAL_GPIO_Init+0x1a8>)
 80009da:	42a8      	cmp	r0, r5
 80009dc:	d068      	beq.n	8000ab0 <HAL_GPIO_Init+0x194>
 80009de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d066      	beq.n	8000ab4 <HAL_GPIO_Init+0x198>
 80009e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009ea:	42a8      	cmp	r0, r5
 80009ec:	d064      	beq.n	8000ab8 <HAL_GPIO_Init+0x19c>
 80009ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009f2:	42a8      	cmp	r0, r5
 80009f4:	bf0c      	ite	eq
 80009f6:	2503      	moveq	r5, #3
 80009f8:	2504      	movne	r5, #4
 80009fa:	fa05 f50b 	lsl.w	r5, r5, fp
 80009fe:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000a02:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a06:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a08:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000a0c:	bf14      	ite	ne
 8000a0e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a10:	43a5      	biceq	r5, r4
 8000a12:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a14:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a16:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000a1a:	bf14      	ite	ne
 8000a1c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1e:	43a5      	biceq	r5, r4
 8000a20:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a22:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a24:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a28:	bf14      	ite	ne
 8000a2a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a2c:	43a5      	biceq	r5, r4
 8000a2e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a30:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a32:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a36:	bf14      	ite	ne
 8000a38:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a3a:	ea25 0404 	biceq.w	r4, r5, r4
 8000a3e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a40:	3601      	adds	r6, #1
 8000a42:	2e10      	cmp	r6, #16
 8000a44:	f47f af73 	bne.w	800092e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000a48:	b003      	add	sp, #12
 8000a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000a4e:	2d03      	cmp	r5, #3
 8000a50:	d022      	beq.n	8000a98 <HAL_GPIO_Init+0x17c>
 8000a52:	2d11      	cmp	r5, #17
 8000a54:	d184      	bne.n	8000960 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a56:	68ca      	ldr	r2, [r1, #12]
 8000a58:	3204      	adds	r2, #4
          break;
 8000a5a:	e781      	b.n	8000960 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000a5c:	4f1a      	ldr	r7, [pc, #104]	; (8000ac8 <HAL_GPIO_Init+0x1ac>)
 8000a5e:	42bd      	cmp	r5, r7
 8000a60:	d009      	beq.n	8000a76 <HAL_GPIO_Init+0x15a>
 8000a62:	d812      	bhi.n	8000a8a <HAL_GPIO_Init+0x16e>
 8000a64:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000ad4 <HAL_GPIO_Init+0x1b8>
 8000a68:	454d      	cmp	r5, r9
 8000a6a:	d004      	beq.n	8000a76 <HAL_GPIO_Init+0x15a>
 8000a6c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a70:	454d      	cmp	r5, r9
 8000a72:	f47f af75 	bne.w	8000960 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a76:	688a      	ldr	r2, [r1, #8]
 8000a78:	b1c2      	cbz	r2, 8000aac <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a7a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000a7c:	bf0c      	ite	eq
 8000a7e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a82:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a86:	2208      	movs	r2, #8
 8000a88:	e76a      	b.n	8000960 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000a8a:	4575      	cmp	r5, lr
 8000a8c:	d0f3      	beq.n	8000a76 <HAL_GPIO_Init+0x15a>
 8000a8e:	4565      	cmp	r5, ip
 8000a90:	d0f1      	beq.n	8000a76 <HAL_GPIO_Init+0x15a>
 8000a92:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ad8 <HAL_GPIO_Init+0x1bc>
 8000a96:	e7eb      	b.n	8000a70 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a98:	2200      	movs	r2, #0
 8000a9a:	e761      	b.n	8000960 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a9c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000a9e:	e75f      	b.n	8000960 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa0:	68ca      	ldr	r2, [r1, #12]
 8000aa2:	3208      	adds	r2, #8
          break;
 8000aa4:	e75c      	b.n	8000960 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa6:	68ca      	ldr	r2, [r1, #12]
 8000aa8:	320c      	adds	r2, #12
          break;
 8000aaa:	e759      	b.n	8000960 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aac:	2204      	movs	r2, #4
 8000aae:	e757      	b.n	8000960 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	e7a2      	b.n	80009fa <HAL_GPIO_Init+0xde>
 8000ab4:	2501      	movs	r5, #1
 8000ab6:	e7a0      	b.n	80009fa <HAL_GPIO_Init+0xde>
 8000ab8:	2502      	movs	r5, #2
 8000aba:	e79e      	b.n	80009fa <HAL_GPIO_Init+0xde>
 8000abc:	40010400 	.word	0x40010400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	10310000 	.word	0x10310000
 8000ad0:	10320000 	.word	0x10320000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	10220000 	.word	0x10220000

08000adc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000adc:	6883      	ldr	r3, [r0, #8]
 8000ade:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000ae0:	bf14      	ite	ne
 8000ae2:	2001      	movne	r0, #1
 8000ae4:	2000      	moveq	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae8:	b10a      	cbz	r2, 8000aee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aea:	6101      	str	r1, [r0, #16]
 8000aec:	4770      	bx	lr
 8000aee:	0409      	lsls	r1, r1, #16
 8000af0:	e7fb      	b.n	8000aea <HAL_GPIO_WritePin+0x2>
	...

08000af4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000af4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000af6:	4604      	mov	r4, r0
 8000af8:	b908      	cbnz	r0, 8000afe <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000afe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b06:	b91b      	cbnz	r3, 8000b10 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b0c:	f7ff fd18 	bl	8000540 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b10:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b12:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b18:	6813      	ldr	r3, [r2, #0]
 8000b1a:	f023 0301 	bic.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b20:	f000 fae2 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b24:	6863      	ldr	r3, [r4, #4]
 8000b26:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <HAL_I2C_Init+0xf0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d830      	bhi.n	8000b8e <HAL_I2C_Init+0x9a>
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_I2C_Init+0xf4>)
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	d9e3      	bls.n	8000afa <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b32:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000b34:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b36:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000b3a:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b3c:	3201      	adds	r2, #1
 8000b3e:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <HAL_I2C_Init+0xf0>)
 8000b42:	3801      	subs	r0, #1
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d832      	bhi.n	8000bae <HAL_I2C_Init+0xba>
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b4e:	1c43      	adds	r3, r0, #1
 8000b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	bf38      	it	cc
 8000b58:	2304      	movcc	r3, #4
 8000b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b5c:	6a22      	ldr	r2, [r4, #32]
 8000b5e:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b60:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000b66:	68e2      	ldr	r2, [r4, #12]
 8000b68:	6923      	ldr	r3, [r4, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000b6e:	69a2      	ldr	r2, [r4, #24]
 8000b70:	6963      	ldr	r3, [r4, #20]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000b76:	680b      	ldr	r3, [r1, #0]
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b7e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b80:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b86:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b88:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <HAL_I2C_Init+0xfc>)
 8000b90:	4290      	cmp	r0, r2
 8000b92:	d9b2      	bls.n	8000afa <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000b94:	4d15      	ldr	r5, [pc, #84]	; (8000bec <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000b9a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000b9e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ba0:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000ba2:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ba4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000ba8:	fbb2 f2f5 	udiv	r2, r2, r5
 8000bac:	e7c6      	b.n	8000b3c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000bae:	68a2      	ldr	r2, [r4, #8]
 8000bb0:	b952      	cbnz	r2, 8000bc8 <HAL_I2C_Init+0xd4>
 8000bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000bb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bba:	1c43      	adds	r3, r0, #1
 8000bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc0:	b16b      	cbz	r3, 8000bde <HAL_I2C_Init+0xea>
 8000bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc6:	e7c8      	b.n	8000b5a <HAL_I2C_Init+0x66>
 8000bc8:	2219      	movs	r2, #25
 8000bca:	4353      	muls	r3, r2
 8000bcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd0:	1c43      	adds	r3, r0, #1
 8000bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd6:	b113      	cbz	r3, 8000bde <HAL_I2C_Init+0xea>
 8000bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bdc:	e7bd      	b.n	8000b5a <HAL_I2C_Init+0x66>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e7bb      	b.n	8000b5a <HAL_I2C_Init+0x66>
 8000be2:	bf00      	nop
 8000be4:	000186a0 	.word	0x000186a0
 8000be8:	001e847f 	.word	0x001e847f
 8000bec:	000f4240 	.word	0x000f4240
 8000bf0:	003d08ff 	.word	0x003d08ff

08000bf4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf4:	6803      	ldr	r3, [r0, #0]
{
 8000bf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	07db      	lsls	r3, r3, #31
{
 8000bfc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfe:	d410      	bmi.n	8000c22 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	079f      	lsls	r7, r3, #30
 8000c04:	d45e      	bmi.n	8000cc4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	0719      	lsls	r1, r3, #28
 8000c0a:	f100 8095 	bmi.w	8000d38 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c0e:	682b      	ldr	r3, [r5, #0]
 8000c10:	075a      	lsls	r2, r3, #29
 8000c12:	f100 80bf 	bmi.w	8000d94 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c16:	69ea      	ldr	r2, [r5, #28]
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 812d 	bne.w	8000e78 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e014      	b.n	8000c4c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c22:	4c90      	ldr	r4, [pc, #576]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000c24:	6863      	ldr	r3, [r4, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d007      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c2e:	6863      	ldr	r3, [r4, #4]
 8000c30:	f003 030c 	and.w	r3, r3, #12
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d10c      	bne.n	8000c52 <HAL_RCC_OscConfig+0x5e>
 8000c38:	6863      	ldr	r3, [r4, #4]
 8000c3a:	03de      	lsls	r6, r3, #15
 8000c3c:	d509      	bpl.n	8000c52 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	039c      	lsls	r4, r3, #14
 8000c42:	d5dd      	bpl.n	8000c00 <HAL_RCC_OscConfig+0xc>
 8000c44:	686b      	ldr	r3, [r5, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1da      	bne.n	8000c00 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
}
 8000c4c:	b002      	add	sp, #8
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	686b      	ldr	r3, [r5, #4]
 8000c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c58:	d110      	bne.n	8000c7c <HAL_RCC_OscConfig+0x88>
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fdbb 	bl	80007dc <HAL_GetTick>
 8000c66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	0398      	lsls	r0, r3, #14
 8000c6c:	d4c8      	bmi.n	8000c00 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6e:	f7ff fdb5 	bl	80007dc <HAL_GetTick>
 8000c72:	1b80      	subs	r0, r0, r6
 8000c74:	2864      	cmp	r0, #100	; 0x64
 8000c76:	d9f7      	bls.n	8000c68 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000c78:	2003      	movs	r0, #3
 8000c7a:	e7e7      	b.n	8000c4c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7c:	b99b      	cbnz	r3, 8000ca6 <HAL_RCC_OscConfig+0xb2>
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c84:	6023      	str	r3, [r4, #0]
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fda5 	bl	80007dc <HAL_GetTick>
 8000c92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	0399      	lsls	r1, r3, #14
 8000c98:	d5b2      	bpl.n	8000c00 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9a:	f7ff fd9f 	bl	80007dc <HAL_GetTick>
 8000c9e:	1b80      	subs	r0, r0, r6
 8000ca0:	2864      	cmp	r0, #100	; 0x64
 8000ca2:	d9f7      	bls.n	8000c94 <HAL_RCC_OscConfig+0xa0>
 8000ca4:	e7e8      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	d103      	bne.n	8000cb6 <HAL_RCC_OscConfig+0xc2>
 8000cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb2:	6023      	str	r3, [r4, #0]
 8000cb4:	e7d1      	b.n	8000c5a <HAL_RCC_OscConfig+0x66>
 8000cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cba:	6023      	str	r3, [r4, #0]
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	e7cd      	b.n	8000c60 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cc4:	4c67      	ldr	r4, [pc, #412]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	6863      	ldr	r3, [r4, #4]
 8000cc8:	f013 0f0c 	tst.w	r3, #12
 8000ccc:	d007      	beq.n	8000cde <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cce:	6863      	ldr	r3, [r4, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d110      	bne.n	8000cfa <HAL_RCC_OscConfig+0x106>
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	03da      	lsls	r2, r3, #15
 8000cdc:	d40d      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	079b      	lsls	r3, r3, #30
 8000ce2:	d502      	bpl.n	8000cea <HAL_RCC_OscConfig+0xf6>
 8000ce4:	692b      	ldr	r3, [r5, #16]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1af      	bne.n	8000c4a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	696a      	ldr	r2, [r5, #20]
 8000cee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cf6:	6023      	str	r3, [r4, #0]
 8000cf8:	e785      	b.n	8000c06 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cfa:	692a      	ldr	r2, [r5, #16]
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <HAL_RCC_OscConfig+0x274>)
 8000cfe:	b16a      	cbz	r2, 8000d1c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d04:	f7ff fd6a 	bl	80007dc <HAL_GetTick>
 8000d08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	079f      	lsls	r7, r3, #30
 8000d0e:	d4ec      	bmi.n	8000cea <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fd64 	bl	80007dc <HAL_GetTick>
 8000d14:	1b80      	subs	r0, r0, r6
 8000d16:	2802      	cmp	r0, #2
 8000d18:	d9f7      	bls.n	8000d0a <HAL_RCC_OscConfig+0x116>
 8000d1a:	e7ad      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000d1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fd5d 	bl	80007dc <HAL_GetTick>
 8000d22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	0798      	lsls	r0, r3, #30
 8000d28:	f57f af6d 	bpl.w	8000c06 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fd56 	bl	80007dc <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x130>
 8000d36:	e79f      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d38:	69aa      	ldr	r2, [r5, #24]
 8000d3a:	4c4a      	ldr	r4, [pc, #296]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <HAL_RCC_OscConfig+0x278>)
 8000d3e:	b1da      	cbz	r2, 8000d78 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d44:	f7ff fd4a 	bl	80007dc <HAL_GetTick>
 8000d48:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d4c:	079b      	lsls	r3, r3, #30
 8000d4e:	d50d      	bpl.n	8000d6c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d50:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d54:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_RCC_OscConfig+0x27c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d5c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000d5e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000d60:	9b01      	ldr	r3, [sp, #4]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f9      	bne.n	8000d5e <HAL_RCC_OscConfig+0x16a>
 8000d6a:	e750      	b.n	8000c0e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fd36 	bl	80007dc <HAL_GetTick>
 8000d70:	1b80      	subs	r0, r0, r6
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9e9      	bls.n	8000d4a <HAL_RCC_OscConfig+0x156>
 8000d76:	e77f      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000d78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fd2f 	bl	80007dc <HAL_GetTick>
 8000d7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d82:	079f      	lsls	r7, r3, #30
 8000d84:	f57f af43 	bpl.w	8000c0e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d88:	f7ff fd28 	bl	80007dc <HAL_GetTick>
 8000d8c:	1b80      	subs	r0, r0, r6
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d9f6      	bls.n	8000d80 <HAL_RCC_OscConfig+0x18c>
 8000d92:	e771      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d94:	4c33      	ldr	r4, [pc, #204]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000d96:	69e3      	ldr	r3, [r4, #28]
 8000d98:	00d8      	lsls	r0, r3, #3
 8000d9a:	d424      	bmi.n	8000de6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000d9c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	69e3      	ldr	r3, [r4, #28]
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	61e3      	str	r3, [r4, #28]
 8000da6:	69e3      	ldr	r3, [r4, #28]
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4e30      	ldr	r6, [pc, #192]	; (8000e74 <HAL_RCC_OscConfig+0x280>)
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	05d9      	lsls	r1, r3, #23
 8000db6:	d518      	bpl.n	8000dea <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db8:	68eb      	ldr	r3, [r5, #12]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d126      	bne.n	8000e0c <HAL_RCC_OscConfig+0x218>
 8000dbe:	6a23      	ldr	r3, [r4, #32]
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fd09 	bl	80007dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dca:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dce:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	6a23      	ldr	r3, [r4, #32]
 8000dd2:	079b      	lsls	r3, r3, #30
 8000dd4:	d53f      	bpl.n	8000e56 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000dd6:	2f00      	cmp	r7, #0
 8000dd8:	f43f af1d 	beq.w	8000c16 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de2:	61e3      	str	r3, [r4, #28]
 8000de4:	e717      	b.n	8000c16 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2700      	movs	r7, #0
 8000de8:	e7e2      	b.n	8000db0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dea:	6833      	ldr	r3, [r6, #0]
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000df2:	f7ff fcf3 	bl	80007dc <HAL_GetTick>
 8000df6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	05da      	lsls	r2, r3, #23
 8000dfc:	d4dc      	bmi.n	8000db8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dfe:	f7ff fced 	bl	80007dc <HAL_GetTick>
 8000e02:	eba0 0008 	sub.w	r0, r0, r8
 8000e06:	2864      	cmp	r0, #100	; 0x64
 8000e08:	d9f6      	bls.n	8000df8 <HAL_RCC_OscConfig+0x204>
 8000e0a:	e735      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0c:	b9ab      	cbnz	r3, 8000e3a <HAL_RCC_OscConfig+0x246>
 8000e0e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6223      	str	r3, [r4, #32]
 8000e1a:	6a23      	ldr	r3, [r4, #32]
 8000e1c:	f023 0304 	bic.w	r3, r3, #4
 8000e20:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e22:	f7ff fcdb 	bl	80007dc <HAL_GetTick>
 8000e26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	6a23      	ldr	r3, [r4, #32]
 8000e2a:	0798      	lsls	r0, r3, #30
 8000e2c:	d5d3      	bpl.n	8000dd6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2e:	f7ff fcd5 	bl	80007dc <HAL_GetTick>
 8000e32:	1b80      	subs	r0, r0, r6
 8000e34:	4540      	cmp	r0, r8
 8000e36:	d9f7      	bls.n	8000e28 <HAL_RCC_OscConfig+0x234>
 8000e38:	e71e      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	6a23      	ldr	r3, [r4, #32]
 8000e3e:	d103      	bne.n	8000e48 <HAL_RCC_OscConfig+0x254>
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6223      	str	r3, [r4, #32]
 8000e46:	e7ba      	b.n	8000dbe <HAL_RCC_OscConfig+0x1ca>
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6223      	str	r3, [r4, #32]
 8000e4e:	6a23      	ldr	r3, [r4, #32]
 8000e50:	f023 0304 	bic.w	r3, r3, #4
 8000e54:	e7b6      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fcc1 	bl	80007dc <HAL_GetTick>
 8000e5a:	eba0 0008 	sub.w	r0, r0, r8
 8000e5e:	42b0      	cmp	r0, r6
 8000e60:	d9b6      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x1dc>
 8000e62:	e709      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
 8000e64:	40021000 	.word	0x40021000
 8000e68:	42420000 	.word	0x42420000
 8000e6c:	42420480 	.word	0x42420480
 8000e70:	20000000 	.word	0x20000000
 8000e74:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e78:	4c22      	ldr	r4, [pc, #136]	; (8000f04 <HAL_RCC_OscConfig+0x310>)
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	f43f aee2 	beq.w	8000c4a <HAL_RCC_OscConfig+0x56>
 8000e86:	2300      	movs	r3, #0
 8000e88:	4e1f      	ldr	r6, [pc, #124]	; (8000f08 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e8a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e8c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e8e:	d12b      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000e90:	f7ff fca4 	bl	80007dc <HAL_GetTick>
 8000e94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	0199      	lsls	r1, r3, #6
 8000e9a:	d41f      	bmi.n	8000edc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e9c:	6a2b      	ldr	r3, [r5, #32]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d105      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ea4:	6862      	ldr	r2, [r4, #4]
 8000ea6:	68a9      	ldr	r1, [r5, #8]
 8000ea8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000eac:	430a      	orrs	r2, r1
 8000eae:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eb0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000eb2:	6862      	ldr	r2, [r4, #4]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fc8b 	bl	80007dc <HAL_GetTick>
 8000ec6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	019a      	lsls	r2, r3, #6
 8000ecc:	f53f aea7 	bmi.w	8000c1e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed0:	f7ff fc84 	bl	80007dc <HAL_GetTick>
 8000ed4:	1b40      	subs	r0, r0, r5
 8000ed6:	2802      	cmp	r0, #2
 8000ed8:	d9f6      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x2d4>
 8000eda:	e6cd      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000edc:	f7ff fc7e 	bl	80007dc <HAL_GetTick>
 8000ee0:	1bc0      	subs	r0, r0, r7
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9d7      	bls.n	8000e96 <HAL_RCC_OscConfig+0x2a2>
 8000ee6:	e6c7      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc78 	bl	80007dc <HAL_GetTick>
 8000eec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	f57f ae94 	bpl.w	8000c1e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fc71 	bl	80007dc <HAL_GetTick>
 8000efa:	1b40      	subs	r0, r0, r5
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9f6      	bls.n	8000eee <HAL_RCC_OscConfig+0x2fa>
 8000f00:	e6ba      	b.n	8000c78 <HAL_RCC_OscConfig+0x84>
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	42420060 	.word	0x42420060

08000f0c <HAL_RCC_GetSysClockFreq>:
{
 8000f0c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f10:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f12:	ac02      	add	r4, sp, #8
 8000f14:	f103 0510 	add.w	r5, r3, #16
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	6859      	ldr	r1, [r3, #4]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	c203      	stmia	r2!, {r0, r1}
 8000f22:	42ab      	cmp	r3, r5
 8000f24:	4614      	mov	r4, r2
 8000f26:	d1f7      	bne.n	8000f18 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f2e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000f30:	4911      	ldr	r1, [pc, #68]	; (8000f78 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f32:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000f36:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f38:	f003 020c 	and.w	r2, r3, #12
 8000f3c:	2a08      	cmp	r2, #8
 8000f3e:	d117      	bne.n	8000f70 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f40:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f44:	a806      	add	r0, sp, #24
 8000f46:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f48:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f4a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f4e:	d50c      	bpl.n	8000f6a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f50:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f54:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f58:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f5a:	aa06      	add	r2, sp, #24
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f62:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000f66:	b007      	add	sp, #28
 8000f68:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f6c:	4350      	muls	r0, r2
 8000f6e:	e7fa      	b.n	8000f66 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000f72:	e7f8      	b.n	8000f66 <HAL_RCC_GetSysClockFreq+0x5a>
 8000f74:	08005774 	.word	0x08005774
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	007a1200 	.word	0x007a1200
 8000f80:	003d0900 	.word	0x003d0900

08000f84 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f84:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <HAL_RCC_ClockConfig+0x154>)
{
 8000f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f8a:	6813      	ldr	r3, [r2, #0]
{
 8000f8c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	428b      	cmp	r3, r1
{
 8000f94:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f96:	d32a      	bcc.n	8000fee <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f98:	6829      	ldr	r1, [r5, #0]
 8000f9a:	078c      	lsls	r4, r1, #30
 8000f9c:	d434      	bmi.n	8001008 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9e:	07ca      	lsls	r2, r1, #31
 8000fa0:	d447      	bmi.n	8001032 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fa2:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_RCC_ClockConfig+0x154>)
 8000fa4:	6813      	ldr	r3, [r2, #0]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	429e      	cmp	r6, r3
 8000fac:	f0c0 8082 	bcc.w	80010b4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	682a      	ldr	r2, [r5, #0]
 8000fb2:	4c4a      	ldr	r4, [pc, #296]	; (80010dc <HAL_RCC_ClockConfig+0x158>)
 8000fb4:	f012 0f04 	tst.w	r2, #4
 8000fb8:	f040 8087 	bne.w	80010ca <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fbc:	0713      	lsls	r3, r2, #28
 8000fbe:	d506      	bpl.n	8000fce <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	692a      	ldr	r2, [r5, #16]
 8000fc4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fcc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fce:	f7ff ff9d 	bl	8000f0c <HAL_RCC_GetSysClockFreq>
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_RCC_ClockConfig+0x15c>)
 8000fd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	40d8      	lsrs	r0, r3
 8000fde:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <HAL_RCC_ClockConfig+0x160>)
 8000fe0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fb5a 	bl	800069c <HAL_InitTick>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ff8:	6813      	ldr	r3, [r2, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	4299      	cmp	r1, r3
 8001000:	d0ca      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
 8001004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001008:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800100a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800100e:	bf1e      	ittt	ne
 8001010:	685a      	ldrne	r2, [r3, #4]
 8001012:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001016:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800101a:	bf42      	ittt	mi
 800101c:	685a      	ldrmi	r2, [r3, #4]
 800101e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001022:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	68a8      	ldr	r0, [r5, #8]
 8001028:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800102c:	4302      	orrs	r2, r0
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e7b5      	b.n	8000f9e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001032:	686a      	ldr	r2, [r5, #4]
 8001034:	4c29      	ldr	r4, [pc, #164]	; (80010dc <HAL_RCC_ClockConfig+0x158>)
 8001036:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001038:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	d11c      	bne.n	8001076 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	d0df      	beq.n	8001002 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001042:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001044:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001048:	f023 0303 	bic.w	r3, r3, #3
 800104c:	4313      	orrs	r3, r2
 800104e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001050:	f7ff fbc4 	bl	80007dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001054:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001056:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001058:	2b01      	cmp	r3, #1
 800105a:	d114      	bne.n	8001086 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b04      	cmp	r3, #4
 8001064:	d09d      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001066:	f7ff fbb9 	bl	80007dc <HAL_GetTick>
 800106a:	1bc0      	subs	r0, r0, r7
 800106c:	4540      	cmp	r0, r8
 800106e:	d9f5      	bls.n	800105c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
 8001072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001076:	2a02      	cmp	r2, #2
 8001078:	d102      	bne.n	8001080 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800107e:	e7df      	b.n	8001040 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	f013 0f02 	tst.w	r3, #2
 8001084:	e7dc      	b.n	8001040 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001086:	2b02      	cmp	r3, #2
 8001088:	d10f      	bne.n	80010aa <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d086      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001094:	f7ff fba2 	bl	80007dc <HAL_GetTick>
 8001098:	1bc0      	subs	r0, r0, r7
 800109a:	4540      	cmp	r0, r8
 800109c:	d9f5      	bls.n	800108a <HAL_RCC_ClockConfig+0x106>
 800109e:	e7e7      	b.n	8001070 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a0:	f7ff fb9c 	bl	80007dc <HAL_GetTick>
 80010a4:	1bc0      	subs	r0, r0, r7
 80010a6:	4540      	cmp	r0, r8
 80010a8:	d8e2      	bhi.n	8001070 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	6863      	ldr	r3, [r4, #4]
 80010ac:	f013 0f0c 	tst.w	r3, #12
 80010b0:	d1f6      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x11c>
 80010b2:	e776      	b.n	8000fa2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f023 0307 	bic.w	r3, r3, #7
 80010ba:	4333      	orrs	r3, r6
 80010bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	429e      	cmp	r6, r3
 80010c6:	d19c      	bne.n	8001002 <HAL_RCC_ClockConfig+0x7e>
 80010c8:	e772      	b.n	8000fb0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	68e9      	ldr	r1, [r5, #12]
 80010ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d2:	430b      	orrs	r3, r1
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	e771      	b.n	8000fbc <HAL_RCC_ClockConfig+0x38>
 80010d8:	40022000 	.word	0x40022000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	08005834 	.word	0x08005834
 80010e4:	20000000 	.word	0x20000000

080010e8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <HAL_RCC_GetPCLK1Freq+0x18>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010f6:	6810      	ldr	r0, [r2, #0]
}    
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	08005844 	.word	0x08005844
 8001104:	20000000 	.word	0x20000000

08001108 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_RCC_GetPCLK2Freq+0x14>)
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <HAL_RCC_GetPCLK2Freq+0x18>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001116:	6810      	ldr	r0, [r2, #0]
} 
 8001118:	40d8      	lsrs	r0, r3
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	08005844 	.word	0x08005844
 8001124:	20000000 	.word	0x20000000

08001128 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001128:	230f      	movs	r3, #15
 800112a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_RCC_GetClockConfig+0x34>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800113c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001144:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800114e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_RCC_GetClockConfig+0x38>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	600b      	str	r3, [r1, #0]
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_TIM_Base_MspInit>:
 8001164:	4770      	bx	lr

08001166 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001166:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001168:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	4770      	bx	lr

0800117c <HAL_TIM_OC_DelayElapsedCallback>:
 800117c:	4770      	bx	lr

0800117e <HAL_TIM_IC_CaptureCallback>:
 800117e:	4770      	bx	lr

08001180 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001180:	4770      	bx	lr

08001182 <HAL_TIM_TriggerCallback>:
 8001182:	4770      	bx	lr

08001184 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001184:	6803      	ldr	r3, [r0, #0]
{
 8001186:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001188:	691a      	ldr	r2, [r3, #16]
{
 800118a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800118c:	0791      	lsls	r1, r2, #30
 800118e:	d50e      	bpl.n	80011ae <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	0792      	lsls	r2, r2, #30
 8001194:	d50b      	bpl.n	80011ae <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001196:	f06f 0202 	mvn.w	r2, #2
 800119a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800119c:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800119e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011a0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011a2:	079b      	lsls	r3, r3, #30
 80011a4:	d077      	beq.n	8001296 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80011a6:	f7ff ffea 	bl	800117e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	2300      	movs	r3, #0
 80011ac:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	0750      	lsls	r0, r2, #29
 80011b4:	d510      	bpl.n	80011d8 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	0751      	lsls	r1, r2, #29
 80011ba:	d50d      	bpl.n	80011d8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011bc:	f06f 0204 	mvn.w	r2, #4
 80011c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011c2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011c4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011c6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011c8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011cc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011ce:	d068      	beq.n	80012a2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80011d0:	f7ff ffd5 	bl	800117e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d4:	2300      	movs	r3, #0
 80011d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	0712      	lsls	r2, r2, #28
 80011de:	d50f      	bpl.n	8001200 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	0710      	lsls	r0, r2, #28
 80011e4:	d50c      	bpl.n	8001200 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011e6:	f06f 0208 	mvn.w	r2, #8
 80011ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011ec:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011f0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011f2:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011f4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011f6:	d05a      	beq.n	80012ae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80011f8:	f7ff ffc1 	bl	800117e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011fc:	2300      	movs	r3, #0
 80011fe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	06d2      	lsls	r2, r2, #27
 8001206:	d510      	bpl.n	800122a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	06d0      	lsls	r0, r2, #27
 800120c:	d50d      	bpl.n	800122a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800120e:	f06f 0210 	mvn.w	r2, #16
 8001212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001214:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001216:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001218:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800121a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800121e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001220:	d04b      	beq.n	80012ba <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001222:	f7ff ffac 	bl	800117e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001226:	2300      	movs	r3, #0
 8001228:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	07d1      	lsls	r1, r2, #31
 8001230:	d508      	bpl.n	8001244 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	07d2      	lsls	r2, r2, #31
 8001236:	d505      	bpl.n	8001244 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001238:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800123c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800123e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001240:	f7ff f94c 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	0610      	lsls	r0, r2, #24
 800124a:	d508      	bpl.n	800125e <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	0611      	lsls	r1, r2, #24
 8001250:	d505      	bpl.n	800125e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001252:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001256:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001258:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800125a:	f000 f888 	bl	800136e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	0652      	lsls	r2, r2, #25
 8001264:	d508      	bpl.n	8001278 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	0650      	lsls	r0, r2, #25
 800126a:	d505      	bpl.n	8001278 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800126c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001270:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001272:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001274:	f7ff ff85 	bl	8001182 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	0691      	lsls	r1, r2, #26
 800127e:	d522      	bpl.n	80012c6 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	0692      	lsls	r2, r2, #26
 8001284:	d51f      	bpl.n	80012c6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001286:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800128a:	4620      	mov	r0, r4
    }
  }
}
 800128c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001290:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001292:	f000 b86b 	b.w	800136c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001296:	f7ff ff71 	bl	800117c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff ff70 	bl	8001180 <HAL_TIM_PWM_PulseFinishedCallback>
 80012a0:	e783      	b.n	80011aa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a2:	f7ff ff6b 	bl	800117c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ff6a 	bl	8001180 <HAL_TIM_PWM_PulseFinishedCallback>
 80012ac:	e792      	b.n	80011d4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ae:	f7ff ff65 	bl	800117c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff ff64 	bl	8001180 <HAL_TIM_PWM_PulseFinishedCallback>
 80012b8:	e7a0      	b.n	80011fc <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ba:	f7ff ff5f 	bl	800117c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff ff5e 	bl	8001180 <HAL_TIM_PWM_PulseFinishedCallback>
 80012c4:	e7af      	b.n	8001226 <HAL_TIM_IRQHandler+0xa2>
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80012ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012cc:	4290      	cmp	r0, r2
 80012ce:	d00a      	beq.n	80012e6 <TIM_Base_SetConfig+0x1e>
 80012d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012d4:	d007      	beq.n	80012e6 <TIM_Base_SetConfig+0x1e>
 80012d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012da:	4290      	cmp	r0, r2
 80012dc:	d003      	beq.n	80012e6 <TIM_Base_SetConfig+0x1e>
 80012de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012e2:	4290      	cmp	r0, r2
 80012e4:	d115      	bne.n	8001312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012ec:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <TIM_Base_SetConfig+0x6c>)
 80012f0:	4290      	cmp	r0, r2
 80012f2:	d00a      	beq.n	800130a <TIM_Base_SetConfig+0x42>
 80012f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012f8:	d007      	beq.n	800130a <TIM_Base_SetConfig+0x42>
 80012fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012fe:	4290      	cmp	r0, r2
 8001300:	d003      	beq.n	800130a <TIM_Base_SetConfig+0x42>
 8001302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001306:	4290      	cmp	r0, r2
 8001308:	d103      	bne.n	8001312 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800130a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800130c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001310:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001312:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001318:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800131a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800131c:	688b      	ldr	r3, [r1, #8]
 800131e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001320:	680b      	ldr	r3, [r1, #0]
 8001322:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <TIM_Base_SetConfig+0x6c>)
 8001326:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001328:	bf04      	itt	eq
 800132a:	690b      	ldreq	r3, [r1, #16]
 800132c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800132e:	2301      	movs	r3, #1
 8001330:	6143      	str	r3, [r0, #20]
 8001332:	4770      	bx	lr
 8001334:	40012c00 	.word	0x40012c00

08001338 <HAL_TIM_Base_Init>:
{
 8001338:	b510      	push	{r4, lr}
  if(htim == NULL)
 800133a:	4604      	mov	r4, r0
 800133c:	b1a0      	cbz	r0, 8001368 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800133e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001342:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001346:	b91b      	cbnz	r3, 8001350 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001348:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800134c:	f7ff ff0a 	bl	8001164 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001350:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001352:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001354:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001358:	1d21      	adds	r1, r4, #4
 800135a:	f7ff ffb5 	bl	80012c8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800135e:	2301      	movs	r3, #1
  return HAL_OK;
 8001360:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001366:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
}
 800136a:	bd10      	pop	{r4, pc}

0800136c <HAL_TIMEx_CommutationCallback>:
 800136c:	4770      	bx	lr

0800136e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800136e:	4770      	bx	lr

08001370 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001378:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001382:	2320      	movs	r3, #32
 8001384:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001388:	4770      	bx	lr
	...

0800138c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800138c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001390:	6805      	ldr	r5, [r0, #0]
 8001392:	68c2      	ldr	r2, [r0, #12]
 8001394:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001396:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001398:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139c:	4313      	orrs	r3, r2
 800139e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013a0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80013a2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80013a8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80013ac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013b0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013b6:	696b      	ldr	r3, [r5, #20]
 80013b8:	6982      	ldr	r2, [r0, #24]
 80013ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013be:	4313      	orrs	r3, r2
 80013c0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <UART_SetConfig+0x138>)
{
 80013c4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80013c6:	429d      	cmp	r5, r3
 80013c8:	f04f 0419 	mov.w	r4, #25
 80013cc:	d146      	bne.n	800145c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013ce:	f7ff fe9b 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
 80013d2:	fb04 f300 	mul.w	r3, r4, r0
 80013d6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80013da:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013de:	00b6      	lsls	r6, r6, #2
 80013e0:	fbb3 f3f6 	udiv	r3, r3, r6
 80013e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80013e8:	011e      	lsls	r6, r3, #4
 80013ea:	f7ff fe8d 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
 80013ee:	4360      	muls	r0, r4
 80013f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fbb0 f7f3 	udiv	r7, r0, r3
 80013fa:	f7ff fe85 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
 80013fe:	4360      	muls	r0, r4
 8001400:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	fbb0 f3f3 	udiv	r3, r0, r3
 800140a:	fbb3 f3f8 	udiv	r3, r3, r8
 800140e:	fb08 7313 	mls	r3, r8, r3, r7
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	3332      	adds	r3, #50	; 0x32
 8001416:	fbb3 f3f8 	udiv	r3, r3, r8
 800141a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800141e:	f7ff fe73 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
 8001422:	4360      	muls	r0, r4
 8001424:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	fbb0 faf2 	udiv	sl, r0, r2
 800142e:	f7ff fe6b 	bl	8001108 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001432:	4360      	muls	r0, r4
 8001434:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001442:	fb08 a313 	mls	r3, r8, r3, sl
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	3332      	adds	r3, #50	; 0x32
 800144a:	fbb3 f3f8 	udiv	r3, r3, r8
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	433b      	orrs	r3, r7
 8001454:	4433      	add	r3, r6
 8001456:	60ab      	str	r3, [r5, #8]
 8001458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800145c:	f7ff fe44 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
 8001460:	fb04 f300 	mul.w	r3, r4, r0
 8001464:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001468:	f04f 0864 	mov.w	r8, #100	; 0x64
 800146c:	00b6      	lsls	r6, r6, #2
 800146e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001472:	fbb3 f3f8 	udiv	r3, r3, r8
 8001476:	011e      	lsls	r6, r3, #4
 8001478:	f7ff fe36 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
 800147c:	4360      	muls	r0, r4
 800147e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fbb0 f7f3 	udiv	r7, r0, r3
 8001488:	f7ff fe2e 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
 800148c:	4360      	muls	r0, r4
 800148e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	fbb3 f3f8 	udiv	r3, r3, r8
 800149c:	fb08 7313 	mls	r3, r8, r3, r7
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	3332      	adds	r3, #50	; 0x32
 80014a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80014a8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80014ac:	f7ff fe1c 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
 80014b0:	4360      	muls	r0, r4
 80014b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	fbb0 faf2 	udiv	sl, r0, r2
 80014bc:	f7ff fe14 	bl	80010e8 <HAL_RCC_GetPCLK1Freq>
 80014c0:	e7b7      	b.n	8001432 <UART_SetConfig+0xa6>
 80014c2:	bf00      	nop
 80014c4:	40013800 	.word	0x40013800

080014c8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	4604      	mov	r4, r0
 80014cc:	460e      	mov	r6, r1
 80014ce:	4617      	mov	r7, r2
 80014d0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80014d2:	6821      	ldr	r1, [r4, #0]
 80014d4:	680b      	ldr	r3, [r1, #0]
 80014d6:	ea36 0303 	bics.w	r3, r6, r3
 80014da:	d101      	bne.n	80014e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
}
 80014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014e0:	1c6b      	adds	r3, r5, #1
 80014e2:	d0f7      	beq.n	80014d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014e4:	b995      	cbnz	r5, 800150c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014e6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80014e8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80014fa:	2320      	movs	r3, #32
 80014fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001500:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001504:	2300      	movs	r3, #0
 8001506:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800150c:	f7ff f966 	bl	80007dc <HAL_GetTick>
 8001510:	1bc0      	subs	r0, r0, r7
 8001512:	4285      	cmp	r5, r0
 8001514:	d2dd      	bcs.n	80014d2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001516:	e7e6      	b.n	80014e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001518 <HAL_UART_Init>:
{
 8001518:	b510      	push	{r4, lr}
  if(huart == NULL)
 800151a:	4604      	mov	r4, r0
 800151c:	b340      	cbz	r0, 8001570 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800151e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001522:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001526:	b91b      	cbnz	r3, 8001530 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001528:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800152c:	f7ff f83a 	bl	80005a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001530:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001532:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001534:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001538:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800153a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800153c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001540:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001542:	f7ff ff23 	bl	800138c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001546:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001548:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001558:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001560:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001562:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001564:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001566:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800156a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800156e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	bd10      	pop	{r4, pc}

08001574 <HAL_UART_Transmit>:
{
 8001574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001578:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800157a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800157e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001580:	2b20      	cmp	r3, #32
{
 8001582:	460d      	mov	r5, r1
 8001584:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001586:	d14e      	bne.n	8001626 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001588:	2900      	cmp	r1, #0
 800158a:	d049      	beq.n	8001620 <HAL_UART_Transmit+0xac>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d047      	beq.n	8001620 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001590:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001594:	2b01      	cmp	r3, #1
 8001596:	d046      	beq.n	8001626 <HAL_UART_Transmit+0xb2>
 8001598:	2301      	movs	r3, #1
 800159a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159e:	2300      	movs	r3, #0
 80015a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015a2:	2321      	movs	r3, #33	; 0x21
 80015a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015a8:	f7ff f918 	bl	80007dc <HAL_GetTick>
 80015ac:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80015ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80015b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80015b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b96b      	cbnz	r3, 80015d8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4632      	mov	r2, r6
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff80 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015c8:	b9a8      	cbnz	r0, 80015f6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80015ca:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80015cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80015d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80015d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80015d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015da:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80015dc:	3b01      	subs	r3, #1
 80015de:	b29b      	uxth	r3, r3
 80015e0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015e2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015e4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ea:	4620      	mov	r0, r4
 80015ec:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ee:	d10e      	bne.n	800160e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015f0:	f7ff ff6a 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015f4:	b110      	cbz	r0, 80015fc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80015f6:	2003      	movs	r0, #3
 80015f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015fc:	882b      	ldrh	r3, [r5, #0]
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001604:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	b943      	cbnz	r3, 800161c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800160a:	3502      	adds	r5, #2
 800160c:	e7d3      	b.n	80015b6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800160e:	f7ff ff5b 	bl	80014c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001612:	2800      	cmp	r0, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	782a      	ldrb	r2, [r5, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	3501      	adds	r5, #1
 800161e:	e7ca      	b.n	80015b6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001626:	2002      	movs	r0, #2
}
 8001628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800162c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800162c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001630:	2b20      	cmp	r3, #32
 8001632:	d120      	bne.n	8001676 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8001634:	b1e9      	cbz	r1, 8001672 <HAL_UART_Receive_IT+0x46>
 8001636:	b1e2      	cbz	r2, 8001672 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001638:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800163c:	2b01      	cmp	r3, #1
 800163e:	d01a      	beq.n	8001676 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001640:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001642:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001644:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001646:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001648:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800164a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800164e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001650:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001652:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001654:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001658:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800165c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800165e:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001660:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001662:	f041 0101 	orr.w	r1, r1, #1
 8001666:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001668:	68d1      	ldr	r1, [r2, #12]
 800166a:	f041 0120 	orr.w	r1, r1, #32
 800166e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001670:	4770      	bx	lr
      return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
 8001674:	4770      	bx	lr
    return HAL_BUSY;
 8001676:	2002      	movs	r0, #2
}
 8001678:	4770      	bx	lr

0800167a <HAL_UART_TxCpltCallback>:
 800167a:	4770      	bx	lr

0800167c <HAL_UART_RxCpltCallback>:
 800167c:	4770      	bx	lr

0800167e <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800167e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001682:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001684:	2b22      	cmp	r3, #34	; 0x22
 8001686:	d136      	bne.n	80016f6 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001688:	6883      	ldr	r3, [r0, #8]
 800168a:	6901      	ldr	r1, [r0, #16]
 800168c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001690:	6802      	ldr	r2, [r0, #0]
 8001692:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001694:	d123      	bne.n	80016de <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001696:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001698:	b9e9      	cbnz	r1, 80016d6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800169a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800169e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80016a2:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80016a4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80016a6:	3c01      	subs	r4, #1
 80016a8:	b2a4      	uxth	r4, r4
 80016aa:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80016ac:	b98c      	cbnz	r4, 80016d2 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80016ae:	6803      	ldr	r3, [r0, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	f022 0220 	bic.w	r2, r2, #32
 80016b6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016be:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80016c8:	2320      	movs	r3, #32
 80016ca:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80016ce:	f7ff ffd5 	bl	800167c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80016d2:	2000      	movs	r0, #0
}
 80016d4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f823 2b01 	strh.w	r2, [r3], #1
 80016dc:	e7e1      	b.n	80016a2 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016de:	b921      	cbnz	r1, 80016ea <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016e0:	1c59      	adds	r1, r3, #1
 80016e2:	6852      	ldr	r2, [r2, #4]
 80016e4:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e7dc      	b.n	80016a4 <UART_Receive_IT+0x26>
 80016ea:	6852      	ldr	r2, [r2, #4]
 80016ec:	1c59      	adds	r1, r3, #1
 80016ee:	6281      	str	r1, [r0, #40]	; 0x28
 80016f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016f4:	e7f7      	b.n	80016e6 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80016f6:	2002      	movs	r0, #2
 80016f8:	bd10      	pop	{r4, pc}

080016fa <HAL_UART_ErrorCallback>:
 80016fa:	4770      	bx	lr

080016fc <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016fc:	6803      	ldr	r3, [r0, #0]
{
 80016fe:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001700:	681a      	ldr	r2, [r3, #0]
{
 8001702:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001704:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001706:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001708:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800170a:	d107      	bne.n	800171c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800170c:	0696      	lsls	r6, r2, #26
 800170e:	d55a      	bpl.n	80017c6 <HAL_UART_IRQHandler+0xca>
 8001710:	068d      	lsls	r5, r1, #26
 8001712:	d558      	bpl.n	80017c6 <HAL_UART_IRQHandler+0xca>
}
 8001714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001718:	f7ff bfb1 	b.w	800167e <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800171c:	f015 0501 	ands.w	r5, r5, #1
 8001720:	d102      	bne.n	8001728 <HAL_UART_IRQHandler+0x2c>
 8001722:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001726:	d04e      	beq.n	80017c6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001728:	07d3      	lsls	r3, r2, #31
 800172a:	d505      	bpl.n	8001738 <HAL_UART_IRQHandler+0x3c>
 800172c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800172e:	bf42      	ittt	mi
 8001730:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001732:	f043 0301 	orrmi.w	r3, r3, #1
 8001736:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001738:	0750      	lsls	r0, r2, #29
 800173a:	d504      	bpl.n	8001746 <HAL_UART_IRQHandler+0x4a>
 800173c:	b11d      	cbz	r5, 8001746 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800173e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001746:	0793      	lsls	r3, r2, #30
 8001748:	d504      	bpl.n	8001754 <HAL_UART_IRQHandler+0x58>
 800174a:	b11d      	cbz	r5, 8001754 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800174c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001754:	0716      	lsls	r6, r2, #28
 8001756:	d504      	bpl.n	8001762 <HAL_UART_IRQHandler+0x66>
 8001758:	b11d      	cbz	r5, 8001762 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800175a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d066      	beq.n	8001836 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001768:	0695      	lsls	r5, r2, #26
 800176a:	d504      	bpl.n	8001776 <HAL_UART_IRQHandler+0x7a>
 800176c:	0688      	lsls	r0, r1, #26
 800176e:	d502      	bpl.n	8001776 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff ff84 	bl	800167e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001776:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001778:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800177a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800177c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800177e:	0711      	lsls	r1, r2, #28
 8001780:	d402      	bmi.n	8001788 <HAL_UART_IRQHandler+0x8c>
 8001782:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001786:	d01a      	beq.n	80017be <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001788:	f7ff fdf2 	bl	8001370 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	0652      	lsls	r2, r2, #25
 8001792:	d510      	bpl.n	80017b6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001794:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001796:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800179e:	b150      	cbz	r0, 80017b6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_UART_IRQHandler+0x13c>)
 80017a2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017a4:	f7ff f872 	bl	800088c <HAL_DMA_Abort_IT>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d044      	beq.n	8001836 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80017ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017b4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff ff9f 	bl	80016fa <HAL_UART_ErrorCallback>
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80017be:	f7ff ff9c 	bl	80016fa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017c6:	0616      	lsls	r6, r2, #24
 80017c8:	d527      	bpl.n	800181a <HAL_UART_IRQHandler+0x11e>
 80017ca:	060d      	lsls	r5, r1, #24
 80017cc:	d525      	bpl.n	800181a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80017ce:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80017d2:	2a21      	cmp	r2, #33	; 0x21
 80017d4:	d12f      	bne.n	8001836 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017d6:	68a2      	ldr	r2, [r4, #8]
 80017d8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017dc:	6a22      	ldr	r2, [r4, #32]
 80017de:	d117      	bne.n	8001810 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80017e0:	8811      	ldrh	r1, [r2, #0]
 80017e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80017e6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017e8:	6921      	ldr	r1, [r4, #16]
 80017ea:	b979      	cbnz	r1, 800180c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80017ec:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80017ee:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80017f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80017f2:	3a01      	subs	r2, #1
 80017f4:	b292      	uxth	r2, r2
 80017f6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80017f8:	b9ea      	cbnz	r2, 8001836 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001800:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800180c:	3201      	adds	r2, #1
 800180e:	e7ee      	b.n	80017ee <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001810:	1c51      	adds	r1, r2, #1
 8001812:	6221      	str	r1, [r4, #32]
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	e7ea      	b.n	80017f0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800181a:	0650      	lsls	r0, r2, #25
 800181c:	d50b      	bpl.n	8001836 <HAL_UART_IRQHandler+0x13a>
 800181e:	064a      	lsls	r2, r1, #25
 8001820:	d509      	bpl.n	8001836 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001822:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001824:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800182c:	2320      	movs	r3, #32
 800182e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001832:	f7ff ff22 	bl	800167a <HAL_UART_TxCpltCallback>
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	0800183d 	.word	0x0800183d

0800183c <UART_DMAAbortOnError>:
{
 800183c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800183e:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001840:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001842:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001844:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001846:	f7ff ff58 	bl	80016fa <HAL_UART_ErrorCallback>
 800184a:	bd08      	pop	{r3, pc}

0800184c <Gsm_ReturnString.part.1>:
	}
	// timeout
	return false;	
}
//#########################################################################################################
bool	Gsm_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	4605      	mov	r5, r0
 8001850:	460c      	mov	r4, r1
		return false;

	char *str = (char*)Gsm.RxBuffer;
	

	str = strtok (str,SplitterChars);
 8001852:	480f      	ldr	r0, [pc, #60]	; (8001890 <Gsm_ReturnString.part.1+0x44>)
 8001854:	4611      	mov	r1, r2
bool	Gsm_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
 8001856:	4616      	mov	r6, r2
	str = strtok (str,SplitterChars);
 8001858:	f002 f9f0 	bl	8003c3c <strtok>
	if(str == NULL)
 800185c:	b928      	cbnz	r0, 800186a <Gsm_ReturnString.part.1+0x1e>
	{
		strcpy(result,"");
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <Gsm_ReturnString.part.1+0x48>)
 8001860:	4628      	mov	r0, r5
 8001862:	f002 f9c8 	bl	8003bf6 <strcpy>
		return false;
 8001866:	2000      	movs	r0, #0
 8001868:	bd70      	pop	{r4, r5, r6, pc}
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 800186a:	4631      	mov	r1, r6
 800186c:	2000      	movs	r0, #0
 800186e:	f002 f9e5 	bl	8003c3c <strtok>
		if(str != NULL)
 8001872:	4601      	mov	r1, r0
 8001874:	b140      	cbz	r0, 8001888 <Gsm_ReturnString.part.1+0x3c>
			WantWhichOne--;
 8001876:	3c01      	subs	r4, #1
		if(WantWhichOne==0)
 8001878:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800187c:	d1f5      	bne.n	800186a <Gsm_ReturnString.part.1+0x1e>
		{
			strcpy(result,str);
 800187e:	4628      	mov	r0, r5
 8001880:	f002 f9b9 	bl	8003bf6 <strcpy>
			return true;
 8001884:	2001      	movs	r0, #1
 8001886:	bd70      	pop	{r4, r5, r6, pc}
		if(WantWhichOne==0)
 8001888:	2c00      	cmp	r4, #0
 800188a:	d0f8      	beq.n	800187e <Gsm_ReturnString.part.1+0x32>
 800188c:	e7e7      	b.n	800185e <Gsm_ReturnString.part.1+0x12>
 800188e:	bf00      	nop
 8001890:	200026a4 	.word	0x200026a4
 8001894:	0800591c 	.word	0x0800591c

08001898 <malloc>:
    if(size > 0)
 8001898:	b108      	cbz	r0, 800189e <malloc+0x6>
        ptr = pvPortMalloc(size);
 800189a:	f000 bcd5 	b.w	8002248 <pvPortMalloc>
}
 800189e:	4770      	bx	lr

080018a0 <Gsm_SendRaw>:
	if(len <= _GSM_TX_SIZE)
 80018a0:	2980      	cmp	r1, #128	; 0x80
{
 80018a2:	b538      	push	{r3, r4, r5, lr}
 80018a4:	4605      	mov	r5, r0
 80018a6:	460c      	mov	r4, r1
	if(len <= _GSM_TX_SIZE)
 80018a8:	d80e      	bhi.n	80018c8 <Gsm_SendRaw+0x28>
		memcpy(Gsm.TxBuffer,data,len);
 80018aa:	460a      	mov	r2, r1
 80018ac:	4601      	mov	r1, r0
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <Gsm_SendRaw+0x2c>)
 80018b0:	f002 f87e 	bl	80039b0 <memcpy>
		if(HAL_UART_Transmit(&_GSM_USART,data,len,100) == HAL_OK)
 80018b4:	2364      	movs	r3, #100	; 0x64
 80018b6:	4622      	mov	r2, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <Gsm_SendRaw+0x30>)
 80018bc:	f7ff fe5a 	bl	8001574 <HAL_UART_Transmit>
 80018c0:	fab0 f080 	clz	r0, r0
 80018c4:	0940      	lsrs	r0, r0, #5
 80018c6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 80018c8:	2000      	movs	r0, #0
}
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	200027a4 	.word	0x200027a4
 80018d0:	20002350 	.word	0x20002350

080018d4 <Gsm_SendString>:
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4604      	mov	r4, r0
	return Gsm_SendRaw((uint8_t*)data,strlen(data));
 80018d8:	f7fe fc3a 	bl	8000150 <strlen>
 80018dc:	b281      	uxth	r1, r0
 80018de:	4620      	mov	r0, r4
}
 80018e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Gsm_SendRaw((uint8_t*)data,strlen(data));
 80018e4:	f7ff bfdc 	b.w	80018a0 <Gsm_SendRaw>

080018e8 <Gsm_SendStringAndWait>:
{
 80018e8:	b538      	push	{r3, r4, r5, lr}
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
	if(Gsm_SendRaw((uint8_t*)data,strlen(data))==false)
 80018ee:	f7fe fc2f 	bl	8000150 <strlen>
 80018f2:	b281      	uxth	r1, r0
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff ffd3 	bl	80018a0 <Gsm_SendRaw>
 80018fa:	4604      	mov	r4, r0
 80018fc:	b110      	cbz	r0, 8001904 <Gsm_SendStringAndWait+0x1c>
	osDelay(DelayMs);
 80018fe:	4628      	mov	r0, r5
 8001900:	f000 fc12 	bl	8002128 <osDelay>
}
 8001904:	4620      	mov	r0, r4
 8001906:	bd38      	pop	{r3, r4, r5, pc}

08001908 <Gsm_WaitForString>:
{
 8001908:	b40c      	push	{r2, r3}
 800190a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4605      	mov	r5, r0
 8001914:	f897 6030 	ldrb.w	r6, [r7, #48]	; 0x30
	if(result == NULL)
 8001918:	4688      	mov	r8, r1
 800191a:	b931      	cbnz	r1, 800192a <Gsm_WaitForString+0x22>
		return false;
 800191c:	2000      	movs	r0, #0
}
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001926:	b002      	add	sp, #8
 8001928:	4770      	bx	lr
	if(CountOfParameter == 0)
 800192a:	2e00      	cmp	r6, #0
 800192c:	d0f6      	beq.n	800191c <Gsm_WaitForString+0x14>
	char *arg[CountOfParameter];
 800192e:	00b2      	lsls	r2, r6, #2
 8001930:	320a      	adds	r2, #10
	*result=0;
 8001932:	2300      	movs	r3, #0
	char *arg[CountOfParameter];
 8001934:	f022 0207 	bic.w	r2, r2, #7
 8001938:	ebad 0d02 	sub.w	sp, sp, r2
 800193c:	46e9      	mov	r9, sp
	*result=0;
 800193e:	700b      	strb	r3, [r1, #0]
	va_start (tag,CountOfParameter);
 8001940:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001944:	6079      	str	r1, [r7, #4]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4296      	cmp	r6, r2
 800194a:	d815      	bhi.n	8001978 <Gsm_WaitForString+0x70>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800194c:	f04f 0a00 	mov.w	sl, #0
 8001950:	45aa      	cmp	sl, r5
 8001952:	d2e3      	bcs.n	800191c <Gsm_WaitForString+0x14>
		osDelay(50);
 8001954:	2032      	movs	r0, #50	; 0x32
 8001956:	f000 fbe7 	bl	8002128 <osDelay>
 800195a:	2400      	movs	r4, #0
			if(strstr((char*)Gsm.RxBuffer,arg[mx])!=NULL)
 800195c:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <Gsm_WaitForString+0x8c>)
 8001962:	fa5f fb84 	uxtb.w	fp, r4
 8001966:	f002 f94e 	bl	8003c06 <strstr>
 800196a:	b158      	cbz	r0, 8001984 <Gsm_WaitForString+0x7c>
				*result = mx+1;
 800196c:	f10b 0301 	add.w	r3, fp, #1
 8001970:	f888 3000 	strb.w	r3, [r8]
				return true;
 8001974:	2001      	movs	r0, #1
 8001976:	e7d2      	b.n	800191e <Gsm_WaitForString+0x16>
		arg[i] = va_arg (tag, char *);	
 8001978:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800197c:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
 8001980:	3301      	adds	r3, #1
 8001982:	e7e0      	b.n	8001946 <Gsm_WaitForString+0x3e>
 8001984:	3401      	adds	r4, #1
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001986:	b2e3      	uxtb	r3, r4
 8001988:	429e      	cmp	r6, r3
 800198a:	d8e7      	bhi.n	800195c <Gsm_WaitForString+0x54>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800198c:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001990:	e7de      	b.n	8001950 <Gsm_WaitForString+0x48>
 8001992:	bf00      	nop
 8001994:	200026a4 	.word	0x200026a4

08001998 <Gsm_SetPower.part.3>:
	if(GsmTaskHandle == NULL){
		printf("gsmtask init fail \r\n");
	}
}
//#########################################################################################################
bool	Gsm_SetPower(bool ON_or_OFF)
 8001998:	b513      	push	{r0, r1, r4, lr}
			}
		}		
	}
	else								//	Need Power ON
	{
		if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_SET)
 800199a:	2101      	movs	r1, #1
 800199c:	4822      	ldr	r0, [pc, #136]	; (8001a28 <Gsm_SetPower.part.3+0x90>)
 800199e:	f7ff f89d 	bl	8000adc <HAL_GPIO_ReadPin>
 80019a2:	2801      	cmp	r0, #1
 80019a4:	4604      	mov	r4, r0
 80019a6:	d137      	bne.n	8001a18 <Gsm_SetPower.part.3+0x80>
		{ //power is off now
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_SET);
 80019a8:	4602      	mov	r2, r0
 80019aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ae:	481e      	ldr	r0, [pc, #120]	; (8001a28 <Gsm_SetPower.part.3+0x90>)
 80019b0:	f7ff f89a 	bl	8000ae8 <HAL_GPIO_WritePin>
			osDelay(1200);
 80019b4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80019b8:	f000 fbb6 	bl	8002128 <osDelay>
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c2:	4819      	ldr	r0, [pc, #100]	; (8001a28 <Gsm_SetPower.part.3+0x90>)
 80019c4:	f7ff f890 	bl	8000ae8 <HAL_GPIO_WritePin>
			osDelay(3000);
 80019c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019cc:	f000 fbac 	bl	8002128 <osDelay>
			if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)== GPIO_PIN_SET)
 80019d0:	4621      	mov	r1, r4
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <Gsm_SetPower.part.3+0x90>)
 80019d4:	f7ff f882 	bl	8000adc <HAL_GPIO_ReadPin>
 80019d8:	2801      	cmp	r0, #1
 80019da:	d104      	bne.n	80019e6 <Gsm_SetPower.part.3+0x4e>
			{
				Gsm.PowerState = false;
 80019dc:	2000      	movs	r0, #0
				return false;
			}
			return true;			
		} else {   //power is on now
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
			Gsm.PowerState = true;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <Gsm_SetPower.part.3+0x94>)
 80019e0:	f883 018a 	strb.w	r0, [r3, #394]	; 0x18a
 80019e4:	e016      	b.n	8001a14 <Gsm_SetPower.part.3+0x7c>
			osDelay(3000);
 80019e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ea:	f000 fb9d 	bl	8002128 <osDelay>
			Gsm_SendStringAndWait("AT\r\n",500);
 80019ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019f2:	480f      	ldr	r0, [pc, #60]	; (8001a30 <Gsm_SetPower.part.3+0x98>)
 80019f4:	f7ff ff78 	bl	80018e8 <Gsm_SendStringAndWait>
			Gsm_SendStringAndWait("AT\r\n",500);
 80019f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <Gsm_SetPower.part.3+0x98>)
 80019fe:	f7ff ff73 	bl	80018e8 <Gsm_SendStringAndWait>
			if(Gsm_WaitForString(_GSM_WAIT_TIME_VERYHIGH,&result,1,"OK") == false){
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <Gsm_SetPower.part.3+0x9c>)
 8001a04:	4622      	mov	r2, r4
 8001a06:	f10d 0107 	add.w	r1, sp, #7
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <Gsm_SetPower.part.3+0xa0>)
 8001a0c:	f7ff ff7c 	bl	8001908 <Gsm_WaitForString>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d0e3      	beq.n	80019dc <Gsm_SetPower.part.3+0x44>
			return true;			
		}
	}
}
 8001a14:	b002      	add	sp, #8
 8001a16:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <Gsm_SetPower.part.3+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a20:	f7ff f862 	bl	8000ae8 <HAL_GPIO_WritePin>
			Gsm.PowerState = true;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e7da      	b.n	80019de <Gsm_SetPower.part.3+0x46>
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	2000269c 	.word	0x2000269c
 8001a30:	08005933 	.word	0x08005933
 8001a34:	08005a26 	.word	0x08005a26
 8001a38:	00013880 	.word	0x00013880

08001a3c <Gsm_InitValue>:
{
 8001a3c:	b508      	push	{r3, lr}
	osDelay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f000 fb71 	bl	8002128 <osDelay>
 8001a46:	f7ff ffa7 	bl	8001998 <Gsm_SetPower.part.3>
	if(result){
 8001a4a:	b140      	cbz	r0, 8001a5e <Gsm_InitValue+0x22>
		printf("power on success\r\n");
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <Gsm_InitValue+0x28>)
		printf("power on fail\r\n");
 8001a4e:	f002 f837 	bl	8003ac0 <puts>
}
 8001a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osDelay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f000 bb65 	b.w	8002128 <osDelay>
		printf("power on fail\r\n");
 8001a5e:	4802      	ldr	r0, [pc, #8]	; (8001a68 <Gsm_InitValue+0x2c>)
 8001a60:	e7f5      	b.n	8001a4e <Gsm_InitValue+0x12>
 8001a62:	bf00      	nop
 8001a64:	08005888 	.word	0x08005888
 8001a68:	0800589a 	.word	0x0800589a

08001a6c <Gsm_ReturnString>:
	if(result == NULL) 
 8001a6c:	b110      	cbz	r0, 8001a74 <Gsm_ReturnString+0x8>
	if(WantWhichOne==0)
 8001a6e:	b109      	cbz	r1, 8001a74 <Gsm_ReturnString+0x8>
 8001a70:	f7ff beec 	b.w	800184c <Gsm_ReturnString.part.1>
}
 8001a74:	2000      	movs	r0, #0
 8001a76:	4770      	bx	lr

08001a78 <Gsm_ReturnInteger>:
{
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4605      	mov	r5, r0
	if(Gsm_ReturnString((char*)Gsm.RxBuffer,WantWhichOne,SplitterChars)==false)
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <Gsm_ReturnInteger+0x1c>)
 8001a7e:	f7ff fff5 	bl	8001a6c <Gsm_ReturnString>
 8001a82:	4604      	mov	r4, r0
 8001a84:	b118      	cbz	r0, 8001a8e <Gsm_ReturnInteger+0x16>
	*result = atoi((char*)Gsm.RxBuffer);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <Gsm_ReturnInteger+0x1c>)
 8001a88:	f001 ff63 	bl	8003952 <atoi>
 8001a8c:	6028      	str	r0, [r5, #0]
}
 8001a8e:	4620      	mov	r0, r4
 8001a90:	bd38      	pop	{r3, r4, r5, pc}
 8001a92:	bf00      	nop
 8001a94:	200026a4 	.word	0x200026a4

08001a98 <Gsm_RemoveChar>:
{
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	1e42      	subs	r2, r0, #1
 8001a9c:	f100 04ff 	add.w	r4, r0, #255	; 0xff
  for (src = dst = str; *src != '\0'; src++)
 8001aa0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001aa4:	b12b      	cbz	r3, 8001ab2 <Gsm_RemoveChar+0x1a>
		if (*dst != garbage)
 8001aa6:	428b      	cmp	r3, r1
		*dst = *src;
 8001aa8:	7003      	strb	r3, [r0, #0]
			dst++;
 8001aaa:	bf18      	it	ne
 8001aac:	3001      	addne	r0, #1
		if(MaxBuffCounter==0)
 8001aae:	42a2      	cmp	r2, r4
 8001ab0:	d1f6      	bne.n	8001aa0 <Gsm_RemoveChar+0x8>
  *dst = '\0';
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	7003      	strb	r3, [r0, #0]
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <Gsm_RxClear>:
{
 8001ab8:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001aba:	4c08      	ldr	r4, [pc, #32]	; (8001adc <Gsm_RxClear+0x24>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	4621      	mov	r1, r4
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <Gsm_RxClear+0x28>)
 8001ac2:	f7ff fdb3 	bl	800162c <HAL_UART_Receive_IT>
	memset(Gsm.RxBuffer,0,_GSM_RX_SIZE);
 8001ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aca:	2100      	movs	r1, #0
 8001acc:	1d20      	adds	r0, r4, #4
 8001ace:	f001 ff7a 	bl	80039c6 <memset>
	Gsm.RxIndex=0;	
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	bf00      	nop
 8001adc:	200026a0 	.word	0x200026a0
 8001ae0:	20002350 	.word	0x20002350

08001ae4 <Gsm_TxClear>:
	memset(Gsm.TxBuffer,0,_GSM_TX_SIZE);
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4801      	ldr	r0, [pc, #4]	; (8001af0 <Gsm_TxClear+0xc>)
 8001aea:	f001 bf6c 	b.w	80039c6 <memset>
 8001aee:	bf00      	nop
 8001af0:	200027a4 	.word	0x200027a4

08001af4 <Gsm_RxCallBack>:
{
 8001af4:	b510      	push	{r4, lr}
	Gsm.RxBuffer[Gsm.RxIndex] = Gsm.usartBuff;
 8001af6:	4c0e      	ldr	r4, [pc, #56]	; (8001b30 <Gsm_RxCallBack+0x3c>)
	RINGBUF_Put(&RxUart3RingBuff, Gsm.usartBuff);
 8001af8:	480e      	ldr	r0, [pc, #56]	; (8001b34 <Gsm_RxCallBack+0x40>)
	Gsm.RxBuffer[Gsm.RxIndex] = Gsm.usartBuff;
 8001afa:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
 8001afe:	7921      	ldrb	r1, [r4, #4]
 8001b00:	4423      	add	r3, r4
 8001b02:	7219      	strb	r1, [r3, #8]
	RINGBUF_Put(&RxUart3RingBuff, Gsm.usartBuff);
 8001b04:	f000 faba 	bl	800207c <RINGBUF_Put>
	if(Gsm.RxIndex < _GSM_RX_SIZE)
 8001b08:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001b0c:	2201      	movs	r2, #1
	if(Gsm.RxIndex < _GSM_RX_SIZE)
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
		Gsm.usartRxError=true;
 8001b10:	bf8d      	iteet	hi
 8001b12:	2301      	movhi	r3, #1
		Gsm.RxIndex++;
 8001b14:	3301      	addls	r3, #1
 8001b16:	f8a4 3188 	strhls.w	r3, [r4, #392]	; 0x188
		Gsm.usartRxError=true;
 8001b1a:	71a3      	strbhi	r3, [r4, #6]
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001b1c:	4c06      	ldr	r4, [pc, #24]	; (8001b38 <Gsm_RxCallBack+0x44>)
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <Gsm_RxCallBack+0x48>)
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7ff fd83 	bl	800162c <HAL_UART_Receive_IT>
	Gsm.LastTimeRecieved = HAL_GetTick();
 8001b26:	f7fe fe59 	bl	80007dc <HAL_GetTick>
 8001b2a:	f844 0c04 	str.w	r0, [r4, #-4]
 8001b2e:	bd10      	pop	{r4, pc}
 8001b30:	2000269c 	.word	0x2000269c
 8001b34:	20002630 	.word	0x20002630
 8001b38:	200026a0 	.word	0x200026a0
 8001b3c:	20002350 	.word	0x20002350

08001b40 <uart1_RxCallBack>:
{
 8001b40:	b510      	push	{r4, lr}
	RINGBUF_Put(&RxUart1RingBuff, Gsm.usart1Buff);
 8001b42:	4c06      	ldr	r4, [pc, #24]	; (8001b5c <uart1_RxCallBack+0x1c>)
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <uart1_RxCallBack+0x20>)
 8001b46:	f814 1f05 	ldrb.w	r1, [r4, #5]!
 8001b4a:	f000 fa97 	bl	800207c <RINGBUF_Put>
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8001b4e:	4621      	mov	r1, r4
}
 8001b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <uart1_RxCallBack+0x24>)
 8001b58:	f7ff bd68 	b.w	800162c <HAL_UART_Receive_IT>
 8001b5c:	2000269c 	.word	0x2000269c
 8001b60:	20002648 	.word	0x20002648
 8001b64:	20002390 	.word	0x20002390

08001b68 <Gsm_MsgGetStatus>:
	osSemaphoreRelease(myBinarySem01Handle);
	return returnVal;
}
//#########################################################################################################
bool	Gsm_MsgGetStatus(void)
{
 8001b68:	b530      	push	{r4, r5, lr}
 8001b6a:	b085      	sub	sp, #20
	uint8_t result;
	bool		returnVal=false;
		
	do
	{
		Gsm_RxClear();
 8001b6c:	f7ff ffa4 	bl	8001ab8 <Gsm_RxClear>
		sprintf((char*)Gsm.TxBuffer,"AT+CPMS?\r\n");
 8001b70:	4919      	ldr	r1, [pc, #100]	; (8001bd8 <Gsm_MsgGetStatus+0x70>)
 8001b72:	481a      	ldr	r0, [pc, #104]	; (8001bdc <Gsm_MsgGetStatus+0x74>)
 8001b74:	f002 f83f 	bl	8003bf6 <strcpy>
		if(Gsm_SendString((char*)Gsm.TxBuffer)==false)
 8001b78:	4818      	ldr	r0, [pc, #96]	; (8001bdc <Gsm_MsgGetStatus+0x74>)
 8001b7a:	f7ff feab 	bl	80018d4 <Gsm_SendString>
 8001b7e:	b918      	cbnz	r0, 8001b88 <Gsm_MsgGetStatus+0x20>
	bool		returnVal=false;
 8001b80:	2500      	movs	r5, #0
			Gsm.MsgStoredOnSim = false;
		returnVal=true;		
	}while(0);
	//osSemaphoreRelease(myBinarySem01Handle);
	return returnVal;	
}
 8001b82:	4628      	mov	r0, r5
 8001b84:	b005      	add	sp, #20
 8001b86:	bd30      	pop	{r4, r5, pc}
		if(Gsm_WaitForString(_GSM_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <Gsm_MsgGetStatus+0x78>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	f10d 010b 	add.w	r1, sp, #11
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <Gsm_MsgGetStatus+0x7c>)
 8001b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b98:	f7ff feb6 	bl	8001908 <Gsm_WaitForString>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d0ee      	beq.n	8001b80 <Gsm_MsgGetStatus+0x18>
		if(result == 2)
 8001ba2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d0ea      	beq.n	8001b80 <Gsm_MsgGetStatus+0x18>
		sscanf((char*)Gsm.RxBuffer,"AT+CPMS?\r\r\n+CPMS: \"%2s\",%d,%d,",str,(int*)&Gsm.MsgStoredUsed,(int*)&Gsm.MsgStoredCapacity);
 8001baa:	4c0f      	ldr	r4, [pc, #60]	; (8001be8 <Gsm_MsgGetStatus+0x80>)
 8001bac:	aa03      	add	r2, sp, #12
 8001bae:	1ea3      	subs	r3, r4, #2
 8001bb0:	9400      	str	r4, [sp, #0]
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <Gsm_MsgGetStatus+0x84>)
 8001bb4:	f5a4 70c7 	sub.w	r0, r4, #398	; 0x18e
 8001bb8:	f001 ffae 	bl	8003b18 <siscanf>
		if(strstr(str,"SM")!=NULL)
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <Gsm_MsgGetStatus+0x88>)
 8001bbe:	a803      	add	r0, sp, #12
 8001bc0:	f002 f821 	bl	8003c06 <strstr>
 8001bc4:	f5a4 74cb 	sub.w	r4, r4, #406	; 0x196
 8001bc8:	b118      	cbz	r0, 8001bd2 <Gsm_MsgGetStatus+0x6a>
			Gsm.MsgStoredOnSim = true;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f884 3193 	strb.w	r3, [r4, #403]	; 0x193
 8001bd0:	e7d7      	b.n	8001b82 <Gsm_MsgGetStatus+0x1a>
			Gsm.MsgStoredOnSim = false;
 8001bd2:	f884 0193 	strb.w	r0, [r4, #403]	; 0x193
 8001bd6:	e7d4      	b.n	8001b82 <Gsm_MsgGetStatus+0x1a>
 8001bd8:	080058e1 	.word	0x080058e1
 8001bdc:	200027a4 	.word	0x200027a4
 8001be0:	0800592d 	.word	0x0800592d
 8001be4:	08005a26 	.word	0x08005a26
 8001be8:	20002832 	.word	0x20002832
 8001bec:	080058ec 	.word	0x080058ec
 8001bf0:	0800590b 	.word	0x0800590b

08001bf4 <Gsm_SocketGetStatus>:

/*
 * current state of socket
 */
int Gsm_SocketGetStatus(uint8_t connectID)
{
 8001bf4:	b530      	push	{r4, r5, lr}
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001bf6:	4c27      	ldr	r4, [pc, #156]	; (8001c94 <Gsm_SocketGetStatus+0xa0>)
{
 8001bf8:	b085      	sub	sp, #20
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001bfa:	f04f 31ff 	mov.w	r1, #4294967295
{
 8001bfe:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	f000 faad 	bl	8002160 <osSemaphoreWait>
	printf("Gsm_SocketGetStatus\n\r");
 8001c06:	4824      	ldr	r0, [pc, #144]	; (8001c98 <Gsm_SocketGetStatus+0xa4>)
 8001c08:	f001 fee6 	bl	80039d8 <iprintf>
	uint8_t result;
	int state = STATE_INITIAL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9303      	str	r3, [sp, #12]
	Gsm_RxClear();
 8001c10:	f7ff ff52 	bl	8001ab8 <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QISTATE=1,%d\r\n", connectID);
 8001c14:	462a      	mov	r2, r5
 8001c16:	4921      	ldr	r1, [pc, #132]	; (8001c9c <Gsm_SocketGetStatus+0xa8>)
 8001c18:	4821      	ldr	r0, [pc, #132]	; (8001ca0 <Gsm_SocketGetStatus+0xac>)
 8001c1a:	f001 ff59 	bl	8003ad0 <siprintf>
		printf("command: %s\n\r", Gsm.TxBuffer);
 8001c1e:	4920      	ldr	r1, [pc, #128]	; (8001ca0 <Gsm_SocketGetStatus+0xac>)
 8001c20:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <Gsm_SocketGetStatus+0xb0>)
 8001c22:	f001 fed9 	bl	80039d8 <iprintf>
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001c26:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <Gsm_SocketGetStatus+0xac>)
 8001c28:	f7ff fe54 	bl	80018d4 <Gsm_SendString>
 8001c2c:	b180      	cbz	r0, 8001c50 <Gsm_SocketGetStatus+0x5c>
			break;
		if (Gsm_WaitForString(_GSM_WAIT_TIME_LOW, &result, 2, "OK", "ERROR") == false)
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <Gsm_SocketGetStatus+0xb4>)
 8001c30:	2202      	movs	r2, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f10d 010b 	add.w	r1, sp, #11
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <Gsm_SocketGetStatus+0xb8>)
 8001c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3e:	f7ff fe63 	bl	8001908 <Gsm_WaitForString>
 8001c42:	b128      	cbz	r0, 8001c50 <Gsm_SocketGetStatus+0x5c>
			break;
		if (result == 2)
 8001c44:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d10b      	bne.n	8001c64 <Gsm_SocketGetStatus+0x70>
		{
			state = STATE_ERROR;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	9303      	str	r3, [sp, #12]
		Gsm_RemoveChar((char *) Gsm.RxBuffer, ' ');
		Gsm_RemoveChar((char *) Gsm.RxBuffer, '\n');
		Gsm_ReturnInteger((int32_t*)&state, 5, ",,");
	}
	while(0);
	printf("return state: %d\n\r", state);
 8001c50:	9903      	ldr	r1, [sp, #12]
 8001c52:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <Gsm_SocketGetStatus+0xbc>)
 8001c54:	f001 fec0 	bl	80039d8 <iprintf>
	osSemaphoreRelease(myBinarySem01Handle);
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	f000 faa9 	bl	80021b0 <osSemaphoreRelease>
	return state;
}
 8001c5e:	9803      	ldr	r0, [sp, #12]
 8001c60:	b005      	add	sp, #20
 8001c62:	bd30      	pop	{r4, r5, pc}
		if (strstr((char *) Gsm.RxBuffer, "+QISTATE") == NULL)
 8001c64:	4913      	ldr	r1, [pc, #76]	; (8001cb4 <Gsm_SocketGetStatus+0xc0>)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <Gsm_SocketGetStatus+0xc4>)
 8001c68:	f001 ffcd 	bl	8003c06 <strstr>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d0ef      	beq.n	8001c50 <Gsm_SocketGetStatus+0x5c>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, '"');
 8001c70:	2122      	movs	r1, #34	; 0x22
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <Gsm_SocketGetStatus+0xc4>)
 8001c74:	f7ff ff10 	bl	8001a98 <Gsm_RemoveChar>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, ' ');
 8001c78:	2120      	movs	r1, #32
 8001c7a:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <Gsm_SocketGetStatus+0xc4>)
 8001c7c:	f7ff ff0c 	bl	8001a98 <Gsm_RemoveChar>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, '\n');
 8001c80:	210a      	movs	r1, #10
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <Gsm_SocketGetStatus+0xc4>)
 8001c84:	f7ff ff08 	bl	8001a98 <Gsm_RemoveChar>
		Gsm_ReturnInteger((int32_t*)&state, 5, ",,");
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <Gsm_SocketGetStatus+0xc8>)
 8001c8a:	2105      	movs	r1, #5
 8001c8c:	a803      	add	r0, sp, #12
 8001c8e:	f7ff fef3 	bl	8001a78 <Gsm_ReturnInteger>
 8001c92:	e7dd      	b.n	8001c50 <Gsm_SocketGetStatus+0x5c>
 8001c94:	20002644 	.word	0x20002644
 8001c98:	08005966 	.word	0x08005966
 8001c9c:	0800597c 	.word	0x0800597c
 8001ca0:	200027a4 	.word	0x200027a4
 8001ca4:	0800598e 	.word	0x0800598e
 8001ca8:	0800592d 	.word	0x0800592d
 8001cac:	08005a26 	.word	0x08005a26
 8001cb0:	080059a8 	.word	0x080059a8
 8001cb4:	0800599c 	.word	0x0800599c
 8001cb8:	200026a4 	.word	0x200026a4
 8001cbc:	080059a5 	.word	0x080059a5

08001cc0 <Gsm_SocketOpen>:

/*
 * This function open a socket tcp on server
 */
bool Gsm_SocketOpen(uint8_t connectID)
{
 8001cc0:	b530      	push	{r4, r5, lr}
	printf("Gsm_SocketOpen\n\r");
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001cc2:	4c22      	ldr	r4, [pc, #136]	; (8001d4c <Gsm_SocketOpen+0x8c>)
{
 8001cc4:	b089      	sub	sp, #36	; 0x24
 8001cc6:	4605      	mov	r5, r0
	printf("Gsm_SocketOpen\n\r");
 8001cc8:	4821      	ldr	r0, [pc, #132]	; (8001d50 <Gsm_SocketOpen+0x90>)
 8001cca:	f001 fe85 	bl	80039d8 <iprintf>
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001cce:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd2:	6820      	ldr	r0, [r4, #0]
 8001cd4:	f000 fa44 	bl	8002160 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	uint8_t result_command[15];
	do
	{
		Gsm_RxClear();
 8001cd8:	f7ff feee 	bl	8001ab8 <Gsm_RxClear>
		sprintf((char *) Gsm.TxBuffer, "AT+QIOPEN=1,%d,\"TCP\",%s,%d,0,0\r\n", connectID, HOSTNAME_TCP, PORT_TCP);
 8001cdc:	f240 735b 	movw	r3, #1883	; 0x75b
 8001ce0:	462a      	mov	r2, r5
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	491b      	ldr	r1, [pc, #108]	; (8001d54 <Gsm_SocketOpen+0x94>)
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <Gsm_SocketOpen+0x98>)
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <Gsm_SocketOpen+0x9c>)
 8001cea:	f001 fef1 	bl	8003ad0 <siprintf>
		printf("command: %s\n\r",Gsm.TxBuffer);
 8001cee:	491b      	ldr	r1, [pc, #108]	; (8001d5c <Gsm_SocketOpen+0x9c>)
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <Gsm_SocketOpen+0xa0>)
 8001cf2:	f001 fe71 	bl	80039d8 <iprintf>
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001cf6:	4819      	ldr	r0, [pc, #100]	; (8001d5c <Gsm_SocketOpen+0x9c>)
 8001cf8:	f7ff fdec 	bl	80018d4 <Gsm_SendString>
 8001cfc:	b930      	cbnz	r0, 8001d0c <Gsm_SocketOpen+0x4c>
	bool	returnVal=false;
 8001cfe:	2500      	movs	r5, #0
			if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 1, result_command) == false)
				break;
			returnVal = true;
		}
	}	while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	f000 fa55 	bl	80021b0 <osSemaphoreRelease>
	return returnVal;

}
 8001d06:	4628      	mov	r0, r5
 8001d08:	b009      	add	sp, #36	; 0x24
 8001d0a:	bd30      	pop	{r4, r5, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, "OK", "ERROR") == false)
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <Gsm_SocketOpen+0xa4>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f10d 010f 	add.w	r1, sp, #15
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <Gsm_SocketOpen+0xa8>)
 8001d18:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001d1c:	f7ff fdf4 	bl	8001908 <Gsm_WaitForString>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d0ec      	beq.n	8001cfe <Gsm_SocketOpen+0x3e>
		if (result == SECOND_PARAMETER)
 8001d24:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d0e8      	beq.n	8001cfe <Gsm_SocketOpen+0x3e>
			sprintf((char *) result_command, "+QIOPEN: %d,0", connectID);
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	490f      	ldr	r1, [pc, #60]	; (8001d6c <Gsm_SocketOpen+0xac>)
 8001d30:	a804      	add	r0, sp, #16
 8001d32:	f001 fecd 	bl	8003ad0 <siprintf>
			if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 1, result_command) == false)
 8001d36:	ab04      	add	r3, sp, #16
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f10d 010f 	add.w	r1, sp, #15
 8001d3e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001d42:	f7ff fde1 	bl	8001908 <Gsm_WaitForString>
 8001d46:	4605      	mov	r5, r0
 8001d48:	e7da      	b.n	8001d00 <Gsm_SocketOpen+0x40>
 8001d4a:	bf00      	nop
 8001d4c:	20002644 	.word	0x20002644
 8001d50:	080059bb 	.word	0x080059bb
 8001d54:	080059e0 	.word	0x080059e0
 8001d58:	080059cc 	.word	0x080059cc
 8001d5c:	200027a4 	.word	0x200027a4
 8001d60:	0800598e 	.word	0x0800598e
 8001d64:	0800592d 	.word	0x0800592d
 8001d68:	08005a26 	.word	0x08005a26
 8001d6c:	08005a01 	.word	0x08005a01

08001d70 <Gsm_SocketSendData>:
/*
 * This function will send data
 */
bool Gsm_SocketSendData(uint8_t connectID, uint8_t * buf, uint8_t len)
{
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	4616      	mov	r6, r2
 8001d74:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001d76:	4c22      	ldr	r4, [pc, #136]	; (8001e00 <Gsm_SocketSendData+0x90>)
{
 8001d78:	b085      	sub	sp, #20
 8001d7a:	460f      	mov	r7, r1
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001d7c:	6820      	ldr	r0, [r4, #0]
 8001d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d82:	f000 f9ed 	bl	8002160 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	Gsm_RxClear();
 8001d86:	f7ff fe97 	bl	8001ab8 <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QISEND=%d,%d\r\n", connectID, len);
 8001d8a:	462a      	mov	r2, r5
 8001d8c:	4633      	mov	r3, r6
 8001d8e:	491d      	ldr	r1, [pc, #116]	; (8001e04 <Gsm_SocketSendData+0x94>)
 8001d90:	481d      	ldr	r0, [pc, #116]	; (8001e08 <Gsm_SocketSendData+0x98>)
 8001d92:	f001 fe9d 	bl	8003ad0 <siprintf>
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001d96:	481c      	ldr	r0, [pc, #112]	; (8001e08 <Gsm_SocketSendData+0x98>)
 8001d98:	f7ff fd9c 	bl	80018d4 <Gsm_SendString>
 8001d9c:	4625      	mov	r5, r4
 8001d9e:	b930      	cbnz	r0, 8001dae <Gsm_SocketSendData+0x3e>
	bool	returnVal=false;
 8001da0:	2400      	movs	r4, #0
		if (result == SECOND_PARAMETER)
			break;
		returnVal = true;
	}
	while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001da2:	6828      	ldr	r0, [r5, #0]
 8001da4:	f000 fa04 	bl	80021b0 <osSemaphoreRelease>
	return returnVal;
}
 8001da8:	4620      	mov	r0, r4
 8001daa:	b005      	add	sp, #20
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, ">", "ERROR") == false)
 8001dae:	4c17      	ldr	r4, [pc, #92]	; (8001e0c <Gsm_SocketSendData+0x9c>)
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <Gsm_SocketSendData+0xa0>)
 8001db2:	9400      	str	r4, [sp, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f10d 010f 	add.w	r1, sp, #15
 8001dba:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001dbe:	f7ff fda3 	bl	8001908 <Gsm_WaitForString>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d0ec      	beq.n	8001da0 <Gsm_SocketSendData+0x30>
		if (result == SECOND_PARAMETER)
 8001dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d0e8      	beq.n	8001da0 <Gsm_SocketSendData+0x30>
		Gsm_RxClear();
 8001dce:	f7ff fe73 	bl	8001ab8 <Gsm_RxClear>
		if (Gsm_SendRaw(buf, len) == false)
 8001dd2:	4631      	mov	r1, r6
 8001dd4:	4638      	mov	r0, r7
 8001dd6:	f7ff fd63 	bl	80018a0 <Gsm_SendRaw>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d0e0      	beq.n	8001da0 <Gsm_SocketSendData+0x30>
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, "SEND OK", "ERROR") == false)
 8001dde:	9400      	str	r4, [sp, #0]
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <Gsm_SocketSendData+0xa4>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	f10d 010f 	add.w	r1, sp, #15
 8001de8:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001dec:	f7ff fd8c 	bl	8001908 <Gsm_WaitForString>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d0d5      	beq.n	8001da0 <Gsm_SocketSendData+0x30>
		if (result == SECOND_PARAMETER)
 8001df4:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8001df8:	3c02      	subs	r4, #2
 8001dfa:	bf18      	it	ne
 8001dfc:	2401      	movne	r4, #1
 8001dfe:	e7d0      	b.n	8001da2 <Gsm_SocketSendData+0x32>
 8001e00:	20002644 	.word	0x20002644
 8001e04:	08005a0f 	.word	0x08005a0f
 8001e08:	200027a4 	.word	0x200027a4
 8001e0c:	0800592d 	.word	0x0800592d
 8001e10:	0800591d 	.word	0x0800591d
 8001e14:	08005a21 	.word	0x08005a21

08001e18 <Gsm_SocketClose>:

/*
 * This function close a socket connection with given connectID
 */
bool Gsm_SocketClose(uint8_t connectID)
{
 8001e18:	b530      	push	{r4, r5, lr}
 8001e1a:	4605      	mov	r5, r0
	printf("Gsm_SocketClose\n\r");
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001e1c:	4c19      	ldr	r4, [pc, #100]	; (8001e84 <Gsm_SocketClose+0x6c>)
{
 8001e1e:	b085      	sub	sp, #20
	printf("Gsm_SocketClose\n\r");
 8001e20:	4819      	ldr	r0, [pc, #100]	; (8001e88 <Gsm_SocketClose+0x70>)
 8001e22:	f001 fdd9 	bl	80039d8 <iprintf>
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001e26:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	f000 f998 	bl	8002160 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	Gsm_RxClear();
 8001e30:	f7ff fe42 	bl	8001ab8 <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QICLOSE=%d\r\n", connectID);
 8001e34:	462a      	mov	r2, r5
 8001e36:	4915      	ldr	r1, [pc, #84]	; (8001e8c <Gsm_SocketClose+0x74>)
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <Gsm_SocketClose+0x78>)
 8001e3a:	f001 fe49 	bl	8003ad0 <siprintf>
		printf("command: %s", Gsm.TxBuffer);
 8001e3e:	4914      	ldr	r1, [pc, #80]	; (8001e90 <Gsm_SocketClose+0x78>)
 8001e40:	4814      	ldr	r0, [pc, #80]	; (8001e94 <Gsm_SocketClose+0x7c>)
 8001e42:	f001 fdc9 	bl	80039d8 <iprintf>
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <Gsm_SocketClose+0x78>)
 8001e48:	f7ff fd44 	bl	80018d4 <Gsm_SendString>
 8001e4c:	4625      	mov	r5, r4
 8001e4e:	b930      	cbnz	r0, 8001e5e <Gsm_SocketClose+0x46>
	bool	returnVal=false;
 8001e50:	2400      	movs	r4, #0
			break;
		if (result == SECOND_PARAMETER)
			break;
		returnVal = true;
	} while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001e52:	6828      	ldr	r0, [r5, #0]
 8001e54:	f000 f9ac 	bl	80021b0 <osSemaphoreRelease>
	return returnVal;
}
 8001e58:	4620      	mov	r0, r4
 8001e5a:	b005      	add	sp, #20
 8001e5c:	bd30      	pop	{r4, r5, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, "OK", "ERROR") == false)
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <Gsm_SocketClose+0x80>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f10d 010f 	add.w	r1, sp, #15
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <Gsm_SocketClose+0x84>)
 8001e6a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001e6e:	f7ff fd4b 	bl	8001908 <Gsm_WaitForString>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d0ec      	beq.n	8001e50 <Gsm_SocketClose+0x38>
		if (result == SECOND_PARAMETER)
 8001e76:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8001e7a:	3c02      	subs	r4, #2
 8001e7c:	bf18      	it	ne
 8001e7e:	2401      	movne	r4, #1
 8001e80:	e7e7      	b.n	8001e52 <Gsm_SocketClose+0x3a>
 8001e82:	bf00      	nop
 8001e84:	20002644 	.word	0x20002644
 8001e88:	08005938 	.word	0x08005938
 8001e8c:	0800594a 	.word	0x0800594a
 8001e90:	200027a4 	.word	0x200027a4
 8001e94:	0800595a 	.word	0x0800595a
 8001e98:	0800592d 	.word	0x0800592d
 8001e9c:	08005a26 	.word	0x08005a26

08001ea0 <Gsm_MqttConnect>:
/*
 * This function send a CONNECT MQTT packet to  a socket with given connectID
 */
bool Gsm_MqttConnect(uint8_t connectID, MQTTPacket_connectData *data)
{
 8001ea0:	b530      	push	{r4, r5, lr}
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	b0b3      	sub	sp, #204	; 0xcc
	printf("Gsm_MqttConnect\n\r");
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <Gsm_MqttConnect+0x38>)
{
 8001ea8:	460d      	mov	r5, r1
	printf("Gsm_MqttConnect\n\r");
 8001eaa:	f001 fd95 	bl	80039d8 <iprintf>
	uint8_t buf[200];
	uint8_t buflen = sizeof(buf);
	uint8_t result;
	uint8_t len;
	result = Gsm_SocketGetStatus(connectID);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff fea0 	bl	8001bf4 <Gsm_SocketGetStatus>
	if(result != STATE_CONNECTED)
 8001eb4:	b2c0      	uxtb	r0, r0
 8001eb6:	2802      	cmp	r0, #2
 8001eb8:	d002      	beq.n	8001ec0 <Gsm_MqttConnect+0x20>
		Gsm_SocketOpen(connectID);
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7ff ff00 	bl	8001cc0 <Gsm_SocketOpen>
	/*generate connect packet*/
	len = MQTTSerialize_connect(buf, buflen, data);
 8001ec0:	462a      	mov	r2, r5
 8001ec2:	21c8      	movs	r1, #200	; 0xc8
 8001ec4:	4668      	mov	r0, sp
 8001ec6:	f001 fbc5 	bl	8003654 <MQTTSerialize_connect>
	/*send data*/
	result = Gsm_SocketSendData(connectID, buf, len);
 8001eca:	4669      	mov	r1, sp
 8001ecc:	b2c2      	uxtb	r2, r0
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ff4e 	bl	8001d70 <Gsm_SocketSendData>
	return result;
}
 8001ed4:	b033      	add	sp, #204	; 0xcc
 8001ed6:	bd30      	pop	{r4, r5, pc}
 8001ed8:	080058a9 	.word	0x080058a9

08001edc <Gsm_MqttPublish>:
/*
 * This function send a publish packet to  a socket with given connectID
 */
bool Gsm_MqttPublish(uint8_t connectID,char * payload, MQTTPacket_connectData *data,MQTTString topicString)
{
 8001edc:	b082      	sub	sp, #8
 8001ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee0:	460d      	mov	r5, r1
 8001ee2:	b0bb      	sub	sp, #236	; 0xec
 8001ee4:	4604      	mov	r4, r0
	printf("Gsm_MqttPublish\n\r");
 8001ee6:	4817      	ldr	r0, [pc, #92]	; (8001f44 <Gsm_MqttPublish+0x68>)
{
 8001ee8:	4617      	mov	r7, r2
 8001eea:	9341      	str	r3, [sp, #260]	; 0x104
	printf("Gsm_MqttPublish\n\r");
 8001eec:	f001 fd74 	bl	80039d8 <iprintf>
	int payloadlen = strlen(payload);
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f7fe f92d 	bl	8000150 <strlen>
 8001ef6:	4606      	mov	r6, r0
	uint8_t buf[200];
	uint8_t buflen = sizeof(buf);
	uint8_t result;
	uint8_t len;
	result = Gsm_SocketGetStatus(connectID);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff fe7b 	bl	8001bf4 <Gsm_SocketGetStatus>
	if(result != STATE_CONNECTED)
 8001efe:	b2c0      	uxtb	r0, r0
 8001f00:	2802      	cmp	r0, #2
 8001f02:	d006      	beq.n	8001f12 <Gsm_MqttPublish+0x36>
	{
		Gsm_SocketOpen(connectID);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fedb 	bl	8001cc0 <Gsm_SocketOpen>
		Gsm_MqttConnect(connectID, data);
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ffc7 	bl	8001ea0 <Gsm_MqttConnect>
	}
	/*generate connect packet*/
	len = MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char *) payload, payloadlen);
 8001f12:	9606      	str	r6, [sp, #24]
 8001f14:	9505      	str	r5, [sp, #20]
 8001f16:	ab02      	add	r3, sp, #8
 8001f18:	aa41      	add	r2, sp, #260	; 0x104
 8001f1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f20:	2300      	movs	r3, #0
 8001f22:	21c8      	movs	r1, #200	; 0xc8
 8001f24:	461a      	mov	r2, r3
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	a808      	add	r0, sp, #32
 8001f2c:	f001 fcc9 	bl	80038c2 <MQTTSerialize_publish>
	/*send data*/
	result = Gsm_SocketSendData(connectID, buf, len);
 8001f30:	a908      	add	r1, sp, #32
 8001f32:	b2c2      	uxtb	r2, r0
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff1b 	bl	8001d70 <Gsm_SocketSendData>
	return result;
}
 8001f3a:	b03b      	add	sp, #236	; 0xec
 8001f3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001f40:	b002      	add	sp, #8
 8001f42:	4770      	bx	lr
 8001f44:	080058cf 	.word	0x080058cf

08001f48 <Gsm_MqttDisconnect>:
}
/*
 * This function send a DISCONNECT MQTT packet to  a socket with given connectID
 */
bool Gsm_MqttDisconnect(uint8_t connectID)
{
 8001f48:	b510      	push	{r4, lr}
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	b0b2      	sub	sp, #200	; 0xc8
	printf("Gsm_MqttDisconnect\r\n");
 8001f4e:	480b      	ldr	r0, [pc, #44]	; (8001f7c <Gsm_MqttDisconnect+0x34>)
 8001f50:	f001 fdb6 	bl	8003ac0 <puts>
	uint8_t buf[200];
	uint8_t buflen = sizeof(buf);
	uint8_t result;
	uint8_t len;
	result = Gsm_SocketGetStatus(connectID);
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff fe4d 	bl	8001bf4 <Gsm_SocketGetStatus>
	if(result == STATE_CONNECTED)
 8001f5a:	b2c0      	uxtb	r0, r0
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d10a      	bne.n	8001f76 <Gsm_MqttDisconnect+0x2e>
	{
		/*generate Disconnect packet*/
		len = MQTTSerialize_disconnect(buf, buflen);
 8001f60:	21c8      	movs	r1, #200	; 0xc8
 8001f62:	4668      	mov	r0, sp
 8001f64:	f001 fc13 	bl	800378e <MQTTSerialize_disconnect>
		/*send data*/
		result = Gsm_SocketSendData(connectID, buf, len);
 8001f68:	4669      	mov	r1, sp
 8001f6a:	b2c2      	uxtb	r2, r0
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff feff 	bl	8001d70 <Gsm_SocketSendData>
		return result;
	}
	return true;
}
 8001f72:	b032      	add	sp, #200	; 0xc8
 8001f74:	bd10      	pop	{r4, pc}
	return true;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e7fb      	b.n	8001f72 <Gsm_MqttDisconnect+0x2a>
 8001f7a:	bf00      	nop
 8001f7c:	080058bb 	.word	0x080058bb

08001f80 <GsmTask>:
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001f82:	2201      	movs	r2, #1
{
 8001f84:	b09c      	sub	sp, #112	; 0x70
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001f86:	492c      	ldr	r1, [pc, #176]	; (8002038 <GsmTask+0xb8>)
 8001f88:	482c      	ldr	r0, [pc, #176]	; (800203c <GsmTask+0xbc>)
 8001f8a:	f7ff fb4f 	bl	800162c <HAL_UART_Receive_IT>
	Gsm_RxClear();
 8001f8e:	f7ff fd93 	bl	8001ab8 <Gsm_RxClear>
	Gsm_TxClear();
 8001f92:	f7ff fda7 	bl	8001ae4 <Gsm_TxClear>
	printf("GsmTask run \r\n");
 8001f96:	482a      	ldr	r0, [pc, #168]	; (8002040 <GsmTask+0xc0>)
 8001f98:	f001 fd92 	bl	8003ac0 <puts>
	osDelay(2000);
 8001f9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fa0:	f000 f8c2 	bl	8002128 <osDelay>
	Gsm_InitValue();
 8001fa4:	f7ff fd4a 	bl	8001a3c <Gsm_InitValue>
	osDelay(1000);
 8001fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fac:	f000 f8bc 	bl	8002128 <osDelay>
	printf("gsm task is running\r\n");
 8001fb0:	4824      	ldr	r0, [pc, #144]	; (8002044 <GsmTask+0xc4>)
 8001fb2:	f001 fd85 	bl	8003ac0 <puts>
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4923      	ldr	r1, [pc, #140]	; (8002048 <GsmTask+0xc8>)
 8001fba:	4824      	ldr	r0, [pc, #144]	; (800204c <GsmTask+0xcc>)
 8001fbc:	f7ff fb36 	bl	800162c <HAL_UART_Receive_IT>
	MQTTString topicString = MQTTString_initializer;
 8001fc0:	2300      	movs	r3, #0
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8001fc2:	2258      	movs	r2, #88	; 0x58
 8001fc4:	4922      	ldr	r1, [pc, #136]	; (8002050 <GsmTask+0xd0>)
 8001fc6:	a806      	add	r0, sp, #24
	MQTTString topicString = MQTTString_initializer;
 8001fc8:	9304      	str	r3, [sp, #16]
 8001fca:	9305      	str	r3, [sp, #20]
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8001fcc:	f001 fcf0 	bl	80039b0 <memcpy>
	data.clientID.cstring = "lampl";
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <GsmTask+0xd4>)
					Gsm_MqttPublish(CONNECT_ID,payload, &data, topicString);
 8001fd2:	4e21      	ldr	r6, [pc, #132]	; (8002058 <GsmTask+0xd8>)
	data.clientID.cstring = "lampl";
 8001fd4:	9309      	str	r3, [sp, #36]	; 0x24
	topicString.cstring = "vpt";
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <GsmTask+0xdc>)
					Gsm_MqttPublish(CONNECT_ID,payload, &data, topicString);
 8001fd8:	ad04      	add	r5, sp, #16
	topicString.cstring = "vpt";
 8001fda:	9303      	str	r3, [sp, #12]
	uint8_t first_time = true;
 8001fdc:	2301      	movs	r3, #1
		if(first_time == true)
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0fd      	beq.n	8001fde <GsmTask+0x5e>
				Gsm_MsgGetStatus();
 8001fe2:	f7ff fdc1 	bl	8001b68 <Gsm_MsgGetStatus>
					GsmResult = Gsm_SocketGetStatus(CONNECT_ID);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fe04 	bl	8001bf4 <Gsm_SocketGetStatus>
 8001fec:	b2c0      	uxtb	r0, r0
					if (GsmResult == STATE_CONNECTED)
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d116      	bne.n	8002020 <GsmTask+0xa0>
					if(Gsm_MqttConnect(CONNECT_ID, &data) == true)
 8001ff2:	a906      	add	r1, sp, #24
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff ff53 	bl	8001ea0 <Gsm_MqttConnect>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	b9c8      	cbnz	r0, 8002032 <GsmTask+0xb2>
					Gsm_MqttPublish(CONNECT_ID,payload, &data, topicString);
 8001ffe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002002:	9b03      	ldr	r3, [sp, #12]
 8002004:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002008:	aa06      	add	r2, sp, #24
 800200a:	4631      	mov	r1, r6
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff ff65 	bl	8001edc <Gsm_MqttPublish>
					Gsm_MqttDisconnect(CONNECT_ID);
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff ff98 	bl	8001f48 <Gsm_MqttDisconnect>
					Gsm_SocketClose(CONNECT_ID);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fefd 	bl	8001e18 <Gsm_SocketClose>
 800201e:	e008      	b.n	8002032 <GsmTask+0xb2>
					if (GsmResult != STATE_INITIAL)
 8002020:	b110      	cbz	r0, 8002028 <GsmTask+0xa8>
						Gsm_SocketClose(CONNECT_ID);
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff fef8 	bl	8001e18 <Gsm_SocketClose>
					if(Gsm_SocketOpen(CONNECT_ID) == false)
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fe49 	bl	8001cc0 <Gsm_SocketOpen>
 800202e:	2800      	cmp	r0, #0
 8002030:	d1df      	bne.n	8001ff2 <GsmTask+0x72>
 8002032:	2300      	movs	r3, #0
 8002034:	e7d3      	b.n	8001fde <GsmTask+0x5e>
 8002036:	bf00      	nop
 8002038:	200026a0 	.word	0x200026a0
 800203c:	20002350 	.word	0x20002350
 8002040:	0800584c 	.word	0x0800584c
 8002044:	0800585a 	.word	0x0800585a
 8002048:	200026a1 	.word	0x200026a1
 800204c:	20002390 	.word	0x20002390
 8002050:	08005784 	.word	0x08005784
 8002054:	0800586f 	.word	0x0800586f
 8002058:	08005879 	.word	0x08005879
 800205c:	08005875 	.word	0x08005875

08002060 <RINGBUF_Init>:
* \param size size of buf
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Init(RINGBUF *r, uint8_t* buf, uint32_t size)
{
	if(r == NULL || buf == NULL || size < 2) return -1;
 8002060:	b148      	cbz	r0, 8002076 <RINGBUF_Init+0x16>
 8002062:	b141      	cbz	r1, 8002076 <RINGBUF_Init+0x16>
 8002064:	2a01      	cmp	r2, #1
 8002066:	d906      	bls.n	8002076 <RINGBUF_Init+0x16>

	r->pt = buf;
	r->head = 0;
 8002068:	2300      	movs	r3, #0
	r->pt = buf;
 800206a:	60c1      	str	r1, [r0, #12]
	r->head = 0;
 800206c:	6003      	str	r3, [r0, #0]
	r->tail = 0;
 800206e:	6043      	str	r3, [r0, #4]
	r->size = size;
 8002070:	6082      	str	r2, [r0, #8]

	return 0;
 8002072:	4618      	mov	r0, r3
 8002074:	4770      	bx	lr
	if(r == NULL || buf == NULL || size < 2) return -1;
 8002076:	f04f 30ff 	mov.w	r0, #4294967295
}
 800207a:	4770      	bx	lr

0800207c <RINGBUF_Put>:
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Put(RINGBUF *r, uint8_t c)
{
	uint32_t temp;
	temp = r->head;
 800207c:	6803      	ldr	r3, [r0, #0]
	temp++;
	if(temp >= r->size)
 800207e:	6882      	ldr	r2, [r0, #8]
	temp++;
 8002080:	3301      	adds	r3, #1
	{
		temp = 0;
 8002082:	4293      	cmp	r3, r2
 8002084:	bf28      	it	cs
 8002086:	2300      	movcs	r3, #0
	}
	if(temp == r->tail)
 8002088:	6842      	ldr	r2, [r0, #4]
{
 800208a:	b510      	push	{r4, lr}
	if(temp == r->tail)
 800208c:	4293      	cmp	r3, r2
	{
	 	return -1;		// ring buffer is full
	}

	r->pt[r->head] = c;
 800208e:	bf1f      	itttt	ne
 8002090:	6802      	ldrne	r2, [r0, #0]
 8002092:	68c4      	ldrne	r4, [r0, #12]
 8002094:	54a1      	strbne	r1, [r4, r2]
	r->head = temp;
 8002096:	6003      	strne	r3, [r0, #0]

	return 0;
 8002098:	bf14      	ite	ne
 800209a:	2000      	movne	r0, #0
	 	return -1;		// ring buffer is full
 800209c:	f04f 30ff 	moveq.w	r0, #4294967295
}
 80020a0:	bd10      	pop	{r4, pc}

080020a2 <RINGBUF_Get>:
* \param c read character
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Get(RINGBUF *r, uint8_t* c)
{
	if(r->tail == r->head)
 80020a2:	6842      	ldr	r2, [r0, #4]
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d00f      	beq.n	80020ca <RINGBUF_Get+0x28>
	{
		return -1;				// ring buffer is empty, this should be atomic operation
	}
	*c = r->pt[r->tail];
 80020aa:	6843      	ldr	r3, [r0, #4]
 80020ac:	68c2      	ldr	r2, [r0, #12]
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	700b      	strb	r3, [r1, #0]
	r->tail++;
 80020b2:	6843      	ldr	r3, [r0, #4]
 80020b4:	3301      	adds	r3, #1
 80020b6:	6043      	str	r3, [r0, #4]
	if(r->tail >= r->size)
 80020b8:	6842      	ldr	r2, [r0, #4]
 80020ba:	6883      	ldr	r3, [r0, #8]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	d300      	bcc.n	80020c6 <RINGBUF_Get+0x24>
	{
		r->tail = 0;
 80020c4:	6043      	str	r3, [r0, #4]
	}
	return 0;
 80020c6:	4618      	mov	r0, r3
}
 80020c8:	4770      	bx	lr
		return -1;				// ring buffer is empty, this should be atomic operation
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
 80020ce:	4770      	bx	lr

080020d0 <RINGBUF_GetFill>:

int32_t RINGBUF_GetFill(RINGBUF *r)
{
   if(r->head >= r->tail)
 80020d0:	6802      	ldr	r2, [r0, #0]
 80020d2:	6843      	ldr	r3, [r0, #4]
 80020d4:	429a      	cmp	r2, r3
	{
		return (r->head - r->tail);
 80020d6:	bf25      	ittet	cs
 80020d8:	6803      	ldrcs	r3, [r0, #0]
 80020da:	6840      	ldrcs	r0, [r0, #4]
	}
	else
	{
	   return( r->size - r->tail + r->head);
 80020dc:	6883      	ldrcc	r3, [r0, #8]
		return (r->head - r->tail);
 80020de:	1a18      	subcs	r0, r3, r0
	   return( r->size - r->tail + r->head);
 80020e0:	bf3f      	itttt	cc
 80020e2:	6842      	ldrcc	r2, [r0, #4]
 80020e4:	6800      	ldrcc	r0, [r0, #0]
 80020e6:	18c0      	addcc	r0, r0, r3
 80020e8:	1a80      	subcc	r0, r0, r2
	}
}
 80020ea:	4770      	bx	lr

080020ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020ec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80020ee:	f000 ff2d 	bl	8002f4c <vTaskStartScheduler>
  
  return osOK;
}
 80020f2:	2000      	movs	r0, #0
 80020f4:	bd08      	pop	{r3, pc}

080020f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020f6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80020fc:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80020fe:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002100:	bf08      	it	eq
 8002102:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002104:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8002106:	bf18      	it	ne
 8002108:	3403      	addne	r4, #3
{
 800210a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800210c:	e890 0022 	ldmia.w	r0, {r1, r5}
 8002110:	a803      	add	r0, sp, #12
 8002112:	9001      	str	r0, [sp, #4]
 8002114:	9400      	str	r4, [sp, #0]
 8002116:	4628      	mov	r0, r5
 8002118:	f000 fe48 	bl	8002dac <xTaskCreate>
 800211c:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800211e:	bf14      	ite	ne
 8002120:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8002122:	9803      	ldreq	r0, [sp, #12]
}
 8002124:	b005      	add	sp, #20
 8002126:	bd30      	pop	{r4, r5, pc}

08002128 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002128:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800212a:	2800      	cmp	r0, #0
 800212c:	bf08      	it	eq
 800212e:	2001      	moveq	r0, #1
 8002130:	f001 f85a 	bl	80031e8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002134:	2000      	movs	r0, #0
 8002136:	bd08      	pop	{r3, pc}

08002138 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002138:	2901      	cmp	r1, #1
{ 
 800213a:	b510      	push	{r4, lr}
 800213c:	4608      	mov	r0, r1
  if (count == 1) {
 800213e:	d10c      	bne.n	800215a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002140:	2203      	movs	r2, #3
 8002142:	2100      	movs	r1, #0
 8002144:	f000 fb90 	bl	8002868 <xQueueGenericCreate>
 8002148:	4604      	mov	r4, r0
 800214a:	b120      	cbz	r0, 8002156 <osSemaphoreCreate+0x1e>
 800214c:	2300      	movs	r3, #0
 800214e:	461a      	mov	r2, r3
 8002150:	4619      	mov	r1, r3
 8002152:	f000 fbab 	bl	80028ac <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002156:	4620      	mov	r0, r4
 8002158:	bd10      	pop	{r4, pc}
    return NULL;
 800215a:	2400      	movs	r4, #0
 800215c:	e7fb      	b.n	8002156 <osSemaphoreCreate+0x1e>
	...

08002160 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002160:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002162:	2400      	movs	r4, #0
{
 8002164:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 8002166:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002168:	b1e8      	cbz	r0, 80021a6 <osSemaphoreWait+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800216a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800216e:	b1a3      	cbz	r3, 800219a <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002170:	aa01      	add	r2, sp, #4
 8002172:	4621      	mov	r1, r4
 8002174:	f000 fd68 	bl	8002c48 <xQueueReceiveFromISR>
 8002178:	2801      	cmp	r0, #1
 800217a:	d002      	beq.n	8002182 <osSemaphoreWait+0x22>
      return osErrorOS;
 800217c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800217e:	b002      	add	sp, #8
 8002180:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	b13b      	cbz	r3, 8002196 <osSemaphoreWait+0x36>
 8002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <osSemaphoreWait+0x4c>)
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	f3bf 8f6f 	isb	sy
  return osOK;
 8002196:	2000      	movs	r0, #0
 8002198:	e7f1      	b.n	800217e <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800219a:	4619      	mov	r1, r3
 800219c:	f000 fc90 	bl	8002ac0 <xQueueGenericReceive>
 80021a0:	2801      	cmp	r0, #1
 80021a2:	d1eb      	bne.n	800217c <osSemaphoreWait+0x1c>
 80021a4:	e7f7      	b.n	8002196 <osSemaphoreWait+0x36>
    return osErrorParameter;
 80021a6:	2080      	movs	r0, #128	; 0x80
 80021a8:	e7e9      	b.n	800217e <osSemaphoreWait+0x1e>
 80021aa:	bf00      	nop
 80021ac:	e000ed04 	.word	0xe000ed04

080021b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80021b0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80021b2:	2400      	movs	r4, #0
 80021b4:	9401      	str	r4, [sp, #4]
 80021b6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 80021ba:	b193      	cbz	r3, 80021e2 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021bc:	a901      	add	r1, sp, #4
 80021be:	f000 fc2b 	bl	8002a18 <xQueueGiveFromISR>
 80021c2:	2801      	cmp	r0, #1
 80021c4:	d113      	bne.n	80021ee <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	b913      	cbnz	r3, 80021d0 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 80021ca:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 80021cc:	b002      	add	sp, #8
 80021ce:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80021d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <osSemaphoreRelease+0x44>)
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	e7f3      	b.n	80021ca <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80021e2:	461a      	mov	r2, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	f000 fb61 	bl	80028ac <xQueueGenericSend>
 80021ea:	2801      	cmp	r0, #1
 80021ec:	d0ed      	beq.n	80021ca <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 80021ee:	20ff      	movs	r0, #255	; 0xff
 80021f0:	e7ec      	b.n	80021cc <osSemaphoreRelease+0x1c>
 80021f2:	bf00      	nop
 80021f4:	e000ed04 	.word	0xe000ed04

080021f8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80021f8:	2200      	movs	r2, #0
 80021fa:	c803      	ldmia	r0, {r0, r1}
 80021fc:	f000 bb34 	b.w	8002868 <xQueueGenericCreate>

08002200 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002200:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <prvInsertBlockIntoFreeList+0x40>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4282      	cmp	r2, r0
 8002208:	d318      	bcc.n	800223c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800220a:	685c      	ldr	r4, [r3, #4]
 800220c:	1919      	adds	r1, r3, r4
 800220e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002210:	bf01      	itttt	eq
 8002212:	6841      	ldreq	r1, [r0, #4]
 8002214:	4618      	moveq	r0, r3
 8002216:	1909      	addeq	r1, r1, r4
 8002218:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800221a:	6844      	ldr	r4, [r0, #4]
 800221c:	1901      	adds	r1, r0, r4
 800221e:	428a      	cmp	r2, r1
 8002220:	d107      	bne.n	8002232 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <prvInsertBlockIntoFreeList+0x44>)
 8002224:	6809      	ldr	r1, [r1, #0]
 8002226:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002228:	bf1f      	itttt	ne
 800222a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800222c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800222e:	1909      	addne	r1, r1, r4
 8002230:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002232:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002234:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002236:	bf18      	it	ne
 8002238:	6018      	strne	r0, [r3, #0]
 800223a:	bd10      	pop	{r4, pc}
 800223c:	4613      	mov	r3, r2
 800223e:	e7e1      	b.n	8002204 <prvInsertBlockIntoFreeList+0x4>
 8002240:	2000220c 	.word	0x2000220c
 8002244:	200001fc 	.word	0x200001fc

08002248 <pvPortMalloc>:
{
 8002248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800224c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800224e:	f000 feb9 	bl	8002fc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002252:	493e      	ldr	r1, [pc, #248]	; (800234c <pvPortMalloc+0x104>)
 8002254:	4d3e      	ldr	r5, [pc, #248]	; (8002350 <pvPortMalloc+0x108>)
 8002256:	680b      	ldr	r3, [r1, #0]
 8002258:	bb0b      	cbnz	r3, 800229e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800225a:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800225c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800225e:	bf1d      	ittte	ne
 8002260:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002262:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002266:	f502 5300 	addne.w	r3, r2, #8192	; 0x2000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800226a:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800226e:	bf1c      	itt	ne
 8002270:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002272:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8002274:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002276:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002278:	4e37      	ldr	r6, [pc, #220]	; (8002358 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800227a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800227c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002280:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002282:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002284:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002286:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002288:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800228a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800228c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002290:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002292:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <pvPortMalloc+0x118>)
 8002296:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800229c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800229e:	682f      	ldr	r7, [r5, #0]
 80022a0:	4227      	tst	r7, r4
 80022a2:	d116      	bne.n	80022d2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d040      	beq.n	800232a <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80022a8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022ac:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80022ae:	bf1c      	itt	ne
 80022b0:	f023 0307 	bicne.w	r3, r3, #7
 80022b4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022b6:	b163      	cbz	r3, 80022d2 <pvPortMalloc+0x8a>
 80022b8:	4a29      	ldr	r2, [pc, #164]	; (8002360 <pvPortMalloc+0x118>)
 80022ba:	6816      	ldr	r6, [r2, #0]
 80022bc:	4690      	mov	r8, r2
 80022be:	42b3      	cmp	r3, r6
 80022c0:	d807      	bhi.n	80022d2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <pvPortMalloc+0x110>)
 80022c4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022c6:	6868      	ldr	r0, [r5, #4]
 80022c8:	4283      	cmp	r3, r0
 80022ca:	d804      	bhi.n	80022d6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80022cc:	6809      	ldr	r1, [r1, #0]
 80022ce:	428d      	cmp	r5, r1
 80022d0:	d107      	bne.n	80022e2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80022d2:	2400      	movs	r4, #0
 80022d4:	e029      	b.n	800232a <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022d6:	682c      	ldr	r4, [r5, #0]
 80022d8:	2c00      	cmp	r4, #0
 80022da:	d0f7      	beq.n	80022cc <pvPortMalloc+0x84>
 80022dc:	462a      	mov	r2, r5
 80022de:	4625      	mov	r5, r4
 80022e0:	e7f1      	b.n	80022c6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022e2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022e4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022e6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022e8:	1ac2      	subs	r2, r0, r3
 80022ea:	2a10      	cmp	r2, #16
 80022ec:	d90f      	bls.n	800230e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022ee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022f0:	0741      	lsls	r1, r0, #29
 80022f2:	d008      	beq.n	8002306 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	e7fe      	b.n	8002304 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002306:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002308:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800230a:	f7ff ff79 	bl	8002200 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800230e:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002312:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002314:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8002316:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002318:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800231a:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800231e:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002320:	bf38      	it	cc
 8002322:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002324:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002326:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002328:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800232a:	f000 fee5 	bl	80030f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800232e:	0763      	lsls	r3, r4, #29
 8002330:	d008      	beq.n	8002344 <pvPortMalloc+0xfc>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	e7fe      	b.n	8002342 <pvPortMalloc+0xfa>
}
 8002344:	4620      	mov	r0, r4
 8002346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234a:	bf00      	nop
 800234c:	200001fc 	.word	0x200001fc
 8002350:	20002200 	.word	0x20002200
 8002354:	20000200 	.word	0x20000200
 8002358:	2000220c 	.word	0x2000220c
 800235c:	20002208 	.word	0x20002208
 8002360:	20002204 	.word	0x20002204

08002364 <vPortFree>:
{
 8002364:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002366:	4604      	mov	r4, r0
 8002368:	b370      	cbz	r0, 80023c8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <vPortFree+0x68>)
 800236c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4213      	tst	r3, r2
 8002374:	d108      	bne.n	8002388 <vPortFree+0x24>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	e7fe      	b.n	8002386 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002388:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800238c:	b141      	cbz	r1, 80023a0 <vPortFree+0x3c>
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	e7fe      	b.n	800239e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023a0:	ea23 0302 	bic.w	r3, r3, r2
 80023a4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80023a8:	f000 fe0c 	bl	8002fc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023ac:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <vPortFree+0x6c>)
 80023ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80023b2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023b4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023b8:	440b      	add	r3, r1
 80023ba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023bc:	f7ff ff20 	bl	8002200 <prvInsertBlockIntoFreeList>
}
 80023c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80023c4:	f000 be98 	b.w	80030f8 <xTaskResumeAll>
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	20002200 	.word	0x20002200
 80023d0:	20002204 	.word	0x20002204

080023d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	f100 0308 	add.w	r3, r0, #8
 80023d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023da:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023de:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023e2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023e4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023e6:	6003      	str	r3, [r0, #0]
 80023e8:	4770      	bx	lr

080023ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	6103      	str	r3, [r0, #16]
 80023ee:	4770      	bx	lr

080023f0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023f2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80023f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80023fe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002400:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002402:	3301      	adds	r3, #1
 8002404:	6003      	str	r3, [r0, #0]
 8002406:	4770      	bx	lr

08002408 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002408:	680a      	ldr	r2, [r1, #0]
{
 800240a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800240c:	1c53      	adds	r3, r2, #1
 800240e:	d10a      	bne.n	8002426 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002410:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002416:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002418:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800241a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800241c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800241e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002420:	3301      	adds	r3, #1
 8002422:	6003      	str	r3, [r0, #0]
 8002424:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002426:	f100 0308 	add.w	r3, r0, #8
 800242a:	685c      	ldr	r4, [r3, #4]
 800242c:	6825      	ldr	r5, [r4, #0]
 800242e:	42aa      	cmp	r2, r5
 8002430:	d3ef      	bcc.n	8002412 <vListInsert+0xa>
 8002432:	4623      	mov	r3, r4
 8002434:	e7f9      	b.n	800242a <vListInsert+0x22>

08002436 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002436:	6841      	ldr	r1, [r0, #4]
 8002438:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800243a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800243c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800243e:	6882      	ldr	r2, [r0, #8]
 8002440:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002446:	bf08      	it	eq
 8002448:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800244a:	2200      	movs	r2, #0
 800244c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	3801      	subs	r0, #1
 8002452:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002454:	4770      	bx	lr
	...

08002458 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <prvTaskExitError+0x2c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	d008      	beq.n	8002472 <prvTaskExitError+0x1a>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	e7fe      	b.n	8002470 <prvTaskExitError+0x18>
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	e7fe      	b.n	8002482 <prvTaskExitError+0x2a>
 8002484:	20000008 	.word	0x20000008

08002488 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <prvPortStartFirstTask+0x1c>)
 800248a:	6800      	ldr	r0, [r0, #0]
 800248c:	6800      	ldr	r0, [r0, #0]
 800248e:	f380 8808 	msr	MSP, r0
 8002492:	b662      	cpsie	i
 8002494:	b661      	cpsie	f
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	df00      	svc	0
 80024a0:	bf00      	nop
 80024a2:	0000      	.short	0x0000
 80024a4:	e000ed08 	.word	0xe000ed08

080024a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80024a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80024b2:	f021 0101 	bic.w	r1, r1, #1
 80024b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024be:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80024c2:	3840      	subs	r0, #64	; 0x40
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	08002459 	.word	0x08002459
 80024cc:	00000000 	.word	0x00000000

080024d0 <SVC_Handler>:
	__asm volatile (
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <pxCurrentTCBConst2>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	6808      	ldr	r0, [r1, #0]
 80024d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024da:	f380 8809 	msr	PSP, r0
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f380 8811 	msr	BASEPRI, r0
 80024ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80024ee:	4770      	bx	lr

080024f0 <pxCurrentTCBConst2>:
 80024f0:	2000221c 	.word	0x2000221c

080024f4 <vPortEnterCritical>:
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <vPortEnterCritical+0x3c>)
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800250a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800250c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800250e:	d10d      	bne.n	800252c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <vPortEnterCritical+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002518:	d008      	beq.n	800252c <vPortEnterCritical+0x38>
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	e7fe      	b.n	800252a <vPortEnterCritical+0x36>
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <vPortExitCritical+0x24>)
 800253a:	6813      	ldr	r3, [r2, #0]
 800253c:	b943      	cbnz	r3, 8002550 <vPortExitCritical+0x18>
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	e7fe      	b.n	800254e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002550:	3b01      	subs	r3, #1
 8002552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002554:	b90b      	cbnz	r3, 800255a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	4770      	bx	lr
 800255c:	20000008 	.word	0x20000008

08002560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002560:	f3ef 8009 	mrs	r0, PSP
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <pxCurrentTCBConst>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002570:	6010      	str	r0, [r2, #0]
 8002572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800257a:	f380 8811 	msr	BASEPRI, r0
 800257e:	f000 fe91 	bl	80032a4 <vTaskSwitchContext>
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f380 8811 	msr	BASEPRI, r0
 800258a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	6808      	ldr	r0, [r1, #0]
 8002592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002596:	f380 8809 	msr	PSP, r0
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	4770      	bx	lr

080025a0 <pxCurrentTCBConst>:
 80025a0:	2000221c 	.word	0x2000221c

080025a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025a4:	b508      	push	{r3, lr}
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80025b6:	f000 fd0d 	bl	8002fd4 <xTaskIncrementTick>
 80025ba:	b118      	cbz	r0, 80025c4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <SysTick_Handler+0x28>)
 80025c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80025c4:	2300      	movs	r3, #0
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	bd08      	pop	{r3, pc}
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <vPortSetupTimerInterrupt+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <vPortSetupTimerInterrupt+0x20>)
 80025de:	3b01      	subs	r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025e2:	2207      	movs	r2, #7
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <vPortSetupTimerInterrupt+0x24>)
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000
 80025f0:	e000e014 	.word	0xe000e014
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <xPortStartScheduler>:
{
 80025f8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025fc:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002608:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002612:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800261a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800261c:	2207      	movs	r2, #7
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <xPortStartScheduler+0x88>)
 8002620:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002622:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002626:	1e54      	subs	r4, r2, #1
 8002628:	0600      	lsls	r0, r0, #24
 800262a:	d41c      	bmi.n	8002666 <xPortStartScheduler+0x6e>
 800262c:	b101      	cbz	r1, 8002630 <xPortStartScheduler+0x38>
 800262e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002634:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002638:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800263a:	9b01      	ldr	r3, [sp, #4]
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <xPortStartScheduler+0x80>)
 800263e:	b2db      	uxtb	r3, r3
 8002640:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <xPortStartScheduler+0x8c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800264a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002652:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002654:	f7ff ffbc 	bl	80025d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002658:	2200      	movs	r2, #0
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <xPortStartScheduler+0x90>)
 800265c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800265e:	f7ff ff13 	bl	8002488 <prvPortStartFirstTask>
	prvTaskExitError();
 8002662:	f7ff fef9 	bl	8002458 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002666:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800266a:	2101      	movs	r1, #1
 800266c:	0052      	lsls	r2, r2, #1
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f88d 2003 	strb.w	r2, [sp, #3]
 8002674:	4622      	mov	r2, r4
 8002676:	e7d4      	b.n	8002622 <xPortStartScheduler+0x2a>
 8002678:	e000e400 	.word	0xe000e400
 800267c:	20002214 	.word	0x20002214
 8002680:	20002218 	.word	0x20002218
 8002684:	e000ed20 	.word	0xe000ed20
 8002688:	20000008 	.word	0x20000008

0800268c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800268c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d90e      	bls.n	80026b2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002694:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <vPortValidateInterruptPriority+0x4c>)
 8002696:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <vPortValidateInterruptPriority+0x50>)
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	e7fe      	b.n	80026b0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <vPortValidateInterruptPriority+0x54>)
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <vPortValidateInterruptPriority+0x58>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026be:	4293      	cmp	r3, r2
 80026c0:	d908      	bls.n	80026d4 <vPortValidateInterruptPriority+0x48>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	e7fe      	b.n	80026d2 <vPortValidateInterruptPriority+0x46>
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e3f0 	.word	0xe000e3f0
 80026dc:	20002214 	.word	0x20002214
 80026e0:	e000ed0c 	.word	0xe000ed0c
 80026e4:	20002218 	.word	0x20002218

080026e8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80026ee:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026f0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026f2:	b942      	cbnz	r2, 8002706 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026f4:	6805      	ldr	r5, [r0, #0]
 80026f6:	b99d      	cbnz	r5, 8002720 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80026f8:	6840      	ldr	r0, [r0, #4]
 80026fa:	f000 ff11 	bl	8003520 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80026fe:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002700:	3601      	adds	r6, #1
 8002702:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002704:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002706:	b96d      	cbnz	r5, 8002724 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002708:	6880      	ldr	r0, [r0, #8]
 800270a:	f001 f951 	bl	80039b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800270e:	68a3      	ldr	r3, [r4, #8]
 8002710:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002712:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002714:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002716:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002718:	4293      	cmp	r3, r2
 800271a:	d301      	bcc.n	8002720 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002720:	2000      	movs	r0, #0
 8002722:	e7ed      	b.n	8002700 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002724:	68c0      	ldr	r0, [r0, #12]
 8002726:	f001 f943 	bl	80039b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800272a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800272c:	68e2      	ldr	r2, [r4, #12]
 800272e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002730:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002732:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002734:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002736:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002738:	bf3e      	ittt	cc
 800273a:	6862      	ldrcc	r2, [r4, #4]
 800273c:	189b      	addcc	r3, r3, r2
 800273e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002740:	2d02      	cmp	r5, #2
 8002742:	d1ed      	bne.n	8002720 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002744:	b10e      	cbz	r6, 800274a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002746:	3e01      	subs	r6, #1
 8002748:	e7ea      	b.n	8002720 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800274a:	4630      	mov	r0, r6
 800274c:	e7d8      	b.n	8002700 <prvCopyDataToQueue+0x18>

0800274e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800274e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002752:	b410      	push	{r4}
 8002754:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002756:	b162      	cbz	r2, 8002772 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002758:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800275a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800275c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800275e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002760:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002762:	bf28      	it	cs
 8002764:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8002766:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002768:	bf28      	it	cs
 800276a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	f001 b91f 	b.w	80039b0 <memcpy>
}
 8002772:	bc10      	pop	{r4}
 8002774:	4770      	bx	lr

08002776 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002776:	b570      	push	{r4, r5, r6, lr}
 8002778:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800277a:	f7ff febb 	bl	80024f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800277e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002782:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002786:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002788:	2d00      	cmp	r5, #0
 800278a:	dc14      	bgt.n	80027b6 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800278c:	23ff      	movs	r3, #255	; 0xff
 800278e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002792:	f7ff fed1 	bl	8002538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002796:	f7ff fead 	bl	80024f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800279a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800279e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80027a2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027a4:	2d00      	cmp	r5, #0
 80027a6:	dc12      	bgt.n	80027ce <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027a8:	23ff      	movs	r3, #255	; 0xff
 80027aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80027ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80027b2:	f7ff bec1 	b.w	8002538 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0e7      	beq.n	800278c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027bc:	4630      	mov	r0, r6
 80027be:	f000 fdc5 	bl	800334c <xTaskRemoveFromEventList>
 80027c2:	b108      	cbz	r0, 80027c8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80027c4:	f000 fe4e 	bl	8003464 <vTaskMissedYield>
 80027c8:	3d01      	subs	r5, #1
 80027ca:	b26d      	sxtb	r5, r5
 80027cc:	e7dc      	b.n	8002788 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0e9      	beq.n	80027a8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d4:	4630      	mov	r0, r6
 80027d6:	f000 fdb9 	bl	800334c <xTaskRemoveFromEventList>
 80027da:	b108      	cbz	r0, 80027e0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80027dc:	f000 fe42 	bl	8003464 <vTaskMissedYield>
 80027e0:	3d01      	subs	r5, #1
 80027e2:	b26d      	sxtb	r5, r5
 80027e4:	e7de      	b.n	80027a4 <prvUnlockQueue+0x2e>
	...

080027e8 <xQueueGenericReset>:
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80027ec:	4604      	mov	r4, r0
 80027ee:	b940      	cbnz	r0, 8002802 <xQueueGenericReset+0x1a>
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	e7fe      	b.n	8002800 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002802:	f7ff fe77 	bl	80024f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002806:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	4343      	muls	r3, r0
 800280e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002810:	1a1b      	subs	r3, r3, r0
 8002812:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002814:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002816:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002818:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800281a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800281c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800281e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002820:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002828:	b995      	cbnz	r5, 8002850 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	b163      	cbz	r3, 8002848 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800282e:	f104 0010 	add.w	r0, r4, #16
 8002832:	f000 fd8b 	bl	800334c <xTaskRemoveFromEventList>
 8002836:	b138      	cbz	r0, 8002848 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <xQueueGenericReset+0x7c>)
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002848:	f7ff fe76 	bl	8002538 <vPortExitCritical>
}
 800284c:	2001      	movs	r0, #1
 800284e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002850:	f104 0010 	add.w	r0, r4, #16
 8002854:	f7ff fdbe 	bl	80023d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002858:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800285c:	f7ff fdba 	bl	80023d4 <vListInitialise>
 8002860:	e7f2      	b.n	8002848 <xQueueGenericReset+0x60>
 8002862:	bf00      	nop
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <xQueueGenericCreate>:
	{
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800286c:	4606      	mov	r6, r0
 800286e:	b940      	cbnz	r0, 8002882 <xQueueGenericCreate+0x1a>
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	e7fe      	b.n	8002880 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002882:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002884:	3048      	adds	r0, #72	; 0x48
 8002886:	f7ff fcdf 	bl	8002248 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800288a:	4604      	mov	r4, r0
 800288c:	b138      	cbz	r0, 800289e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800288e:	b945      	cbnz	r5, 80028a2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002890:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002892:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002894:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002896:	2101      	movs	r1, #1
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff ffa5 	bl	80027e8 <xQueueGenericReset>
	}
 800289e:	4620      	mov	r0, r4
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028a2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028a6:	6003      	str	r3, [r0, #0]
 80028a8:	e7f3      	b.n	8002892 <xQueueGenericCreate+0x2a>
	...

080028ac <xQueueGenericSend>:
{
 80028ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4689      	mov	r9, r1
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80028b6:	4604      	mov	r4, r0
 80028b8:	b940      	cbnz	r0, 80028cc <xQueueGenericSend+0x20>
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	e7fe      	b.n	80028ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028cc:	2900      	cmp	r1, #0
 80028ce:	f040 8088 	bne.w	80029e2 <xQueueGenericSend+0x136>
 80028d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8084 	beq.w	80029e2 <xQueueGenericSend+0x136>
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	e7fe      	b.n	80028ea <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ec:	9e01      	ldr	r6, [sp, #4]
 80028ee:	2e00      	cmp	r6, #0
 80028f0:	f000 8082 	beq.w	80029f8 <xQueueGenericSend+0x14c>
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	e7fe      	b.n	8002904 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002906:	9d01      	ldr	r5, [sp, #4]
 8002908:	b91d      	cbnz	r5, 8002912 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800290a:	f7ff fe15 	bl	8002538 <vPortExitCritical>
			return errQUEUE_FULL;
 800290e:	2000      	movs	r0, #0
 8002910:	e058      	b.n	80029c4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002912:	b916      	cbnz	r6, 800291a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002914:	a802      	add	r0, sp, #8
 8002916:	f000 fd5b 	bl	80033d0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800291a:	f7ff fe0d 	bl	8002538 <vPortExitCritical>
		vTaskSuspendAll();
 800291e:	f000 fb51 	bl	8002fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002922:	f7ff fde7 	bl	80024f4 <vPortEnterCritical>
 8002926:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	bf08      	it	eq
 800292e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002932:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	bf08      	it	eq
 800293a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800293e:	f7ff fdfb 	bl	8002538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002942:	a901      	add	r1, sp, #4
 8002944:	a802      	add	r0, sp, #8
 8002946:	f000 fd53 	bl	80033f0 <xTaskCheckForTimeOut>
 800294a:	2800      	cmp	r0, #0
 800294c:	d143      	bne.n	80029d6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800294e:	f7ff fdd1 	bl	80024f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002952:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002954:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002956:	f7ff fdef 	bl	8002538 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800295a:	42ae      	cmp	r6, r5
 800295c:	d135      	bne.n	80029ca <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800295e:	9901      	ldr	r1, [sp, #4]
 8002960:	f104 0010 	add.w	r0, r4, #16
 8002964:	f000 fcd8 	bl	8003318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff ff04 	bl	8002776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800296e:	f000 fbc3 	bl	80030f8 <xTaskResumeAll>
 8002972:	b938      	cbnz	r0, 8002984 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002978:	f8ca 3000 	str.w	r3, [sl]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002986:	f7ff fdb5 	bl	80024f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800298a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800298c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800298e:	429a      	cmp	r2, r3
 8002990:	d301      	bcc.n	8002996 <xQueueGenericSend+0xea>
 8002992:	2f02      	cmp	r7, #2
 8002994:	d1b7      	bne.n	8002906 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002996:	463a      	mov	r2, r7
 8002998:	4649      	mov	r1, r9
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff fea4 	bl	80026e8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a2:	b11b      	cbz	r3, 80029ac <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029a8:	f000 fcd0 	bl	800334c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80029ac:	b138      	cbz	r0, 80029be <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <xQueueGenericSend+0x168>)
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80029be:	f7ff fdbb 	bl	8002538 <vPortExitCritical>
				return pdPASS;
 80029c2:	2001      	movs	r0, #1
}
 80029c4:	b004      	add	sp, #16
 80029c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff fed3 	bl	8002776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029d0:	f000 fb92 	bl	80030f8 <xTaskResumeAll>
 80029d4:	e7d6      	b.n	8002984 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff fecd 	bl	8002776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029dc:	f000 fb8c 	bl	80030f8 <xTaskResumeAll>
 80029e0:	e795      	b.n	800290e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e2:	2f02      	cmp	r7, #2
 80029e4:	d102      	bne.n	80029ec <xQueueGenericSend+0x140>
 80029e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d10a      	bne.n	8002a02 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ec:	f000 fd40 	bl	8003470 <xTaskGetSchedulerState>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	f43f af7b 	beq.w	80028ec <xQueueGenericSend+0x40>
 80029f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80029f8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80029fc:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002a14 <xQueueGenericSend+0x168>
 8002a00:	e7c1      	b.n	8002986 <xQueueGenericSend+0xda>
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	e7fe      	b.n	8002a12 <xQueueGenericSend+0x166>
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueGiveFromISR>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	b940      	cbnz	r0, 8002a32 <xQueueGiveFromISR+0x1a>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	e7fe      	b.n	8002a30 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a34:	b143      	cbz	r3, 8002a48 <xQueueGiveFromISR+0x30>
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	e7fe      	b.n	8002a46 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002a48:	6803      	ldr	r3, [r0, #0]
 8002a4a:	b90b      	cbnz	r3, 8002a50 <xQueueGiveFromISR+0x38>
 8002a4c:	6843      	ldr	r3, [r0, #4]
 8002a4e:	bb73      	cbnz	r3, 8002aae <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a50:	f7ff fe1c 	bl	800268c <vPortValidateInterruptPriority>
	__asm volatile
 8002a54:	f3ef 8611 	mrs	r6, BASEPRI
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d301      	bcc.n	8002a74 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002a70:	2000      	movs	r0, #0
 8002a72:	e014      	b.n	8002a9e <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002a78:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a7a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002a7c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	d110      	bne.n	8002aa4 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a84:	b90b      	cbnz	r3, 8002a8a <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e009      	b.n	8002a9e <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a8e:	f000 fc5d 	bl	800334c <xTaskRemoveFromEventList>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d0f7      	beq.n	8002a86 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002a96:	2d00      	cmp	r5, #0
 8002a98:	d0f5      	beq.n	8002a86 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002a9e:	f386 8811 	msr	BASEPRI, r6
}
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002aac:	e7eb      	b.n	8002a86 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	e7fe      	b.n	8002abe <xQueueGiveFromISR+0xa6>

08002ac0 <xQueueGenericReceive>:
{
 8002ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac4:	4688      	mov	r8, r1
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002aca:	4604      	mov	r4, r0
 8002acc:	b940      	cbnz	r0, 8002ae0 <xQueueGenericReceive+0x20>
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	e7fe      	b.n	8002ade <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	f040 80a5 	bne.w	8002c30 <xQueueGenericReceive+0x170>
 8002ae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a1 	beq.w	8002c30 <xQueueGenericReceive+0x170>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	e7fe      	b.n	8002afe <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b00:	9e01      	ldr	r6, [sp, #4]
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	f000 809a 	beq.w	8002c3c <xQueueGenericReceive+0x17c>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002b1c:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06d      	beq.n	8002bfe <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b26:	e05f      	b.n	8002be8 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b28:	9d01      	ldr	r5, [sp, #4]
 8002b2a:	b91d      	cbnz	r5, 8002b34 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8002b2c:	f7ff fd04 	bl	8002538 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002b30:	4628      	mov	r0, r5
 8002b32:	e067      	b.n	8002c04 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8002b34:	b916      	cbnz	r6, 8002b3c <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8002b36:	a802      	add	r0, sp, #8
 8002b38:	f000 fc4a 	bl	80033d0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002b3c:	f7ff fcfc 	bl	8002538 <vPortExitCritical>
		vTaskSuspendAll();
 8002b40:	f000 fa40 	bl	8002fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b44:	f7ff fcd6 	bl	80024f4 <vPortEnterCritical>
 8002b48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b4c:	2bff      	cmp	r3, #255	; 0xff
 8002b4e:	bf08      	it	eq
 8002b50:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002b54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	bf08      	it	eq
 8002b5c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002b60:	f7ff fcea 	bl	8002538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b64:	a901      	add	r1, sp, #4
 8002b66:	a802      	add	r0, sp, #8
 8002b68:	f000 fc42 	bl	80033f0 <xTaskCheckForTimeOut>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d152      	bne.n	8002c16 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8002b70:	f7ff fcc0 	bl	80024f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002b76:	f7ff fcdf 	bl	8002538 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	d145      	bne.n	8002c0a <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	b933      	cbnz	r3, 8002b90 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8002b82:	f7ff fcb7 	bl	80024f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b86:	6860      	ldr	r0, [r4, #4]
 8002b88:	f000 fc82 	bl	8003490 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002b8c:	f7ff fcd4 	bl	8002538 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b90:	9901      	ldr	r1, [sp, #4]
 8002b92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b96:	f000 fbbf 	bl	8003318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fdeb 	bl	8002776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ba0:	f000 faaa 	bl	80030f8 <xTaskResumeAll>
 8002ba4:	b938      	cbnz	r0, 8002bb6 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8002ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002baa:	f8ca 3000 	str.w	r3, [sl]
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002bb8:	f7ff fc9c 	bl	80024f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bbc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	d0b2      	beq.n	8002b28 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002bc6:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc8:	f7ff fdc1 	bl	800274e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002bcc:	f1b9 0f00 	cmp.w	r9, #0
 8002bd0:	d1a3      	bne.n	8002b1a <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bd2:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002bd4:	3d01      	subs	r5, #1
 8002bd6:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bd8:	b913      	cbnz	r3, 8002be0 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002bda:	f000 fcf1 	bl	80035c0 <pvTaskIncrementMutexHeldCount>
 8002bde:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be0:	6923      	ldr	r3, [r4, #16]
 8002be2:	b163      	cbz	r3, 8002bfe <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be4:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be8:	f000 fbb0 	bl	800334c <xTaskRemoveFromEventList>
 8002bec:	b138      	cbz	r0, 8002bfe <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <xQueueGenericReceive+0x184>)
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002bfe:	f7ff fc9b 	bl	8002538 <vPortExitCritical>
				return pdPASS;
 8002c02:	2001      	movs	r0, #1
}
 8002c04:	b004      	add	sp, #16
 8002c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fdb3 	bl	8002776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c10:	f000 fa72 	bl	80030f8 <xTaskResumeAll>
 8002c14:	e7cf      	b.n	8002bb6 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff fdad 	bl	8002776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1c:	f000 fa6c 	bl	80030f8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002c20:	f7ff fc68 	bl	80024f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002c26:	f7ff fc87 	bl	8002538 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d1c3      	bne.n	8002bb6 <xQueueGenericReceive+0xf6>
 8002c2e:	e77f      	b.n	8002b30 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c30:	f000 fc1e 	bl	8003470 <xTaskGetSchedulerState>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f43f af63 	beq.w	8002b00 <xQueueGenericReceive+0x40>
 8002c3a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002c3c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002c3e:	f8df a004 	ldr.w	sl, [pc, #4]	; 8002c44 <xQueueGenericReceive+0x184>
 8002c42:	e7b9      	b.n	8002bb8 <xQueueGenericReceive+0xf8>
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <xQueueReceiveFromISR>:
{
 8002c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c4c:	4689      	mov	r9, r1
 8002c4e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002c50:	4605      	mov	r5, r0
 8002c52:	b940      	cbnz	r0, 8002c66 <xQueueReceiveFromISR+0x1e>
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	e7fe      	b.n	8002c64 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c66:	bb71      	cbnz	r1, 8002cc6 <xQueueReceiveFromISR+0x7e>
 8002c68:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c6a:	b363      	cbz	r3, 8002cc6 <xQueueReceiveFromISR+0x7e>
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	e7fe      	b.n	8002c7c <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c82:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c84:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fd61 	bl	800274e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002c8c:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002c8e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002c90:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002c92:	d113      	bne.n	8002cbc <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c94:	692b      	ldr	r3, [r5, #16]
 8002c96:	b90b      	cbnz	r3, 8002c9c <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002c98:	2001      	movs	r0, #1
 8002c9a:	e00b      	b.n	8002cb4 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9c:	f105 0010 	add.w	r0, r5, #16
 8002ca0:	f000 fb54 	bl	800334c <xTaskRemoveFromEventList>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d0f7      	beq.n	8002c98 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002ca8:	f1b8 0f00 	cmp.w	r8, #0
 8002cac:	d0f4      	beq.n	8002c98 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002cb4:	f387 8811 	msr	BASEPRI, r7
}
 8002cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cbc:	3601      	adds	r6, #1
 8002cbe:	b276      	sxtb	r6, r6
 8002cc0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002cc4:	e7e8      	b.n	8002c98 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cc6:	f7ff fce1 	bl	800268c <vPortValidateInterruptPriority>
	__asm volatile
 8002cca:	f3ef 8711 	mrs	r7, BASEPRI
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cde:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce0:	2c00      	cmp	r4, #0
 8002ce2:	d1cc      	bne.n	8002c7e <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	e7e5      	b.n	8002cb4 <xQueueReceiveFromISR+0x6c>

08002ce8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <prvResetNextTaskUnblockTime+0x1c>)
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <prvResetNextTaskUnblockTime+0x20>)
 8002cf0:	b919      	cbnz	r1, 8002cfa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	6852      	ldr	r2, [r2, #4]
 8002d02:	e7f8      	b.n	8002cf6 <prvResetNextTaskUnblockTime+0xe>
 8002d04:	20002220 	.word	0x20002220
 8002d08:	200022f8 	.word	0x200022f8

08002d0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d10:	4e1b      	ldr	r6, [pc, #108]	; (8002d80 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002d12:	681d      	ldr	r5, [r3, #0]
{
 8002d14:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d16:	6830      	ldr	r0, [r6, #0]
{
 8002d18:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d1a:	3004      	adds	r0, #4
 8002d1c:	f7ff fb8b 	bl	8002436 <uxListRemove>
 8002d20:	4633      	mov	r3, r6
 8002d22:	b940      	cbnz	r0, 8002d36 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d24:	2001      	movs	r0, #1
 8002d26:	6831      	ldr	r1, [r6, #0]
 8002d28:	4e16      	ldr	r6, [pc, #88]	; (8002d84 <prvAddCurrentTaskToDelayedList+0x78>)
 8002d2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002d2c:	6832      	ldr	r2, [r6, #0]
 8002d2e:	4088      	lsls	r0, r1
 8002d30:	ea22 0200 	bic.w	r2, r2, r0
 8002d34:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d36:	1c62      	adds	r2, r4, #1
 8002d38:	d107      	bne.n	8002d4a <prvAddCurrentTaskToDelayedList+0x3e>
 8002d3a:	b137      	cbz	r7, 8002d4a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	4812      	ldr	r0, [pc, #72]	; (8002d88 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002d40:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d46:	f7ff bb53 	b.w	80023f0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d4a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d4c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002d4e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d50:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002d52:	d907      	bls.n	8002d64 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <prvAddCurrentTaskToDelayedList+0x80>)
 8002d56:	6810      	ldr	r0, [r2, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
}
 8002d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d5e:	3104      	adds	r1, #4
 8002d60:	f7ff bb52 	b.w	8002408 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <prvAddCurrentTaskToDelayedList+0x84>)
 8002d66:	6810      	ldr	r0, [r2, #0]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	3104      	adds	r1, #4
 8002d6c:	f7ff fb4c 	bl	8002408 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <prvAddCurrentTaskToDelayedList+0x88>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002d76:	bf38      	it	cc
 8002d78:	601c      	strcc	r4, [r3, #0]
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7c:	20002340 	.word	0x20002340
 8002d80:	2000221c 	.word	0x2000221c
 8002d84:	200022c8 	.word	0x200022c8
 8002d88:	20002318 	.word	0x20002318
 8002d8c:	20002224 	.word	0x20002224
 8002d90:	20002220 	.word	0x20002220
 8002d94:	200022f8 	.word	0x200022f8

08002d98 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	e7fe      	b.n	8002da8 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002dac <xTaskCreate>:
	{
 8002dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002db4:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db6:	4650      	mov	r0, sl
	{
 8002db8:	460f      	mov	r7, r1
 8002dba:	4699      	mov	r9, r3
 8002dbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dbe:	f7ff fa43 	bl	8002248 <pvPortMalloc>
			if( pxStack != NULL )
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f000 8096 	beq.w	8002ef6 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dca:	2054      	movs	r0, #84	; 0x54
 8002dcc:	f7ff fa3c 	bl	8002248 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	f000 808c 	beq.w	8002ef0 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dd8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002ddc:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dde:	4455      	add	r5, sl
 8002de0:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002de2:	f025 0a07 	bic.w	sl, r5, #7
 8002de6:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002dea:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dec:	7859      	ldrb	r1, [r3, #1]
 8002dee:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002df2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002df6:	b109      	cbz	r1, 8002dfc <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df8:	42bb      	cmp	r3, r7
 8002dfa:	d1f7      	bne.n	8002dec <xTaskCreate+0x40>
 8002dfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dfe:	f04f 0b00 	mov.w	fp, #0
 8002e02:	2d06      	cmp	r5, #6
 8002e04:	bf28      	it	cs
 8002e06:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e08:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002e0a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002e0c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e10:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002e14:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e18:	f7ff fae7 	bl	80023ea <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e1c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e20:	f104 0018 	add.w	r0, r4, #24
 8002e24:	f7ff fae1 	bl	80023ea <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002e28:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e2c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e30:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e32:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e36:	464a      	mov	r2, r9
 8002e38:	4641      	mov	r1, r8
 8002e3a:	4650      	mov	r0, sl
 8002e3c:	f7ff fb34 	bl	80024a8 <pxPortInitialiseStack>
 8002e40:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002e42:	b106      	cbz	r6, 8002e46 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e44:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002e46:	f7ff fb55 	bl	80024f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002e4c:	4e32      	ldr	r6, [pc, #200]	; (8002f18 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002f44 <xTaskCreate+0x198>
 8002e54:	3201      	adds	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e58:	6835      	ldr	r5, [r6, #0]
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	d14e      	bne.n	8002efc <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002e5e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d11d      	bne.n	8002ea2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e66:	eb08 0005 	add.w	r0, r8, r5
 8002e6a:	3514      	adds	r5, #20
 8002e6c:	f7ff fab2 	bl	80023d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e70:	2d8c      	cmp	r5, #140	; 0x8c
 8002e72:	d1f8      	bne.n	8002e66 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002e74:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002f48 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002e78:	4d28      	ldr	r5, [pc, #160]	; (8002f1c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002e7a:	4648      	mov	r0, r9
 8002e7c:	f7ff faaa 	bl	80023d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e80:	4628      	mov	r0, r5
 8002e82:	f7ff faa7 	bl	80023d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e86:	4826      	ldr	r0, [pc, #152]	; (8002f20 <xTaskCreate+0x174>)
 8002e88:	f7ff faa4 	bl	80023d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002e8c:	4825      	ldr	r0, [pc, #148]	; (8002f24 <xTaskCreate+0x178>)
 8002e8e:	f7ff faa1 	bl	80023d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002e92:	4825      	ldr	r0, [pc, #148]	; (8002f28 <xTaskCreate+0x17c>)
 8002e94:	f7ff fa9e 	bl	80023d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <xTaskCreate+0x180>)
 8002e9a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <xTaskCreate+0x184>)
 8002ea0:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002ea2:	2501      	movs	r5, #1
		uxTaskNumber++;
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002ea6:	4924      	ldr	r1, [pc, #144]	; (8002f38 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002ea8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002eaa:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002eac:	3301      	adds	r3, #1
 8002eae:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002eb2:	fa05 f302 	lsl.w	r3, r5, r2
 8002eb6:	4303      	orrs	r3, r0
 8002eb8:	2014      	movs	r0, #20
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	fb00 8002 	mla	r0, r0, r2, r8
 8002ec0:	4639      	mov	r1, r7
 8002ec2:	f7ff fa95 	bl	80023f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002ec6:	f7ff fb37 	bl	8002538 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <xTaskCreate+0x190>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b163      	cbz	r3, 8002eea <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ed0:	6833      	ldr	r3, [r6, #0]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d207      	bcs.n	8002eea <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <xTaskCreate+0x194>)
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
	}
 8002eea:	4628      	mov	r0, r5
 8002eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f7ff fa37 	bl	8002364 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ef6:	f04f 35ff 	mov.w	r5, #4294967295
 8002efa:	e7f6      	b.n	8002eea <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <xTaskCreate+0x190>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ce      	bne.n	8002ea2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f04:	6833      	ldr	r3, [r6, #0]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f0a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002f0c:	bf98      	it	ls
 8002f0e:	6034      	strls	r4, [r6, #0]
 8002f10:	e7c7      	b.n	8002ea2 <xTaskCreate+0xf6>
 8002f12:	bf00      	nop
 8002f14:	200022b4 	.word	0x200022b4
 8002f18:	2000221c 	.word	0x2000221c
 8002f1c:	200022e0 	.word	0x200022e0
 8002f20:	20002300 	.word	0x20002300
 8002f24:	2000232c 	.word	0x2000232c
 8002f28:	20002318 	.word	0x20002318
 8002f2c:	20002220 	.word	0x20002220
 8002f30:	20002224 	.word	0x20002224
 8002f34:	200022c4 	.word	0x200022c4
 8002f38:	200022c8 	.word	0x200022c8
 8002f3c:	20002314 	.word	0x20002314
 8002f40:	e000ed04 	.word	0xe000ed04
 8002f44:	20002228 	.word	0x20002228
 8002f48:	200022cc 	.word	0x200022cc

08002f4c <vTaskStartScheduler>:
{
 8002f4c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002f4e:	2400      	movs	r4, #0
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <vTaskStartScheduler+0x60>)
 8002f52:	9400      	str	r4, [sp, #0]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	4623      	mov	r3, r4
 8002f5a:	4915      	ldr	r1, [pc, #84]	; (8002fb0 <vTaskStartScheduler+0x64>)
 8002f5c:	4815      	ldr	r0, [pc, #84]	; (8002fb4 <vTaskStartScheduler+0x68>)
 8002f5e:	f7ff ff25 	bl	8002dac <xTaskCreate>
	if( xReturn == pdPASS )
 8002f62:	2801      	cmp	r0, #1
 8002f64:	d114      	bne.n	8002f90 <vTaskStartScheduler+0x44>
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <vTaskStartScheduler+0x6c>)
 8002f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <vTaskStartScheduler+0x70>)
 8002f80:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <vTaskStartScheduler+0x74>)
 8002f84:	601c      	str	r4, [r3, #0]
}
 8002f86:	b002      	add	sp, #8
 8002f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002f8c:	f7ff bb34 	b.w	80025f8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f90:	3001      	adds	r0, #1
 8002f92:	d108      	bne.n	8002fa6 <vTaskStartScheduler+0x5a>
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	e7fe      	b.n	8002fa4 <vTaskStartScheduler+0x58>
}
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	bf00      	nop
 8002fac:	200022f4 	.word	0x200022f4
 8002fb0:	08005a29 	.word	0x08005a29
 8002fb4:	08003231 	.word	0x08003231
 8002fb8:	200022f8 	.word	0x200022f8
 8002fbc:	20002314 	.word	0x20002314
 8002fc0:	20002340 	.word	0x20002340

08002fc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002fc4:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <vTaskSuspendAll+0xc>)
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200022c0 	.word	0x200022c0

08002fd4 <xTaskIncrementTick>:
{
 8002fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <xTaskIncrementTick+0xf8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d153      	bne.n	8003088 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <xTaskIncrementTick+0xfc>)
 8002fe2:	681c      	ldr	r4, [r3, #0]
 8002fe4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002fe6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002fe8:	b9bc      	cbnz	r4, 800301a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <xTaskIncrementTick+0x100>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	b142      	cbz	r2, 8003004 <xTaskIncrementTick+0x30>
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	e7fe      	b.n	8003002 <xTaskIncrementTick+0x2e>
 8003004:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <xTaskIncrementTick+0x104>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	6810      	ldr	r0, [r2, #0]
 800300a:	6018      	str	r0, [r3, #0]
 800300c:	6011      	str	r1, [r2, #0]
 800300e:	4a33      	ldr	r2, [pc, #204]	; (80030dc <xTaskIncrementTick+0x108>)
 8003010:	6813      	ldr	r3, [r2, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	f7ff fe67 	bl	8002ce8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800301a:	4d31      	ldr	r5, [pc, #196]	; (80030e0 <xTaskIncrementTick+0x10c>)
 800301c:	f04f 0b00 	mov.w	fp, #0
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	4f30      	ldr	r7, [pc, #192]	; (80030e4 <xTaskIncrementTick+0x110>)
 8003024:	429c      	cmp	r4, r3
 8003026:	d33e      	bcc.n	80030a6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003028:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80030d4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800302c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80030f4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003030:	f8d8 2000 	ldr.w	r2, [r8]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	bb72      	cbnz	r2, 8003096 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	602a      	str	r2, [r5, #0]
					break;
 800303e:	e032      	b.n	80030a6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003040:	f106 0a04 	add.w	sl, r6, #4
 8003044:	4650      	mov	r0, sl
 8003046:	f7ff f9f6 	bl	8002436 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800304a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800304c:	b119      	cbz	r1, 8003056 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800304e:	f106 0018 	add.w	r0, r6, #24
 8003052:	f7ff f9f0 	bl	8002436 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003056:	2201      	movs	r2, #1
 8003058:	f04f 0e14 	mov.w	lr, #20
 800305c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800305e:	f8d9 3000 	ldr.w	r3, [r9]
 8003062:	fa02 f100 	lsl.w	r1, r2, r0
 8003066:	4319      	orrs	r1, r3
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <xTaskIncrementTick+0x114>)
 800306a:	f8c9 1000 	str.w	r1, [r9]
 800306e:	fb0e 3000 	mla	r0, lr, r0, r3
 8003072:	4651      	mov	r1, sl
 8003074:	f7ff f9bc 	bl	80023f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003078:	6838      	ldr	r0, [r7, #0]
 800307a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800307c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800307e:	4291      	cmp	r1, r2
 8003080:	bf28      	it	cs
 8003082:	f04f 0b01 	movcs.w	fp, #1
 8003086:	e7d3      	b.n	8003030 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003088:	4a18      	ldr	r2, [pc, #96]	; (80030ec <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800308a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e011      	b.n	80030ba <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003096:	f8d8 2000 	ldr.w	r2, [r8]
 800309a:	68d2      	ldr	r2, [r2, #12]
 800309c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800309e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80030a0:	428c      	cmp	r4, r1
 80030a2:	d2cd      	bcs.n	8003040 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80030a4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <xTaskIncrementTick+0x114>)
 80030aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030ac:	2214      	movs	r2, #20
 80030ae:	434a      	muls	r2, r1
 80030b0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80030b2:	2a02      	cmp	r2, #2
 80030b4:	bf28      	it	cs
 80030b6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80030ba:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <xTaskIncrementTick+0x11c>)
 80030bc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80030be:	2a00      	cmp	r2, #0
 80030c0:	bf18      	it	ne
 80030c2:	f04f 0b01 	movne.w	fp, #1
}
 80030c6:	4658      	mov	r0, fp
 80030c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030cc:	200022c0 	.word	0x200022c0
 80030d0:	20002340 	.word	0x20002340
 80030d4:	20002220 	.word	0x20002220
 80030d8:	20002224 	.word	0x20002224
 80030dc:	200022fc 	.word	0x200022fc
 80030e0:	200022f8 	.word	0x200022f8
 80030e4:	2000221c 	.word	0x2000221c
 80030e8:	20002228 	.word	0x20002228
 80030ec:	200022bc 	.word	0x200022bc
 80030f0:	20002344 	.word	0x20002344
 80030f4:	200022c8 	.word	0x200022c8

080030f8 <xTaskResumeAll>:
{
 80030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80030fc:	4c31      	ldr	r4, [pc, #196]	; (80031c4 <xTaskResumeAll+0xcc>)
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	b943      	cbnz	r3, 8003114 <xTaskResumeAll+0x1c>
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	e7fe      	b.n	8003112 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003114:	f7ff f9ee 	bl	80024f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800311e:	6824      	ldr	r4, [r4, #0]
 8003120:	b12c      	cbz	r4, 800312e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003122:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003124:	f7ff fa08 	bl	8002538 <vPortExitCritical>
}
 8003128:	4620      	mov	r0, r4
 800312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <xTaskResumeAll+0xd0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f5      	beq.n	8003122 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003136:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80031e0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800313a:	4f24      	ldr	r7, [pc, #144]	; (80031cc <xTaskResumeAll+0xd4>)
 800313c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80031e4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003140:	f8d9 3000 	ldr.w	r3, [r9]
 8003144:	b9e3      	cbnz	r3, 8003180 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003146:	b10c      	cbz	r4, 800314c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003148:	f7ff fdce 	bl	8002ce8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800314c:	4d20      	ldr	r5, [pc, #128]	; (80031d0 <xTaskResumeAll+0xd8>)
 800314e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003150:	b144      	cbz	r4, 8003164 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003152:	2701      	movs	r7, #1
 8003154:	4e1f      	ldr	r6, [pc, #124]	; (80031d4 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003156:	f7ff ff3d 	bl	8002fd4 <xTaskIncrementTick>
 800315a:	b100      	cbz	r0, 800315e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800315c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800315e:	3c01      	subs	r4, #1
 8003160:	d1f9      	bne.n	8003156 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003162:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <xTaskResumeAll+0xdc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0da      	beq.n	8003122 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800316c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <xTaskResumeAll+0xe0>)
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800317c:	2401      	movs	r4, #1
 800317e:	e7d1      	b.n	8003124 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003180:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003184:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003186:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003188:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800318a:	f104 0018 	add.w	r0, r4, #24
 800318e:	f7ff f952 	bl	8002436 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003192:	4630      	mov	r0, r6
 8003194:	f7ff f94f 	bl	8002436 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003198:	2014      	movs	r0, #20
 800319a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	fa05 f302 	lsl.w	r3, r5, r2
 80031a2:	430b      	orrs	r3, r1
 80031a4:	fb00 8002 	mla	r0, r0, r2, r8
 80031a8:	4631      	mov	r1, r6
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	f7ff f920 	bl	80023f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <xTaskResumeAll+0xe4>)
 80031b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80031ba:	bf24      	itt	cs
 80031bc:	4b05      	ldrcs	r3, [pc, #20]	; (80031d4 <xTaskResumeAll+0xdc>)
 80031be:	601d      	strcs	r5, [r3, #0]
 80031c0:	e7be      	b.n	8003140 <xTaskResumeAll+0x48>
 80031c2:	bf00      	nop
 80031c4:	200022c0 	.word	0x200022c0
 80031c8:	200022b4 	.word	0x200022b4
 80031cc:	200022c8 	.word	0x200022c8
 80031d0:	200022bc 	.word	0x200022bc
 80031d4:	20002344 	.word	0x20002344
 80031d8:	e000ed04 	.word	0xe000ed04
 80031dc:	2000221c 	.word	0x2000221c
 80031e0:	20002300 	.word	0x20002300
 80031e4:	20002228 	.word	0x20002228

080031e8 <vTaskDelay>:
	{
 80031e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031ea:	b940      	cbnz	r0, 80031fe <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <vTaskDelay+0x40>)
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <vTaskDelay+0x44>)
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	b141      	cbz	r1, 8003216 <vTaskDelay+0x2e>
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	e7fe      	b.n	8003214 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003216:	f7ff fed5 	bl	8002fc4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800321a:	f7ff fd77 	bl	8002d0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800321e:	f7ff ff6b 	bl	80030f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003222:	2800      	cmp	r0, #0
 8003224:	d0e2      	beq.n	80031ec <vTaskDelay+0x4>
 8003226:	bd08      	pop	{r3, pc}
 8003228:	e000ed04 	.word	0xe000ed04
 800322c:	200022c0 	.word	0x200022c0

08003230 <prvIdleTask>:
{
 8003230:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003232:	4e17      	ldr	r6, [pc, #92]	; (8003290 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003234:	4c17      	ldr	r4, [pc, #92]	; (8003294 <prvIdleTask+0x64>)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	b963      	cbnz	r3, 8003254 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <prvIdleTask+0x68>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d9f8      	bls.n	8003234 <prvIdleTask+0x4>
				taskYIELD();
 8003242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <prvIdleTask+0x6c>)
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	e7ef      	b.n	8003234 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003254:	f7ff feb6 	bl	8002fc4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003258:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800325a:	f7ff ff4d 	bl	80030f8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800325e:	2d00      	cmp	r5, #0
 8003260:	d0e9      	beq.n	8003236 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003262:	f7ff f947 	bl	80024f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003266:	68f3      	ldr	r3, [r6, #12]
 8003268:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326a:	1d28      	adds	r0, r5, #4
 800326c:	f7ff f8e3 	bl	8002436 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <prvIdleTask+0x70>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800327e:	f7ff f95b 	bl	8002538 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003282:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003284:	f7ff f86e 	bl	8002364 <vPortFree>
			vPortFree( pxTCB );
 8003288:	4628      	mov	r0, r5
 800328a:	f7ff f86b 	bl	8002364 <vPortFree>
 800328e:	e7d2      	b.n	8003236 <prvIdleTask+0x6>
 8003290:	2000232c 	.word	0x2000232c
 8003294:	200022b8 	.word	0x200022b8
 8003298:	20002228 	.word	0x20002228
 800329c:	e000ed04 	.word	0xe000ed04
 80032a0:	200022b4 	.word	0x200022b4

080032a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <vTaskSwitchContext+0x60>)
{
 80032a6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <vTaskSwitchContext+0x64>)
 80032ac:	b112      	cbz	r2, 80032b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80032ae:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80032b4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <vTaskSwitchContext+0x68>)
 80032b8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	2214      	movs	r2, #20
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f1c3 031f 	rsb	r3, r3, #31
 80032c6:	435a      	muls	r2, r3
 80032c8:	4911      	ldr	r1, [pc, #68]	; (8003310 <vTaskSwitchContext+0x6c>)
 80032ca:	588c      	ldr	r4, [r1, r2]
 80032cc:	1888      	adds	r0, r1, r2
 80032ce:	b944      	cbnz	r4, 80032e2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	e7fe      	b.n	80032e0 <vTaskSwitchContext+0x3c>
 80032e2:	6844      	ldr	r4, [r0, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	6864      	ldr	r4, [r4, #4]
 80032e8:	440a      	add	r2, r1
 80032ea:	4294      	cmp	r4, r2
 80032ec:	bf08      	it	eq
 80032ee:	6862      	ldreq	r2, [r4, #4]
 80032f0:	6044      	str	r4, [r0, #4]
 80032f2:	bf08      	it	eq
 80032f4:	6042      	streq	r2, [r0, #4]
 80032f6:	2214      	movs	r2, #20
 80032f8:	fb02 1303 	mla	r3, r2, r3, r1
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <vTaskSwitchContext+0x70>)
 8003302:	e7d5      	b.n	80032b0 <vTaskSwitchContext+0xc>
 8003304:	200022c0 	.word	0x200022c0
 8003308:	20002344 	.word	0x20002344
 800330c:	200022c8 	.word	0x200022c8
 8003310:	20002228 	.word	0x20002228
 8003314:	2000221c 	.word	0x2000221c

08003318 <vTaskPlaceOnEventList>:
{
 8003318:	b510      	push	{r4, lr}
 800331a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800331c:	b940      	cbnz	r0, 8003330 <vTaskPlaceOnEventList+0x18>
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	e7fe      	b.n	800332e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <vTaskPlaceOnEventList+0x30>)
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	3118      	adds	r1, #24
 8003336:	f7ff f867 	bl	8002408 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800333a:	4620      	mov	r0, r4
}
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003340:	2101      	movs	r1, #1
 8003342:	f7ff bce3 	b.w	8002d0c <prvAddCurrentTaskToDelayedList>
 8003346:	bf00      	nop
 8003348:	2000221c 	.word	0x2000221c

0800334c <xTaskRemoveFromEventList>:
{
 800334c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800334e:	68c3      	ldr	r3, [r0, #12]
 8003350:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003352:	b944      	cbnz	r4, 8003366 <xTaskRemoveFromEventList+0x1a>
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	e7fe      	b.n	8003364 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003366:	f104 0518 	add.w	r5, r4, #24
 800336a:	4628      	mov	r0, r5
 800336c:	f7ff f863 	bl	8002436 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <xTaskRemoveFromEventList+0x6c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b9e3      	cbnz	r3, 80033b0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003376:	1d25      	adds	r5, r4, #4
 8003378:	4628      	mov	r0, r5
 800337a:	f7ff f85c 	bl	8002436 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800337e:	2301      	movs	r3, #1
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <xTaskRemoveFromEventList+0x70>)
 8003382:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003384:	6808      	ldr	r0, [r1, #0]
 8003386:	4093      	lsls	r3, r2
 8003388:	4303      	orrs	r3, r0
 800338a:	2014      	movs	r0, #20
 800338c:	600b      	str	r3, [r1, #0]
 800338e:	4629      	mov	r1, r5
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <xTaskRemoveFromEventList+0x74>)
 8003392:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003396:	f7ff f82b 	bl	80023f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <xTaskRemoveFromEventList+0x78>)
 800339c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80033a4:	bf85      	ittet	hi
 80033a6:	2001      	movhi	r0, #1
 80033a8:	4b07      	ldrhi	r3, [pc, #28]	; (80033c8 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80033aa:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80033ac:	6018      	strhi	r0, [r3, #0]
}
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033b0:	4629      	mov	r1, r5
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <xTaskRemoveFromEventList+0x80>)
 80033b4:	e7ef      	b.n	8003396 <xTaskRemoveFromEventList+0x4a>
 80033b6:	bf00      	nop
 80033b8:	200022c0 	.word	0x200022c0
 80033bc:	200022c8 	.word	0x200022c8
 80033c0:	20002228 	.word	0x20002228
 80033c4:	2000221c 	.word	0x2000221c
 80033c8:	20002344 	.word	0x20002344
 80033cc:	20002300 	.word	0x20002300

080033d0 <vTaskSetTimeOutState>:
{
 80033d0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80033d2:	b908      	cbnz	r0, 80033d8 <vTaskSetTimeOutState+0x8>
 80033d4:	f7ff fce0 	bl	8002d98 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <vTaskSetTimeOutState+0x18>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <vTaskSetTimeOutState+0x1c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6043      	str	r3, [r0, #4]
 80033e4:	bd08      	pop	{r3, pc}
 80033e6:	bf00      	nop
 80033e8:	200022fc 	.word	0x200022fc
 80033ec:	20002340 	.word	0x20002340

080033f0 <xTaskCheckForTimeOut>:
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80033f4:	4604      	mov	r4, r0
 80033f6:	b940      	cbnz	r0, 800340a <xTaskCheckForTimeOut+0x1a>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	e7fe      	b.n	8003408 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800340a:	b941      	cbnz	r1, 800341e <xTaskCheckForTimeOut+0x2e>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	e7fe      	b.n	800341c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800341e:	f7ff f869 	bl	80024f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <xTaskCheckForTimeOut+0x6c>)
 8003424:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	d010      	beq.n	800344e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <xTaskCheckForTimeOut+0x70>)
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4290      	cmp	r0, r2
 8003434:	6862      	ldr	r2, [r4, #4]
 8003436:	d001      	beq.n	800343c <xTaskCheckForTimeOut+0x4c>
 8003438:	4291      	cmp	r1, r2
 800343a:	d20d      	bcs.n	8003458 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800343c:	1a88      	subs	r0, r1, r2
 800343e:	4283      	cmp	r3, r0
 8003440:	d90a      	bls.n	8003458 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003442:	1a5b      	subs	r3, r3, r1
 8003444:	4413      	add	r3, r2
 8003446:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003448:	4620      	mov	r0, r4
 800344a:	f7ff ffc1 	bl	80033d0 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800344e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003450:	f7ff f872 	bl	8002538 <vPortExitCritical>
}
 8003454:	4620      	mov	r0, r4
 8003456:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003458:	2401      	movs	r4, #1
 800345a:	e7f9      	b.n	8003450 <xTaskCheckForTimeOut+0x60>
 800345c:	20002340 	.word	0x20002340
 8003460:	200022fc 	.word	0x200022fc

08003464 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003464:	2201      	movs	r2, #1
 8003466:	4b01      	ldr	r3, [pc, #4]	; (800346c <vTaskMissedYield+0x8>)
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	4770      	bx	lr
 800346c:	20002344 	.word	0x20002344

08003470 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <xTaskGetSchedulerState+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b133      	cbz	r3, 8003484 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <xTaskGetSchedulerState+0x1c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800347c:	bf0c      	ite	eq
 800347e:	2002      	moveq	r0, #2
 8003480:	2000      	movne	r0, #0
 8003482:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003484:	2001      	movs	r0, #1
	}
 8003486:	4770      	bx	lr
 8003488:	20002314 	.word	0x20002314
 800348c:	200022c0 	.word	0x200022c0

08003490 <vTaskPriorityInherit>:
	{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003494:	4604      	mov	r4, r0
 8003496:	2800      	cmp	r0, #0
 8003498:	d039      	beq.n	800350e <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800349a:	4d1e      	ldr	r5, [pc, #120]	; (8003514 <vTaskPriorityInherit+0x84>)
 800349c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800349e:	682a      	ldr	r2, [r5, #0]
 80034a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d233      	bcs.n	800350e <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034a6:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034a8:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034aa:	4e1b      	ldr	r6, [pc, #108]	; (8003518 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034ac:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	bfa8      	it	ge
 80034b0:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034b2:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b6:	bfa2      	ittt	ge
 80034b8:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80034ba:	f1c2 0207 	rsbge	r2, r2, #7
 80034be:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034c0:	6942      	ldr	r2, [r0, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d120      	bne.n	8003508 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c6:	f100 0804 	add.w	r8, r0, #4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7fe ffb3 	bl	8002436 <uxListRemove>
 80034d0:	4a12      	ldr	r2, [pc, #72]	; (800351c <vTaskPriorityInherit+0x8c>)
 80034d2:	b948      	cbnz	r0, 80034e8 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80034d6:	4347      	muls	r7, r0
 80034d8:	59f3      	ldr	r3, [r6, r7]
 80034da:	b92b      	cbnz	r3, 80034e8 <vTaskPriorityInherit+0x58>
 80034dc:	2101      	movs	r1, #1
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	4081      	lsls	r1, r0
 80034e2:	ea23 0301 	bic.w	r3, r3, r1
 80034e6:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034e8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80034ea:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80034ee:	2301      	movs	r3, #1
 80034f0:	4083      	lsls	r3, r0
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034f8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80034fa:	4641      	mov	r1, r8
 80034fc:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003504:	f7fe bf74 	b.w	80023f0 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800350e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003512:	bf00      	nop
 8003514:	2000221c 	.word	0x2000221c
 8003518:	20002228 	.word	0x20002228
 800351c:	200022c8 	.word	0x200022c8

08003520 <xTaskPriorityDisinherit>:
	{
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003522:	4604      	mov	r4, r0
 8003524:	b908      	cbnz	r0, 800352a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003526:	2000      	movs	r0, #0
 8003528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <xTaskPriorityDisinherit+0x94>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4298      	cmp	r0, r3
 8003530:	d008      	beq.n	8003544 <xTaskPriorityDisinherit+0x24>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	e7fe      	b.n	8003542 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003544:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003546:	b943      	cbnz	r3, 800355a <xTaskPriorityDisinherit+0x3a>
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	e7fe      	b.n	8003558 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800355a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800355c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800355e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003560:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003562:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003564:	d0df      	beq.n	8003526 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1dd      	bne.n	8003526 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356a:	1d05      	adds	r5, r0, #4
 800356c:	4628      	mov	r0, r5
 800356e:	f7fe ff62 	bl	8002436 <uxListRemove>
 8003572:	4e11      	ldr	r6, [pc, #68]	; (80035b8 <xTaskPriorityDisinherit+0x98>)
 8003574:	4a11      	ldr	r2, [pc, #68]	; (80035bc <xTaskPriorityDisinherit+0x9c>)
 8003576:	b950      	cbnz	r0, 800358e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003578:	2114      	movs	r1, #20
 800357a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800357c:	4379      	muls	r1, r7
 800357e:	5873      	ldr	r3, [r6, r1]
 8003580:	b92b      	cbnz	r3, 800358e <xTaskPriorityDisinherit+0x6e>
 8003582:	2001      	movs	r0, #1
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	40b8      	lsls	r0, r7
 8003588:	ea23 0300 	bic.w	r3, r3, r0
 800358c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800358e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003590:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003594:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003596:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003598:	2401      	movs	r4, #1
 800359a:	6811      	ldr	r1, [r2, #0]
 800359c:	fa04 f003 	lsl.w	r0, r4, r3
 80035a0:	4308      	orrs	r0, r1
 80035a2:	6010      	str	r0, [r2, #0]
 80035a4:	2014      	movs	r0, #20
 80035a6:	4629      	mov	r1, r5
 80035a8:	fb00 6003 	mla	r0, r0, r3, r6
 80035ac:	f7fe ff20 	bl	80023f0 <vListInsertEnd>
					xReturn = pdTRUE;
 80035b0:	4620      	mov	r0, r4
	}
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	2000221c 	.word	0x2000221c
 80035b8:	20002228 	.word	0x20002228
 80035bc:	200022c8 	.word	0x200022c8

080035c0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <pvTaskIncrementMutexHeldCount+0x14>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	b11a      	cbz	r2, 80035ce <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80035ca:	3201      	adds	r2, #1
 80035cc:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80035ce:	6818      	ldr	r0, [r3, #0]
	}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000221c 	.word	0x2000221c

080035d8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80035d8:	b570      	push	{r4, r5, r6, lr}
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80035da:	7a03      	ldrb	r3, [r0, #8]
{
 80035dc:	4604      	mov	r4, r0
	if (options->MQTTVersion == 3)
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d036      	beq.n	8003650 <MQTTSerialize_connectLength+0x78>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf14      	ite	ne
 80035e6:	2500      	movne	r5, #0
 80035e8:	250a      	moveq	r5, #10

	len += MQTTstrlen(options->clientID)+2;
 80035ea:	f104 030c 	add.w	r3, r4, #12
 80035ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035f2:	f000 f94a 	bl	800388a <MQTTstrlen>
	if (options->willFlag)
 80035f6:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 80035f8:	3002      	adds	r0, #2
 80035fa:	4405      	add	r5, r0
	if (options->willFlag)
 80035fc:	b17b      	cbz	r3, 800361e <MQTTSerialize_connectLength+0x46>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80035fe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003606:	f000 f940 	bl	800388a <MQTTstrlen>
 800360a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800360e:	4606      	mov	r6, r0
 8003610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003614:	f000 f939 	bl	800388a <MQTTstrlen>
 8003618:	4430      	add	r0, r6
 800361a:	3004      	adds	r0, #4
 800361c:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 800361e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003620:	b90b      	cbnz	r3, 8003626 <MQTTSerialize_connectLength+0x4e>
 8003622:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003624:	b13b      	cbz	r3, 8003636 <MQTTSerialize_connectLength+0x5e>
		len += MQTTstrlen(options->username)+2;
 8003626:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800362a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800362e:	f000 f92c 	bl	800388a <MQTTstrlen>
 8003632:	3002      	adds	r0, #2
 8003634:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 8003636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003638:	b90b      	cbnz	r3, 800363e <MQTTSerialize_connectLength+0x66>
 800363a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800363c:	b133      	cbz	r3, 800364c <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->password)+2;
 800363e:	344c      	adds	r4, #76	; 0x4c
 8003640:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003644:	f000 f921 	bl	800388a <MQTTstrlen>
 8003648:	3002      	adds	r0, #2
 800364a:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
 800364c:	4628      	mov	r0, r5
 800364e:	bd70      	pop	{r4, r5, r6, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 8003650:	250c      	movs	r5, #12
 8003652:	e7ca      	b.n	80035ea <MQTTSerialize_connectLength+0x12>

08003654 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8003654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003656:	4606      	mov	r6, r0
	unsigned char *ptr = buf;
 8003658:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800365a:	4610      	mov	r0, r2
{
 800365c:	460f      	mov	r7, r1
 800365e:	4614      	mov	r4, r2
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8003660:	f7ff ffba 	bl	80035d8 <MQTTSerialize_connectLength>
 8003664:	4605      	mov	r5, r0
 8003666:	f000 f8af 	bl	80037c8 <MQTTPacket_len>
 800366a:	42b8      	cmp	r0, r7
 800366c:	dc6e      	bgt.n	800374c <MQTTSerialize_connect+0xf8>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
 800366e:	2110      	movs	r1, #16
 8003670:	a801      	add	r0, sp, #4
 8003672:	f000 f8bb 	bl	80037ec <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003676:	4629      	mov	r1, r5
 8003678:	9801      	ldr	r0, [sp, #4]
 800367a:	f000 f88b 	bl	8003794 <MQTTPacket_encode>
 800367e:	9b01      	ldr	r3, [sp, #4]

	if (options->MQTTVersion == 4)
 8003680:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003682:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 8003684:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003686:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 8003688:	d15a      	bne.n	8003740 <MQTTSerialize_connect+0xec>
	{
		writeCString(&ptr, "MQTT");
 800368a:	4932      	ldr	r1, [pc, #200]	; (8003754 <MQTTSerialize_connect+0x100>)
 800368c:	a801      	add	r0, sp, #4
 800368e:	f000 f8c6 	bl	800381e <writeCString>
		writeChar(&ptr, (char) 4);
 8003692:	4629      	mov	r1, r5
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
		writeChar(&ptr, (char) 3);
 8003694:	a801      	add	r0, sp, #4
 8003696:	f000 f8a9 	bl	80037ec <writeChar>
	}

	flags.all = 0;
 800369a:	2100      	movs	r1, #0
	flags.bits.cleansession = options->cleansession;
 800369c:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 800369e:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 80036a2:	f363 0141 	bfi	r1, r3, #1, #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80036a6:	7ee3      	ldrb	r3, [r4, #27]
 80036a8:	3300      	adds	r3, #0
 80036aa:	bf18      	it	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	f363 0182 	bfi	r1, r3, #2, #1
	if (flags.bits.will)
 80036b2:	0748      	lsls	r0, r1, #29
	{
		flags.bits.willQoS = options->will.qos;
 80036b4:	bf41      	itttt	mi
 80036b6:	f894 303d 	ldrbmi.w	r3, [r4, #61]	; 0x3d
 80036ba:	f363 01c4 	bfimi	r1, r3, #3, #2
		flags.bits.willRetain = options->will.retained;
 80036be:	f894 303c 	ldrbmi.w	r3, [r4, #60]	; 0x3c
 80036c2:	f363 1145 	bfimi	r1, r3, #5, #1
	}

	if (options->username.cstring || options->username.lenstring.data)
 80036c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036c8:	b90b      	cbnz	r3, 80036ce <MQTTSerialize_connect+0x7a>
 80036ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036cc:	b10b      	cbz	r3, 80036d2 <MQTTSerialize_connect+0x7e>
		flags.bits.username = 1;
 80036ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 80036d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036d4:	b90b      	cbnz	r3, 80036da <MQTTSerialize_connect+0x86>
 80036d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036d8:	b10b      	cbz	r3, 80036de <MQTTSerialize_connect+0x8a>
		flags.bits.password = 1;
 80036da:	f041 0140 	orr.w	r1, r1, #64	; 0x40

	writeChar(&ptr, flags.all);
 80036de:	b2cd      	uxtb	r5, r1
 80036e0:	4629      	mov	r1, r5
 80036e2:	a801      	add	r0, sp, #4
 80036e4:	f000 f882 	bl	80037ec <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80036e8:	8b21      	ldrh	r1, [r4, #24]
 80036ea:	a801      	add	r0, sp, #4
 80036ec:	f000 f884 	bl	80037f8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80036f0:	f104 030c 	add.w	r3, r4, #12
 80036f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f6:	a801      	add	r0, sp, #4
 80036f8:	f000 f8a5 	bl	8003846 <writeMQTTString>
	if (options->willFlag)
 80036fc:	7ee3      	ldrb	r3, [r4, #27]
 80036fe:	b15b      	cbz	r3, 8003718 <MQTTSerialize_connect+0xc4>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8003700:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003706:	a801      	add	r0, sp, #4
 8003708:	f000 f89d 	bl	8003846 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800370c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003712:	a801      	add	r0, sp, #4
 8003714:	f000 f897 	bl	8003846 <writeMQTTString>
	}
	if (flags.bits.username)
 8003718:	062a      	lsls	r2, r5, #24
 800371a:	d505      	bpl.n	8003728 <MQTTSerialize_connect+0xd4>
		writeMQTTString(&ptr, options->username);
 800371c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003722:	a801      	add	r0, sp, #4
 8003724:	f000 f88f 	bl	8003846 <writeMQTTString>
	if (flags.bits.password)
 8003728:	066b      	lsls	r3, r5, #25
 800372a:	d505      	bpl.n	8003738 <MQTTSerialize_connect+0xe4>
		writeMQTTString(&ptr, options->password);
 800372c:	344c      	adds	r4, #76	; 0x4c
 800372e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003732:	a801      	add	r0, sp, #4
 8003734:	f000 f887 	bl	8003846 <writeMQTTString>

	rc = ptr - buf;
 8003738:	9801      	ldr	r0, [sp, #4]
 800373a:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
 800373c:	b003      	add	sp, #12
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQIsdp");
 8003740:	4905      	ldr	r1, [pc, #20]	; (8003758 <MQTTSerialize_connect+0x104>)
 8003742:	a801      	add	r0, sp, #4
 8003744:	f000 f86b 	bl	800381e <writeCString>
		writeChar(&ptr, (char) 3);
 8003748:	2103      	movs	r1, #3
 800374a:	e7a3      	b.n	8003694 <MQTTSerialize_connect+0x40>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800374c:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8003750:	e7f4      	b.n	800373c <MQTTSerialize_connect+0xe8>
 8003752:	bf00      	nop
 8003754:	08005a2e 	.word	0x08005a2e
 8003758:	08005a33 	.word	0x08005a33

0800375c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800375c:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
 800375e:	2901      	cmp	r1, #1
{
 8003760:	4604      	mov	r4, r0
	MQTTHeader header = {0};
 8003762:	f04f 0300 	mov.w	r3, #0
	unsigned char *ptr = buf;
 8003766:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 8003768:	dd0e      	ble.n	8003788 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 800376a:	f362 1307 	bfi	r3, r2, #4, #4
	writeChar(&ptr, header.byte); /* write header */
 800376e:	4619      	mov	r1, r3
 8003770:	a801      	add	r0, sp, #4
 8003772:	f000 f83b 	bl	80037ec <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8003776:	2100      	movs	r1, #0
 8003778:	9801      	ldr	r0, [sp, #4]
 800377a:	f000 f80b 	bl	8003794 <MQTTPacket_encode>
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	4418      	add	r0, r3
	rc = ptr - buf;
 8003782:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8003784:	b002      	add	sp, #8
 8003786:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003788:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800378c:	e7fa      	b.n	8003784 <MQTTSerialize_zero+0x28>

0800378e <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800378e:	220e      	movs	r2, #14
 8003790:	f7ff bfe4 	b.w	800375c <MQTTSerialize_zero>

08003794 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	1e44      	subs	r4, r0, #1

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
		length /= 128;
 8003798:	2580      	movs	r5, #128	; 0x80
	int rc = 0;
 800379a:	2000      	movs	r0, #0
		char d = length % 128;
 800379c:	424a      	negs	r2, r1
 800379e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
		length /= 128;
 80037a2:	fb91 f1f5 	sdiv	r1, r1, r5
		char d = length % 128;
 80037a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037aa:	bf58      	it	pl
 80037ac:	4253      	negpl	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80037b0:	2900      	cmp	r1, #0
			d |= 0x80;
 80037b2:	bfc8      	it	gt
 80037b4:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
		buf[rc++] = d;
	} while (length > 0);
 80037b8:	2900      	cmp	r1, #0
		buf[rc++] = d;
 80037ba:	f100 0001 	add.w	r0, r0, #1
 80037be:	f804 3f01 	strb.w	r3, [r4, #1]!
	} while (length > 0);
 80037c2:	dceb      	bgt.n	800379c <MQTTPacket_encode+0x8>
	FUNC_EXIT_RC(rc);
	return rc;
}
 80037c4:	bd30      	pop	{r4, r5, pc}
	...

080037c8 <MQTTPacket_len>:
}


int MQTTPacket_len(int rem_len)
{
	rem_len += 1; /* header byte */
 80037c8:	1c43      	adds	r3, r0, #1

	/* now remaining_length field */
	if (rem_len < 128)
 80037ca:	2b7f      	cmp	r3, #127	; 0x7f
 80037cc:	dc01      	bgt.n	80037d2 <MQTTPacket_len+0xa>
		rem_len += 1;
 80037ce:	3002      	adds	r0, #2
 80037d0:	4770      	bx	lr
	else if (rem_len < 16384)
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d6:	da01      	bge.n	80037dc <MQTTPacket_len+0x14>
		rem_len += 2;
 80037d8:	3003      	adds	r0, #3
 80037da:	4770      	bx	lr
	else if (rem_len < 2097151)
 80037dc:	4a02      	ldr	r2, [pc, #8]	; (80037e8 <MQTTPacket_len+0x20>)
 80037de:	4293      	cmp	r3, r2
		rem_len += 3;
 80037e0:	bfd4      	ite	le
 80037e2:	3004      	addle	r0, #4
	else
		rem_len += 4;
 80037e4:	3005      	addgt	r0, #5
	return rem_len;
}
 80037e6:	4770      	bx	lr
 80037e8:	001ffffe 	.word	0x001ffffe

080037ec <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 80037ec:	6803      	ldr	r3, [r0, #0]
 80037ee:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	6003      	str	r3, [r0, #0]
 80037f6:	4770      	bx	lr

080037f8 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 80037f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fc:	fb91 f3f3 	sdiv	r3, r1, r3
 8003800:	6802      	ldr	r2, [r0, #0]
 8003802:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8003804:	6802      	ldr	r2, [r0, #0]
 8003806:	1c53      	adds	r3, r2, #1
 8003808:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 800380a:	424b      	negs	r3, r1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	b2c9      	uxtb	r1, r1
 8003810:	bf58      	it	pl
 8003812:	4259      	negpl	r1, r3
 8003814:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 8003816:	6803      	ldr	r3, [r0, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	6003      	str	r3, [r0, #0]
 800381c:	4770      	bx	lr

0800381e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800381e:	b570      	push	{r4, r5, r6, lr}
 8003820:	4604      	mov	r4, r0
	int len = strlen(string);
 8003822:	4608      	mov	r0, r1
{
 8003824:	460e      	mov	r6, r1
	int len = strlen(string);
 8003826:	f7fc fc93 	bl	8000150 <strlen>
 800382a:	4605      	mov	r5, r0
	writeInt(pptr, len);
 800382c:	4601      	mov	r1, r0
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff ffe2 	bl	80037f8 <writeInt>
	memcpy(*pptr, string, len);
 8003834:	462a      	mov	r2, r5
 8003836:	4631      	mov	r1, r6
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	f000 f8b9 	bl	80039b0 <memcpy>
	*pptr += len;
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	4428      	add	r0, r5
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	bd70      	pop	{r4, r5, r6, pc}

08003846 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8003846:	b530      	push	{r4, r5, lr}
 8003848:	b085      	sub	sp, #20
 800384a:	ac04      	add	r4, sp, #16
 800384c:	e904 000e 	stmdb	r4, {r1, r2, r3}
 8003850:	9c02      	ldr	r4, [sp, #8]
 8003852:	4605      	mov	r5, r0
	if (mqttstring.lenstring.len > 0)
 8003854:	2c00      	cmp	r4, #0
 8003856:	dd0c      	ble.n	8003872 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8003858:	4621      	mov	r1, r4
 800385a:	f7ff ffcd 	bl	80037f8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800385e:	4622      	mov	r2, r4
 8003860:	9903      	ldr	r1, [sp, #12]
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	f000 f8a4 	bl	80039b0 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	441c      	add	r4, r3
 800386c:	602c      	str	r4, [r5, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800386e:	b005      	add	sp, #20
 8003870:	bd30      	pop	{r4, r5, pc}
 8003872:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 8003874:	b121      	cbz	r1, 8003880 <writeMQTTString+0x3a>
}
 8003876:	b005      	add	sp, #20
 8003878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 800387c:	f7ff bfcf 	b.w	800381e <writeCString>
}
 8003880:	b005      	add	sp, #20
 8003882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 8003886:	f7ff bfb7 	b.w	80037f8 <writeInt>

0800388a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800388a:	b084      	sub	sp, #16
 800388c:	ab04      	add	r3, sp, #16
 800388e:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8003892:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 8003894:	b110      	cbz	r0, 800389c <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 8003896:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 8003898:	f7fc bc5a 	b.w	8000150 <strlen>
}
 800389c:	9802      	ldr	r0, [sp, #8]
 800389e:	b004      	add	sp, #16
 80038a0:	4770      	bx	lr

080038a2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80038a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038a4:	4604      	mov	r4, r0
 80038a6:	a801      	add	r0, sp, #4
 80038a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80038ac:	c807      	ldmia	r0, {r0, r1, r2}
 80038ae:	f7ff ffec 	bl	800388a <MQTTstrlen>
 80038b2:	9b06      	ldr	r3, [sp, #24]
 80038b4:	3002      	adds	r0, #2
 80038b6:	4418      	add	r0, r3
	if (qos > 0)
 80038b8:	2c00      	cmp	r4, #0
		len += 2; /* packetid */
 80038ba:	bfc8      	it	gt
 80038bc:	3002      	addgt	r0, #2
	return len;
}
 80038be:	b004      	add	sp, #16
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80038c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c6:	461f      	mov	r7, r3
 80038c8:	b085      	sub	sp, #20
 80038ca:	9e14      	ldr	r6, [sp, #80]	; 0x50
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80038cc:	ac10      	add	r4, sp, #64	; 0x40
 80038ce:	9600      	str	r6, [sp, #0]
{
 80038d0:	468b      	mov	fp, r1
	unsigned char *ptr = buf;
 80038d2:	9003      	str	r0, [sp, #12]
{
 80038d4:	4680      	mov	r8, r0
 80038d6:	4692      	mov	sl, r2
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80038d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038dc:	4638      	mov	r0, r7
 80038de:	f7ff ffe0 	bl	80038a2 <MQTTSerialize_publishLength>
 80038e2:	4681      	mov	r9, r0
 80038e4:	f7ff ff70 	bl	80037c8 <MQTTPacket_len>
 80038e8:	4558      	cmp	r0, fp
	MQTTHeader header = {0};
 80038ea:	f04f 0500 	mov.w	r5, #0
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80038ee:	dc2d      	bgt.n	800394c <MQTTSerialize_publish+0x8a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	f363 1507 	bfi	r5, r3, #4, #4
	header.bits.dup = dup;
 80038f6:	f36a 05c3 	bfi	r5, sl, #3, #1
	header.bits.qos = qos;
	header.bits.retain = retained;
 80038fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	header.bits.qos = qos;
 80038fe:	f367 0542 	bfi	r5, r7, #1, #2
	header.bits.retain = retained;
 8003902:	f363 0500 	bfi	r5, r3, #0, #1
	writeChar(&ptr, header.byte); /* write header */
 8003906:	b2e9      	uxtb	r1, r5
 8003908:	a803      	add	r0, sp, #12
 800390a:	f7ff ff6f 	bl	80037ec <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800390e:	4649      	mov	r1, r9
 8003910:	9803      	ldr	r0, [sp, #12]
 8003912:	f7ff ff3f 	bl	8003794 <MQTTPacket_encode>
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	4418      	add	r0, r3
 800391a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
 800391c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003920:	a803      	add	r0, sp, #12
 8003922:	f7ff ff90 	bl	8003846 <writeMQTTString>

	if (qos > 0)
 8003926:	2f00      	cmp	r7, #0
 8003928:	dd04      	ble.n	8003934 <MQTTSerialize_publish+0x72>
		writeInt(&ptr, packetid);
 800392a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800392e:	a803      	add	r0, sp, #12
 8003930:	f7ff ff62 	bl	80037f8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8003934:	4632      	mov	r2, r6
 8003936:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003938:	9803      	ldr	r0, [sp, #12]
 800393a:	f000 f839 	bl	80039b0 <memcpy>
	ptr += payloadlen;
 800393e:	9803      	ldr	r0, [sp, #12]
 8003940:	4430      	add	r0, r6

	rc = ptr - buf;
 8003942:	eba0 0008 	sub.w	r0, r0, r8

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8003946:	b005      	add	sp, #20
 8003948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800394c:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8003950:	e7f9      	b.n	8003946 <MQTTSerialize_publish+0x84>

08003952 <atoi>:
 8003952:	220a      	movs	r2, #10
 8003954:	2100      	movs	r1, #0
 8003956:	f000 ba57 	b.w	8003e08 <strtol>
	...

0800395c <__errno>:
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <__errno+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2500      	movs	r5, #0
 800396c:	4e0c      	ldr	r6, [pc, #48]	; (80039a0 <__libc_init_array+0x38>)
 800396e:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 8003970:	1ba4      	subs	r4, r4, r6
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	42a5      	cmp	r5, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	f001 fece 	bl	8005718 <_init>
 800397c:	2500      	movs	r5, #0
 800397e:	4e0a      	ldr	r6, [pc, #40]	; (80039a8 <__libc_init_array+0x40>)
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <__libc_init_array+0x44>)
 8003982:	1ba4      	subs	r4, r4, r6
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	42a5      	cmp	r5, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399a:	4798      	blx	r3
 800399c:	3501      	adds	r5, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	08005bfc 	.word	0x08005bfc
 80039a4:	08005bfc 	.word	0x08005bfc
 80039a8:	08005bfc 	.word	0x08005bfc
 80039ac:	08005c00 	.word	0x08005c00

080039b0 <memcpy>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	1e43      	subs	r3, r0, #1
 80039b4:	440a      	add	r2, r1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	d100      	bne.n	80039bc <memcpy+0xc>
 80039ba:	bd10      	pop	{r4, pc}
 80039bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c4:	e7f7      	b.n	80039b6 <memcpy+0x6>

080039c6 <memset>:
 80039c6:	4603      	mov	r3, r0
 80039c8:	4402      	add	r2, r0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d100      	bne.n	80039d0 <memset+0xa>
 80039ce:	4770      	bx	lr
 80039d0:	f803 1b01 	strb.w	r1, [r3], #1
 80039d4:	e7f9      	b.n	80039ca <memset+0x4>
	...

080039d8 <iprintf>:
 80039d8:	b40f      	push	{r0, r1, r2, r3}
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <iprintf+0x2c>)
 80039dc:	b513      	push	{r0, r1, r4, lr}
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	b124      	cbz	r4, 80039ec <iprintf+0x14>
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	b913      	cbnz	r3, 80039ec <iprintf+0x14>
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 fbf8 	bl	80041dc <__sinit>
 80039ec:	ab05      	add	r3, sp, #20
 80039ee:	9a04      	ldr	r2, [sp, #16]
 80039f0:	68a1      	ldr	r1, [r4, #8]
 80039f2:	4620      	mov	r0, r4
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	f001 f8e5 	bl	8004bc4 <_vfiprintf_r>
 80039fa:	b002      	add	sp, #8
 80039fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a00:	b004      	add	sp, #16
 8003a02:	4770      	bx	lr
 8003a04:	2000000c 	.word	0x2000000c

08003a08 <_puts_r>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	460e      	mov	r6, r1
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	b118      	cbz	r0, 8003a18 <_puts_r+0x10>
 8003a10:	6983      	ldr	r3, [r0, #24]
 8003a12:	b90b      	cbnz	r3, 8003a18 <_puts_r+0x10>
 8003a14:	f000 fbe2 	bl	80041dc <__sinit>
 8003a18:	69ab      	ldr	r3, [r5, #24]
 8003a1a:	68ac      	ldr	r4, [r5, #8]
 8003a1c:	b913      	cbnz	r3, 8003a24 <_puts_r+0x1c>
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 fbdc 	bl	80041dc <__sinit>
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <_puts_r+0xac>)
 8003a26:	429c      	cmp	r4, r3
 8003a28:	d117      	bne.n	8003a5a <_puts_r+0x52>
 8003a2a:	686c      	ldr	r4, [r5, #4]
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	071b      	lsls	r3, r3, #28
 8003a30:	d51d      	bpl.n	8003a6e <_puts_r+0x66>
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	b1db      	cbz	r3, 8003a6e <_puts_r+0x66>
 8003a36:	3e01      	subs	r6, #1
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60a3      	str	r3, [r4, #8]
 8003a42:	b9e9      	cbnz	r1, 8003a80 <_puts_r+0x78>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da2e      	bge.n	8003aa6 <_puts_r+0x9e>
 8003a48:	4622      	mov	r2, r4
 8003a4a:	210a      	movs	r1, #10
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 f9f1 	bl	8003e34 <__swbuf_r>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d011      	beq.n	8003a7a <_puts_r+0x72>
 8003a56:	200a      	movs	r0, #10
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <_puts_r+0xb0>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d101      	bne.n	8003a64 <_puts_r+0x5c>
 8003a60:	68ac      	ldr	r4, [r5, #8]
 8003a62:	e7e3      	b.n	8003a2c <_puts_r+0x24>
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <_puts_r+0xb4>)
 8003a66:	429c      	cmp	r4, r3
 8003a68:	bf08      	it	eq
 8003a6a:	68ec      	ldreq	r4, [r5, #12]
 8003a6c:	e7de      	b.n	8003a2c <_puts_r+0x24>
 8003a6e:	4621      	mov	r1, r4
 8003a70:	4628      	mov	r0, r5
 8003a72:	f000 fa43 	bl	8003efc <__swsetup_r>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0dd      	beq.n	8003a36 <_puts_r+0x2e>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	da04      	bge.n	8003a8e <_puts_r+0x86>
 8003a84:	69a2      	ldr	r2, [r4, #24]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	db06      	blt.n	8003a98 <_puts_r+0x90>
 8003a8a:	290a      	cmp	r1, #10
 8003a8c:	d004      	beq.n	8003a98 <_puts_r+0x90>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	7019      	strb	r1, [r3, #0]
 8003a96:	e7cf      	b.n	8003a38 <_puts_r+0x30>
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 f9ca 	bl	8003e34 <__swbuf_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d1c9      	bne.n	8003a38 <_puts_r+0x30>
 8003aa4:	e7e9      	b.n	8003a7a <_puts_r+0x72>
 8003aa6:	200a      	movs	r0, #10
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	6022      	str	r2, [r4, #0]
 8003aae:	7018      	strb	r0, [r3, #0]
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08005a60 	.word	0x08005a60
 8003ab8:	08005a80 	.word	0x08005a80
 8003abc:	08005a40 	.word	0x08005a40

08003ac0 <puts>:
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <puts+0xc>)
 8003ac2:	4601      	mov	r1, r0
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	f7ff bf9f 	b.w	8003a08 <_puts_r>
 8003aca:	bf00      	nop
 8003acc:	2000000c 	.word	0x2000000c

08003ad0 <siprintf>:
 8003ad0:	b40e      	push	{r1, r2, r3}
 8003ad2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003ad6:	b500      	push	{lr}
 8003ad8:	b09c      	sub	sp, #112	; 0x70
 8003ada:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ae2:	9104      	str	r1, [sp, #16]
 8003ae4:	9107      	str	r1, [sp, #28]
 8003ae6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003aea:	ab1d      	add	r3, sp, #116	; 0x74
 8003aec:	9002      	str	r0, [sp, #8]
 8003aee:	9006      	str	r0, [sp, #24]
 8003af0:	4808      	ldr	r0, [pc, #32]	; (8003b14 <siprintf+0x44>)
 8003af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003af6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	a902      	add	r1, sp, #8
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f000 fd96 	bl	8004630 <_svfiprintf_r>
 8003b04:	2200      	movs	r2, #0
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	b01c      	add	sp, #112	; 0x70
 8003b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b10:	b003      	add	sp, #12
 8003b12:	4770      	bx	lr
 8003b14:	2000000c 	.word	0x2000000c

08003b18 <siscanf>:
 8003b18:	b40e      	push	{r1, r2, r3}
 8003b1a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003b1e:	b530      	push	{r4, r5, lr}
 8003b20:	b09c      	sub	sp, #112	; 0x70
 8003b22:	ac1f      	add	r4, sp, #124	; 0x7c
 8003b24:	f854 5b04 	ldr.w	r5, [r4], #4
 8003b28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	9006      	str	r0, [sp, #24]
 8003b30:	f7fc fb0e 	bl	8000150 <strlen>
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <siscanf+0x4c>)
 8003b36:	9003      	str	r0, [sp, #12]
 8003b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b3e:	9314      	str	r3, [sp, #80]	; 0x50
 8003b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b44:	9007      	str	r0, [sp, #28]
 8003b46:	4808      	ldr	r0, [pc, #32]	; (8003b68 <siscanf+0x50>)
 8003b48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4623      	mov	r3, r4
 8003b50:	a902      	add	r1, sp, #8
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	9401      	str	r4, [sp, #4]
 8003b56:	f000 feb9 	bl	80048cc <__ssvfiscanf_r>
 8003b5a:	b01c      	add	sp, #112	; 0x70
 8003b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b60:	b003      	add	sp, #12
 8003b62:	4770      	bx	lr
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <__sread>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	460c      	mov	r4, r1
 8003b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b74:	f001 fc2e 	bl	80053d4 <_read_r>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	bfab      	itete	ge
 8003b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b80:	181b      	addge	r3, r3, r0
 8003b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b86:	bfac      	ite	ge
 8003b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b8a:	81a3      	strhlt	r3, [r4, #12]
 8003b8c:	bd10      	pop	{r4, pc}

08003b8e <__seofread>:
 8003b8e:	2000      	movs	r0, #0
 8003b90:	4770      	bx	lr

08003b92 <__swrite>:
 8003b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b96:	461f      	mov	r7, r3
 8003b98:	898b      	ldrh	r3, [r1, #12]
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	05db      	lsls	r3, r3, #23
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	d505      	bpl.n	8003bb0 <__swrite+0x1e>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bac:	f000 fbb2 	bl	8004314 <_lseek_r>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	4632      	mov	r2, r6
 8003bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc6:	f000 b987 	b.w	8003ed8 <_write_r>

08003bca <__sseek>:
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	460c      	mov	r4, r1
 8003bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd2:	f000 fb9f 	bl	8004314 <_lseek_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	bf15      	itete	ne
 8003bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003be6:	81a3      	strheq	r3, [r4, #12]
 8003be8:	bf18      	it	ne
 8003bea:	81a3      	strhne	r3, [r4, #12]
 8003bec:	bd10      	pop	{r4, pc}

08003bee <__sclose>:
 8003bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf2:	f000 b9f1 	b.w	8003fd8 <_close_r>

08003bf6 <strcpy>:
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bfc:	f803 2b01 	strb.w	r2, [r3], #1
 8003c00:	2a00      	cmp	r2, #0
 8003c02:	d1f9      	bne.n	8003bf8 <strcpy+0x2>
 8003c04:	4770      	bx	lr

08003c06 <strstr>:
 8003c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c08:	7803      	ldrb	r3, [r0, #0]
 8003c0a:	b133      	cbz	r3, 8003c1a <strstr+0x14>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	1c5e      	adds	r6, r3, #1
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b933      	cbnz	r3, 8003c24 <strstr+0x1e>
 8003c16:	4618      	mov	r0, r3
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1a:	780b      	ldrb	r3, [r1, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf18      	it	ne
 8003c20:	2000      	movne	r0, #0
 8003c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c24:	1e4d      	subs	r5, r1, #1
 8003c26:	1e44      	subs	r4, r0, #1
 8003c28:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d0f3      	beq.n	8003c18 <strstr+0x12>
 8003c30:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003c34:	4633      	mov	r3, r6
 8003c36:	4297      	cmp	r7, r2
 8003c38:	d0f6      	beq.n	8003c28 <strstr+0x22>
 8003c3a:	e7e8      	b.n	8003c0e <strstr+0x8>

08003c3c <strtok>:
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <strtok+0x50>)
 8003c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c42:	681d      	ldr	r5, [r3, #0]
 8003c44:	4606      	mov	r6, r0
 8003c46:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003c48:	460f      	mov	r7, r1
 8003c4a:	b9b4      	cbnz	r4, 8003c7a <strtok+0x3e>
 8003c4c:	2050      	movs	r0, #80	; 0x50
 8003c4e:	f7fd fe23 	bl	8001898 <malloc>
 8003c52:	65a8      	str	r0, [r5, #88]	; 0x58
 8003c54:	6004      	str	r4, [r0, #0]
 8003c56:	6044      	str	r4, [r0, #4]
 8003c58:	6084      	str	r4, [r0, #8]
 8003c5a:	60c4      	str	r4, [r0, #12]
 8003c5c:	6104      	str	r4, [r0, #16]
 8003c5e:	6144      	str	r4, [r0, #20]
 8003c60:	6184      	str	r4, [r0, #24]
 8003c62:	6284      	str	r4, [r0, #40]	; 0x28
 8003c64:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003c66:	6304      	str	r4, [r0, #48]	; 0x30
 8003c68:	6344      	str	r4, [r0, #52]	; 0x34
 8003c6a:	6384      	str	r4, [r0, #56]	; 0x38
 8003c6c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003c6e:	6404      	str	r4, [r0, #64]	; 0x40
 8003c70:	6444      	str	r4, [r0, #68]	; 0x44
 8003c72:	6484      	str	r4, [r0, #72]	; 0x48
 8003c74:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003c76:	7704      	strb	r4, [r0, #28]
 8003c78:	6244      	str	r4, [r0, #36]	; 0x24
 8003c7a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003c7c:	4639      	mov	r1, r7
 8003c7e:	4630      	mov	r0, r6
 8003c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c84:	2301      	movs	r3, #1
 8003c86:	f000 b803 	b.w	8003c90 <__strtok_r>
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <__strtok_r>:
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	b918      	cbnz	r0, 8003c9c <__strtok_r+0xc>
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	b908      	cbnz	r0, 8003c9c <__strtok_r+0xc>
 8003c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ca4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ca8:	b91e      	cbnz	r6, 8003cb2 <__strtok_r+0x22>
 8003caa:	b965      	cbnz	r5, 8003cc6 <__strtok_r+0x36>
 8003cac:	6015      	str	r5, [r2, #0]
 8003cae:	4628      	mov	r0, r5
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	42b5      	cmp	r5, r6
 8003cb4:	d1f6      	bne.n	8003ca4 <__strtok_r+0x14>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ef      	bne.n	8003c9a <__strtok_r+0xa>
 8003cba:	6014      	str	r4, [r2, #0]
 8003cbc:	7003      	strb	r3, [r0, #0]
 8003cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc0:	461c      	mov	r4, r3
 8003cc2:	e00c      	b.n	8003cde <__strtok_r+0x4e>
 8003cc4:	b915      	cbnz	r5, 8003ccc <__strtok_r+0x3c>
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ccc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	d1f7      	bne.n	8003cc4 <__strtok_r+0x34>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f3      	beq.n	8003cc0 <__strtok_r+0x30>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003cde:	6014      	str	r4, [r2, #0]
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ce2 <_strtol_l.isra.0>:
 8003ce2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce6:	4680      	mov	r8, r0
 8003ce8:	4689      	mov	r9, r1
 8003cea:	4692      	mov	sl, r2
 8003cec:	461f      	mov	r7, r3
 8003cee:	468b      	mov	fp, r1
 8003cf0:	465d      	mov	r5, fp
 8003cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cf8:	f000 fafa 	bl	80042f0 <__locale_ctype_ptr_l>
 8003cfc:	4420      	add	r0, r4
 8003cfe:	7846      	ldrb	r6, [r0, #1]
 8003d00:	f016 0608 	ands.w	r6, r6, #8
 8003d04:	d10b      	bne.n	8003d1e <_strtol_l.isra.0+0x3c>
 8003d06:	2c2d      	cmp	r4, #45	; 0x2d
 8003d08:	d10b      	bne.n	8003d22 <_strtol_l.isra.0+0x40>
 8003d0a:	2601      	movs	r6, #1
 8003d0c:	782c      	ldrb	r4, [r5, #0]
 8003d0e:	f10b 0502 	add.w	r5, fp, #2
 8003d12:	b167      	cbz	r7, 8003d2e <_strtol_l.isra.0+0x4c>
 8003d14:	2f10      	cmp	r7, #16
 8003d16:	d114      	bne.n	8003d42 <_strtol_l.isra.0+0x60>
 8003d18:	2c30      	cmp	r4, #48	; 0x30
 8003d1a:	d00a      	beq.n	8003d32 <_strtol_l.isra.0+0x50>
 8003d1c:	e011      	b.n	8003d42 <_strtol_l.isra.0+0x60>
 8003d1e:	46ab      	mov	fp, r5
 8003d20:	e7e6      	b.n	8003cf0 <_strtol_l.isra.0+0xe>
 8003d22:	2c2b      	cmp	r4, #43	; 0x2b
 8003d24:	bf04      	itt	eq
 8003d26:	782c      	ldrbeq	r4, [r5, #0]
 8003d28:	f10b 0502 	addeq.w	r5, fp, #2
 8003d2c:	e7f1      	b.n	8003d12 <_strtol_l.isra.0+0x30>
 8003d2e:	2c30      	cmp	r4, #48	; 0x30
 8003d30:	d127      	bne.n	8003d82 <_strtol_l.isra.0+0xa0>
 8003d32:	782b      	ldrb	r3, [r5, #0]
 8003d34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003d38:	2b58      	cmp	r3, #88	; 0x58
 8003d3a:	d14b      	bne.n	8003dd4 <_strtol_l.isra.0+0xf2>
 8003d3c:	2710      	movs	r7, #16
 8003d3e:	786c      	ldrb	r4, [r5, #1]
 8003d40:	3502      	adds	r5, #2
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	bf0c      	ite	eq
 8003d46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003d4a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003d4e:	2200      	movs	r2, #0
 8003d50:	fbb1 fef7 	udiv	lr, r1, r7
 8003d54:	4610      	mov	r0, r2
 8003d56:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003d5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d811      	bhi.n	8003d86 <_strtol_l.isra.0+0xa4>
 8003d62:	461c      	mov	r4, r3
 8003d64:	42a7      	cmp	r7, r4
 8003d66:	dd1d      	ble.n	8003da4 <_strtol_l.isra.0+0xc2>
 8003d68:	1c53      	adds	r3, r2, #1
 8003d6a:	d007      	beq.n	8003d7c <_strtol_l.isra.0+0x9a>
 8003d6c:	4586      	cmp	lr, r0
 8003d6e:	d316      	bcc.n	8003d9e <_strtol_l.isra.0+0xbc>
 8003d70:	d101      	bne.n	8003d76 <_strtol_l.isra.0+0x94>
 8003d72:	45a4      	cmp	ip, r4
 8003d74:	db13      	blt.n	8003d9e <_strtol_l.isra.0+0xbc>
 8003d76:	2201      	movs	r2, #1
 8003d78:	fb00 4007 	mla	r0, r0, r7, r4
 8003d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d80:	e7eb      	b.n	8003d5a <_strtol_l.isra.0+0x78>
 8003d82:	270a      	movs	r7, #10
 8003d84:	e7dd      	b.n	8003d42 <_strtol_l.isra.0+0x60>
 8003d86:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003d8a:	2b19      	cmp	r3, #25
 8003d8c:	d801      	bhi.n	8003d92 <_strtol_l.isra.0+0xb0>
 8003d8e:	3c37      	subs	r4, #55	; 0x37
 8003d90:	e7e8      	b.n	8003d64 <_strtol_l.isra.0+0x82>
 8003d92:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003d96:	2b19      	cmp	r3, #25
 8003d98:	d804      	bhi.n	8003da4 <_strtol_l.isra.0+0xc2>
 8003d9a:	3c57      	subs	r4, #87	; 0x57
 8003d9c:	e7e2      	b.n	8003d64 <_strtol_l.isra.0+0x82>
 8003d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003da2:	e7eb      	b.n	8003d7c <_strtol_l.isra.0+0x9a>
 8003da4:	1c53      	adds	r3, r2, #1
 8003da6:	d108      	bne.n	8003dba <_strtol_l.isra.0+0xd8>
 8003da8:	2322      	movs	r3, #34	; 0x22
 8003daa:	4608      	mov	r0, r1
 8003dac:	f8c8 3000 	str.w	r3, [r8]
 8003db0:	f1ba 0f00 	cmp.w	sl, #0
 8003db4:	d107      	bne.n	8003dc6 <_strtol_l.isra.0+0xe4>
 8003db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	b106      	cbz	r6, 8003dbe <_strtol_l.isra.0+0xdc>
 8003dbc:	4240      	negs	r0, r0
 8003dbe:	f1ba 0f00 	cmp.w	sl, #0
 8003dc2:	d00c      	beq.n	8003dde <_strtol_l.isra.0+0xfc>
 8003dc4:	b122      	cbz	r2, 8003dd0 <_strtol_l.isra.0+0xee>
 8003dc6:	3d01      	subs	r5, #1
 8003dc8:	f8ca 5000 	str.w	r5, [sl]
 8003dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	464d      	mov	r5, r9
 8003dd2:	e7f9      	b.n	8003dc8 <_strtol_l.isra.0+0xe6>
 8003dd4:	2430      	movs	r4, #48	; 0x30
 8003dd6:	2f00      	cmp	r7, #0
 8003dd8:	d1b3      	bne.n	8003d42 <_strtol_l.isra.0+0x60>
 8003dda:	2708      	movs	r7, #8
 8003ddc:	e7b1      	b.n	8003d42 <_strtol_l.isra.0+0x60>
 8003dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003de4 <_strtol_r>:
 8003de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003de6:	4c06      	ldr	r4, [pc, #24]	; (8003e00 <_strtol_r+0x1c>)
 8003de8:	4d06      	ldr	r5, [pc, #24]	; (8003e04 <_strtol_r+0x20>)
 8003dea:	6824      	ldr	r4, [r4, #0]
 8003dec:	6a24      	ldr	r4, [r4, #32]
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	bf08      	it	eq
 8003df2:	462c      	moveq	r4, r5
 8003df4:	9400      	str	r4, [sp, #0]
 8003df6:	f7ff ff74 	bl	8003ce2 <_strtol_l.isra.0>
 8003dfa:	b003      	add	sp, #12
 8003dfc:	bd30      	pop	{r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c
 8003e04:	20000070 	.word	0x20000070

08003e08 <strtol>:
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <strtol+0x24>)
 8003e0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e0c:	681c      	ldr	r4, [r3, #0]
 8003e0e:	4d08      	ldr	r5, [pc, #32]	; (8003e30 <strtol+0x28>)
 8003e10:	6a23      	ldr	r3, [r4, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf08      	it	eq
 8003e16:	462b      	moveq	r3, r5
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	4601      	mov	r1, r0
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff ff5e 	bl	8003ce2 <_strtol_l.isra.0>
 8003e26:	b003      	add	sp, #12
 8003e28:	bd30      	pop	{r4, r5, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	20000070 	.word	0x20000070

08003e34 <__swbuf_r>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	460e      	mov	r6, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	b118      	cbz	r0, 8003e46 <__swbuf_r+0x12>
 8003e3e:	6983      	ldr	r3, [r0, #24]
 8003e40:	b90b      	cbnz	r3, 8003e46 <__swbuf_r+0x12>
 8003e42:	f000 f9cb 	bl	80041dc <__sinit>
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <__swbuf_r+0x98>)
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	d12a      	bne.n	8003ea2 <__swbuf_r+0x6e>
 8003e4c:	686c      	ldr	r4, [r5, #4]
 8003e4e:	69a3      	ldr	r3, [r4, #24]
 8003e50:	60a3      	str	r3, [r4, #8]
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	071a      	lsls	r2, r3, #28
 8003e56:	d52e      	bpl.n	8003eb6 <__swbuf_r+0x82>
 8003e58:	6923      	ldr	r3, [r4, #16]
 8003e5a:	b363      	cbz	r3, 8003eb6 <__swbuf_r+0x82>
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	b2f6      	uxtb	r6, r6
 8003e62:	1ac0      	subs	r0, r0, r3
 8003e64:	6963      	ldr	r3, [r4, #20]
 8003e66:	4637      	mov	r7, r6
 8003e68:	4298      	cmp	r0, r3
 8003e6a:	db04      	blt.n	8003e76 <__swbuf_r+0x42>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f94a 	bl	8004108 <_fflush_r>
 8003e74:	bb28      	cbnz	r0, 8003ec2 <__swbuf_r+0x8e>
 8003e76:	68a3      	ldr	r3, [r4, #8]
 8003e78:	3001      	adds	r0, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60a3      	str	r3, [r4, #8]
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	6022      	str	r2, [r4, #0]
 8003e84:	701e      	strb	r6, [r3, #0]
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	d004      	beq.n	8003e96 <__swbuf_r+0x62>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	07db      	lsls	r3, r3, #31
 8003e90:	d519      	bpl.n	8003ec6 <__swbuf_r+0x92>
 8003e92:	2e0a      	cmp	r6, #10
 8003e94:	d117      	bne.n	8003ec6 <__swbuf_r+0x92>
 8003e96:	4621      	mov	r1, r4
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f000 f935 	bl	8004108 <_fflush_r>
 8003e9e:	b190      	cbz	r0, 8003ec6 <__swbuf_r+0x92>
 8003ea0:	e00f      	b.n	8003ec2 <__swbuf_r+0x8e>
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <__swbuf_r+0x9c>)
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	d101      	bne.n	8003eac <__swbuf_r+0x78>
 8003ea8:	68ac      	ldr	r4, [r5, #8]
 8003eaa:	e7d0      	b.n	8003e4e <__swbuf_r+0x1a>
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <__swbuf_r+0xa0>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	bf08      	it	eq
 8003eb2:	68ec      	ldreq	r4, [r5, #12]
 8003eb4:	e7cb      	b.n	8003e4e <__swbuf_r+0x1a>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f81f 	bl	8003efc <__swsetup_r>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d0cc      	beq.n	8003e5c <__swbuf_r+0x28>
 8003ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08005a60 	.word	0x08005a60
 8003ed0:	08005a80 	.word	0x08005a80
 8003ed4:	08005a40 	.word	0x08005a40

08003ed8 <_write_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4605      	mov	r5, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4c05      	ldr	r4, [pc, #20]	; (8003ef8 <_write_r+0x20>)
 8003ee4:	6022      	str	r2, [r4, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7fc f96d 	bl	80001c6 <_write>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_write_r+0x1e>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_write_r+0x1e>
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	2000290c 	.word	0x2000290c

08003efc <__swsetup_r>:
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <__swsetup_r+0xcc>)
 8003efe:	b570      	push	{r4, r5, r6, lr}
 8003f00:	681d      	ldr	r5, [r3, #0]
 8003f02:	4606      	mov	r6, r0
 8003f04:	460c      	mov	r4, r1
 8003f06:	b125      	cbz	r5, 8003f12 <__swsetup_r+0x16>
 8003f08:	69ab      	ldr	r3, [r5, #24]
 8003f0a:	b913      	cbnz	r3, 8003f12 <__swsetup_r+0x16>
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f965 	bl	80041dc <__sinit>
 8003f12:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <__swsetup_r+0xd0>)
 8003f14:	429c      	cmp	r4, r3
 8003f16:	d10f      	bne.n	8003f38 <__swsetup_r+0x3c>
 8003f18:	686c      	ldr	r4, [r5, #4]
 8003f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	0715      	lsls	r5, r2, #28
 8003f22:	d42c      	bmi.n	8003f7e <__swsetup_r+0x82>
 8003f24:	06d0      	lsls	r0, r2, #27
 8003f26:	d411      	bmi.n	8003f4c <__swsetup_r+0x50>
 8003f28:	2209      	movs	r2, #9
 8003f2a:	6032      	str	r2, [r6, #0]
 8003f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f30:	81a3      	strh	r3, [r4, #12]
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <__swsetup_r+0xd4>)
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	d101      	bne.n	8003f42 <__swsetup_r+0x46>
 8003f3e:	68ac      	ldr	r4, [r5, #8]
 8003f40:	e7eb      	b.n	8003f1a <__swsetup_r+0x1e>
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <__swsetup_r+0xd8>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	bf08      	it	eq
 8003f48:	68ec      	ldreq	r4, [r5, #12]
 8003f4a:	e7e6      	b.n	8003f1a <__swsetup_r+0x1e>
 8003f4c:	0751      	lsls	r1, r2, #29
 8003f4e:	d512      	bpl.n	8003f76 <__swsetup_r+0x7a>
 8003f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f52:	b141      	cbz	r1, 8003f66 <__swsetup_r+0x6a>
 8003f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	d002      	beq.n	8003f62 <__swsetup_r+0x66>
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	f000 fa61 	bl	8004424 <_free_r>
 8003f62:	2300      	movs	r3, #0
 8003f64:	6363      	str	r3, [r4, #52]	; 0x34
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6063      	str	r3, [r4, #4]
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	b94b      	cbnz	r3, 8003f96 <__swsetup_r+0x9a>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d003      	beq.n	8003f96 <__swsetup_r+0x9a>
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 f9f5 	bl	8004380 <__smakebuf_r>
 8003f96:	89a2      	ldrh	r2, [r4, #12]
 8003f98:	f012 0301 	ands.w	r3, r2, #1
 8003f9c:	d00c      	beq.n	8003fb8 <__swsetup_r+0xbc>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	6963      	ldr	r3, [r4, #20]
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	61a3      	str	r3, [r4, #24]
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	b953      	cbnz	r3, 8003fc2 <__swsetup_r+0xc6>
 8003fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003fb4:	d1ba      	bne.n	8003f2c <__swsetup_r+0x30>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	0792      	lsls	r2, r2, #30
 8003fba:	bf58      	it	pl
 8003fbc:	6963      	ldrpl	r3, [r4, #20]
 8003fbe:	60a3      	str	r3, [r4, #8]
 8003fc0:	e7f2      	b.n	8003fa8 <__swsetup_r+0xac>
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	e7f7      	b.n	8003fb6 <__swsetup_r+0xba>
 8003fc6:	bf00      	nop
 8003fc8:	2000000c 	.word	0x2000000c
 8003fcc:	08005a60 	.word	0x08005a60
 8003fd0:	08005a80 	.word	0x08005a80
 8003fd4:	08005a40 	.word	0x08005a40

08003fd8 <_close_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4c05      	ldr	r4, [pc, #20]	; (8003ff4 <_close_r+0x1c>)
 8003fde:	4605      	mov	r5, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	f7fc f918 	bl	8000218 <_close>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_close_r+0x1a>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_close_r+0x1a>
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	2000290c 	.word	0x2000290c

08003ff8 <__sflush_r>:
 8003ff8:	898a      	ldrh	r2, [r1, #12]
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	0710      	lsls	r0, r2, #28
 8004002:	460c      	mov	r4, r1
 8004004:	d45a      	bmi.n	80040bc <__sflush_r+0xc4>
 8004006:	684b      	ldr	r3, [r1, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dc05      	bgt.n	8004018 <__sflush_r+0x20>
 800400c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	dc02      	bgt.n	8004018 <__sflush_r+0x20>
 8004012:	2000      	movs	r0, #0
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401a:	2e00      	cmp	r6, #0
 800401c:	d0f9      	beq.n	8004012 <__sflush_r+0x1a>
 800401e:	2300      	movs	r3, #0
 8004020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004024:	682f      	ldr	r7, [r5, #0]
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	d033      	beq.n	8004092 <__sflush_r+0x9a>
 800402a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	075a      	lsls	r2, r3, #29
 8004030:	d505      	bpl.n	800403e <__sflush_r+0x46>
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	1ac0      	subs	r0, r0, r3
 8004036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004038:	b10b      	cbz	r3, 800403e <__sflush_r+0x46>
 800403a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800403c:	1ac0      	subs	r0, r0, r3
 800403e:	2300      	movs	r3, #0
 8004040:	4602      	mov	r2, r0
 8004042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004044:	6a21      	ldr	r1, [r4, #32]
 8004046:	4628      	mov	r0, r5
 8004048:	47b0      	blx	r6
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	d106      	bne.n	800405e <__sflush_r+0x66>
 8004050:	6829      	ldr	r1, [r5, #0]
 8004052:	291d      	cmp	r1, #29
 8004054:	d84b      	bhi.n	80040ee <__sflush_r+0xf6>
 8004056:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <__sflush_r+0x10c>)
 8004058:	40ca      	lsrs	r2, r1
 800405a:	07d6      	lsls	r6, r2, #31
 800405c:	d547      	bpl.n	80040ee <__sflush_r+0xf6>
 800405e:	2200      	movs	r2, #0
 8004060:	6062      	str	r2, [r4, #4]
 8004062:	6922      	ldr	r2, [r4, #16]
 8004064:	04d9      	lsls	r1, r3, #19
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	d504      	bpl.n	8004074 <__sflush_r+0x7c>
 800406a:	1c42      	adds	r2, r0, #1
 800406c:	d101      	bne.n	8004072 <__sflush_r+0x7a>
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	b903      	cbnz	r3, 8004074 <__sflush_r+0x7c>
 8004072:	6560      	str	r0, [r4, #84]	; 0x54
 8004074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004076:	602f      	str	r7, [r5, #0]
 8004078:	2900      	cmp	r1, #0
 800407a:	d0ca      	beq.n	8004012 <__sflush_r+0x1a>
 800407c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <__sflush_r+0x92>
 8004084:	4628      	mov	r0, r5
 8004086:	f000 f9cd 	bl	8004424 <_free_r>
 800408a:	2000      	movs	r0, #0
 800408c:	6360      	str	r0, [r4, #52]	; 0x34
 800408e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004092:	6a21      	ldr	r1, [r4, #32]
 8004094:	2301      	movs	r3, #1
 8004096:	4628      	mov	r0, r5
 8004098:	47b0      	blx	r6
 800409a:	1c41      	adds	r1, r0, #1
 800409c:	d1c6      	bne.n	800402c <__sflush_r+0x34>
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0c3      	beq.n	800402c <__sflush_r+0x34>
 80040a4:	2b1d      	cmp	r3, #29
 80040a6:	d001      	beq.n	80040ac <__sflush_r+0xb4>
 80040a8:	2b16      	cmp	r3, #22
 80040aa:	d101      	bne.n	80040b0 <__sflush_r+0xb8>
 80040ac:	602f      	str	r7, [r5, #0]
 80040ae:	e7b0      	b.n	8004012 <__sflush_r+0x1a>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040bc:	690f      	ldr	r7, [r1, #16]
 80040be:	2f00      	cmp	r7, #0
 80040c0:	d0a7      	beq.n	8004012 <__sflush_r+0x1a>
 80040c2:	0793      	lsls	r3, r2, #30
 80040c4:	bf18      	it	ne
 80040c6:	2300      	movne	r3, #0
 80040c8:	680e      	ldr	r6, [r1, #0]
 80040ca:	bf08      	it	eq
 80040cc:	694b      	ldreq	r3, [r1, #20]
 80040ce:	eba6 0807 	sub.w	r8, r6, r7
 80040d2:	600f      	str	r7, [r1, #0]
 80040d4:	608b      	str	r3, [r1, #8]
 80040d6:	f1b8 0f00 	cmp.w	r8, #0
 80040da:	dd9a      	ble.n	8004012 <__sflush_r+0x1a>
 80040dc:	4643      	mov	r3, r8
 80040de:	463a      	mov	r2, r7
 80040e0:	6a21      	ldr	r1, [r4, #32]
 80040e2:	4628      	mov	r0, r5
 80040e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040e6:	47b0      	blx	r6
 80040e8:	2800      	cmp	r0, #0
 80040ea:	dc07      	bgt.n	80040fc <__sflush_r+0x104>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fc:	4407      	add	r7, r0
 80040fe:	eba8 0800 	sub.w	r8, r8, r0
 8004102:	e7e8      	b.n	80040d6 <__sflush_r+0xde>
 8004104:	20400001 	.word	0x20400001

08004108 <_fflush_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4605      	mov	r5, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b1db      	cbz	r3, 800414a <_fflush_r+0x42>
 8004112:	b118      	cbz	r0, 800411c <_fflush_r+0x14>
 8004114:	6983      	ldr	r3, [r0, #24]
 8004116:	b90b      	cbnz	r3, 800411c <_fflush_r+0x14>
 8004118:	f000 f860 	bl	80041dc <__sinit>
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <_fflush_r+0x48>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d109      	bne.n	8004136 <_fflush_r+0x2e>
 8004122:	686c      	ldr	r4, [r5, #4]
 8004124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004128:	b17b      	cbz	r3, 800414a <_fflush_r+0x42>
 800412a:	4621      	mov	r1, r4
 800412c:	4628      	mov	r0, r5
 800412e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004132:	f7ff bf61 	b.w	8003ff8 <__sflush_r>
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <_fflush_r+0x4c>)
 8004138:	429c      	cmp	r4, r3
 800413a:	d101      	bne.n	8004140 <_fflush_r+0x38>
 800413c:	68ac      	ldr	r4, [r5, #8]
 800413e:	e7f1      	b.n	8004124 <_fflush_r+0x1c>
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <_fflush_r+0x50>)
 8004142:	429c      	cmp	r4, r3
 8004144:	bf08      	it	eq
 8004146:	68ec      	ldreq	r4, [r5, #12]
 8004148:	e7ec      	b.n	8004124 <_fflush_r+0x1c>
 800414a:	2000      	movs	r0, #0
 800414c:	bd38      	pop	{r3, r4, r5, pc}
 800414e:	bf00      	nop
 8004150:	08005a60 	.word	0x08005a60
 8004154:	08005a80 	.word	0x08005a80
 8004158:	08005a40 	.word	0x08005a40

0800415c <_cleanup_r>:
 800415c:	4901      	ldr	r1, [pc, #4]	; (8004164 <_cleanup_r+0x8>)
 800415e:	f000 b8a9 	b.w	80042b4 <_fwalk_reent>
 8004162:	bf00      	nop
 8004164:	08004109 	.word	0x08004109

08004168 <std.isra.0>:
 8004168:	2300      	movs	r3, #0
 800416a:	b510      	push	{r4, lr}
 800416c:	4604      	mov	r4, r0
 800416e:	6003      	str	r3, [r0, #0]
 8004170:	6043      	str	r3, [r0, #4]
 8004172:	6083      	str	r3, [r0, #8]
 8004174:	8181      	strh	r1, [r0, #12]
 8004176:	6643      	str	r3, [r0, #100]	; 0x64
 8004178:	81c2      	strh	r2, [r0, #14]
 800417a:	6103      	str	r3, [r0, #16]
 800417c:	6143      	str	r3, [r0, #20]
 800417e:	6183      	str	r3, [r0, #24]
 8004180:	4619      	mov	r1, r3
 8004182:	2208      	movs	r2, #8
 8004184:	305c      	adds	r0, #92	; 0x5c
 8004186:	f7ff fc1e 	bl	80039c6 <memset>
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <std.isra.0+0x38>)
 800418c:	6224      	str	r4, [r4, #32]
 800418e:	6263      	str	r3, [r4, #36]	; 0x24
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <std.isra.0+0x3c>)
 8004192:	62a3      	str	r3, [r4, #40]	; 0x28
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <std.isra.0+0x40>)
 8004196:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <std.isra.0+0x44>)
 800419a:	6323      	str	r3, [r4, #48]	; 0x30
 800419c:	bd10      	pop	{r4, pc}
 800419e:	bf00      	nop
 80041a0:	08003b6d 	.word	0x08003b6d
 80041a4:	08003b93 	.word	0x08003b93
 80041a8:	08003bcb 	.word	0x08003bcb
 80041ac:	08003bef 	.word	0x08003bef

080041b0 <__sfmoreglue>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	2568      	movs	r5, #104	; 0x68
 80041b4:	1e4a      	subs	r2, r1, #1
 80041b6:	4355      	muls	r5, r2
 80041b8:	460e      	mov	r6, r1
 80041ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041be:	f000 f97d 	bl	80044bc <_malloc_r>
 80041c2:	4604      	mov	r4, r0
 80041c4:	b140      	cbz	r0, 80041d8 <__sfmoreglue+0x28>
 80041c6:	2100      	movs	r1, #0
 80041c8:	e880 0042 	stmia.w	r0, {r1, r6}
 80041cc:	300c      	adds	r0, #12
 80041ce:	60a0      	str	r0, [r4, #8]
 80041d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041d4:	f7ff fbf7 	bl	80039c6 <memset>
 80041d8:	4620      	mov	r0, r4
 80041da:	bd70      	pop	{r4, r5, r6, pc}

080041dc <__sinit>:
 80041dc:	6983      	ldr	r3, [r0, #24]
 80041de:	b510      	push	{r4, lr}
 80041e0:	4604      	mov	r4, r0
 80041e2:	bb33      	cbnz	r3, 8004232 <__sinit+0x56>
 80041e4:	6483      	str	r3, [r0, #72]	; 0x48
 80041e6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80041e8:	6503      	str	r3, [r0, #80]	; 0x50
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <__sinit+0x58>)
 80041ec:	4a12      	ldr	r2, [pc, #72]	; (8004238 <__sinit+0x5c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6282      	str	r2, [r0, #40]	; 0x28
 80041f2:	4298      	cmp	r0, r3
 80041f4:	bf04      	itt	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	6183      	streq	r3, [r0, #24]
 80041fa:	f000 f81f 	bl	800423c <__sfp>
 80041fe:	6060      	str	r0, [r4, #4]
 8004200:	4620      	mov	r0, r4
 8004202:	f000 f81b 	bl	800423c <__sfp>
 8004206:	60a0      	str	r0, [r4, #8]
 8004208:	4620      	mov	r0, r4
 800420a:	f000 f817 	bl	800423c <__sfp>
 800420e:	2200      	movs	r2, #0
 8004210:	60e0      	str	r0, [r4, #12]
 8004212:	2104      	movs	r1, #4
 8004214:	6860      	ldr	r0, [r4, #4]
 8004216:	f7ff ffa7 	bl	8004168 <std.isra.0>
 800421a:	2201      	movs	r2, #1
 800421c:	2109      	movs	r1, #9
 800421e:	68a0      	ldr	r0, [r4, #8]
 8004220:	f7ff ffa2 	bl	8004168 <std.isra.0>
 8004224:	2202      	movs	r2, #2
 8004226:	2112      	movs	r1, #18
 8004228:	68e0      	ldr	r0, [r4, #12]
 800422a:	f7ff ff9d 	bl	8004168 <std.isra.0>
 800422e:	2301      	movs	r3, #1
 8004230:	61a3      	str	r3, [r4, #24]
 8004232:	bd10      	pop	{r4, pc}
 8004234:	08005a3c 	.word	0x08005a3c
 8004238:	0800415d 	.word	0x0800415d

0800423c <__sfp>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <__sfp+0x74>)
 8004240:	4607      	mov	r7, r0
 8004242:	681e      	ldr	r6, [r3, #0]
 8004244:	69b3      	ldr	r3, [r6, #24]
 8004246:	b913      	cbnz	r3, 800424e <__sfp+0x12>
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff ffc7 	bl	80041dc <__sinit>
 800424e:	3648      	adds	r6, #72	; 0x48
 8004250:	68b4      	ldr	r4, [r6, #8]
 8004252:	6873      	ldr	r3, [r6, #4]
 8004254:	3b01      	subs	r3, #1
 8004256:	d503      	bpl.n	8004260 <__sfp+0x24>
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	b133      	cbz	r3, 800426a <__sfp+0x2e>
 800425c:	6836      	ldr	r6, [r6, #0]
 800425e:	e7f7      	b.n	8004250 <__sfp+0x14>
 8004260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004264:	b16d      	cbz	r5, 8004282 <__sfp+0x46>
 8004266:	3468      	adds	r4, #104	; 0x68
 8004268:	e7f4      	b.n	8004254 <__sfp+0x18>
 800426a:	2104      	movs	r1, #4
 800426c:	4638      	mov	r0, r7
 800426e:	f7ff ff9f 	bl	80041b0 <__sfmoreglue>
 8004272:	6030      	str	r0, [r6, #0]
 8004274:	2800      	cmp	r0, #0
 8004276:	d1f1      	bne.n	800425c <__sfp+0x20>
 8004278:	230c      	movs	r3, #12
 800427a:	4604      	mov	r4, r0
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4620      	mov	r0, r4
 8004280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004286:	81e3      	strh	r3, [r4, #14]
 8004288:	2301      	movs	r3, #1
 800428a:	6665      	str	r5, [r4, #100]	; 0x64
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	6025      	str	r5, [r4, #0]
 8004290:	60a5      	str	r5, [r4, #8]
 8004292:	6065      	str	r5, [r4, #4]
 8004294:	6125      	str	r5, [r4, #16]
 8004296:	6165      	str	r5, [r4, #20]
 8004298:	61a5      	str	r5, [r4, #24]
 800429a:	2208      	movs	r2, #8
 800429c:	4629      	mov	r1, r5
 800429e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042a2:	f7ff fb90 	bl	80039c6 <memset>
 80042a6:	6365      	str	r5, [r4, #52]	; 0x34
 80042a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80042aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80042ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80042ae:	e7e6      	b.n	800427e <__sfp+0x42>
 80042b0:	08005a3c 	.word	0x08005a3c

080042b4 <_fwalk_reent>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	4680      	mov	r8, r0
 80042ba:	4689      	mov	r9, r1
 80042bc:	2600      	movs	r6, #0
 80042be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042c2:	b914      	cbnz	r4, 80042ca <_fwalk_reent+0x16>
 80042c4:	4630      	mov	r0, r6
 80042c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ca:	68a5      	ldr	r5, [r4, #8]
 80042cc:	6867      	ldr	r7, [r4, #4]
 80042ce:	3f01      	subs	r7, #1
 80042d0:	d501      	bpl.n	80042d6 <_fwalk_reent+0x22>
 80042d2:	6824      	ldr	r4, [r4, #0]
 80042d4:	e7f5      	b.n	80042c2 <_fwalk_reent+0xe>
 80042d6:	89ab      	ldrh	r3, [r5, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d907      	bls.n	80042ec <_fwalk_reent+0x38>
 80042dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e0:	3301      	adds	r3, #1
 80042e2:	d003      	beq.n	80042ec <_fwalk_reent+0x38>
 80042e4:	4629      	mov	r1, r5
 80042e6:	4640      	mov	r0, r8
 80042e8:	47c8      	blx	r9
 80042ea:	4306      	orrs	r6, r0
 80042ec:	3568      	adds	r5, #104	; 0x68
 80042ee:	e7ee      	b.n	80042ce <_fwalk_reent+0x1a>

080042f0 <__locale_ctype_ptr_l>:
 80042f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80042f4:	4770      	bx	lr
	...

080042f8 <__locale_ctype_ptr>:
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <__locale_ctype_ptr+0x14>)
 80042fa:	4a05      	ldr	r2, [pc, #20]	; (8004310 <__locale_ctype_ptr+0x18>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf08      	it	eq
 8004304:	4613      	moveq	r3, r2
 8004306:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800430a:	4770      	bx	lr
 800430c:	2000000c 	.word	0x2000000c
 8004310:	20000070 	.word	0x20000070

08004314 <_lseek_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4605      	mov	r5, r0
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	2200      	movs	r2, #0
 800431e:	4c05      	ldr	r4, [pc, #20]	; (8004334 <_lseek_r+0x20>)
 8004320:	6022      	str	r2, [r4, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f7fb ff82 	bl	800022c <_lseek>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_lseek_r+0x1e>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	b103      	cbz	r3, 8004332 <_lseek_r+0x1e>
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	2000290c 	.word	0x2000290c

08004338 <__swhatbuf_r>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	460e      	mov	r6, r1
 800433c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004340:	b090      	sub	sp, #64	; 0x40
 8004342:	2900      	cmp	r1, #0
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	da07      	bge.n	800435a <__swhatbuf_r+0x22>
 800434a:	2300      	movs	r3, #0
 800434c:	602b      	str	r3, [r5, #0]
 800434e:	89b3      	ldrh	r3, [r6, #12]
 8004350:	061a      	lsls	r2, r3, #24
 8004352:	d410      	bmi.n	8004376 <__swhatbuf_r+0x3e>
 8004354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004358:	e00e      	b.n	8004378 <__swhatbuf_r+0x40>
 800435a:	aa01      	add	r2, sp, #4
 800435c:	f001 f960 	bl	8005620 <_fstat_r>
 8004360:	2800      	cmp	r0, #0
 8004362:	dbf2      	blt.n	800434a <__swhatbuf_r+0x12>
 8004364:	9a02      	ldr	r2, [sp, #8]
 8004366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800436a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800436e:	425a      	negs	r2, r3
 8004370:	415a      	adcs	r2, r3
 8004372:	602a      	str	r2, [r5, #0]
 8004374:	e7ee      	b.n	8004354 <__swhatbuf_r+0x1c>
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	2000      	movs	r0, #0
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	b010      	add	sp, #64	; 0x40
 800437e:	bd70      	pop	{r4, r5, r6, pc}

08004380 <__smakebuf_r>:
 8004380:	898b      	ldrh	r3, [r1, #12]
 8004382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004384:	079d      	lsls	r5, r3, #30
 8004386:	4606      	mov	r6, r0
 8004388:	460c      	mov	r4, r1
 800438a:	d507      	bpl.n	800439c <__smakebuf_r+0x1c>
 800438c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	2301      	movs	r3, #1
 8004396:	6163      	str	r3, [r4, #20]
 8004398:	b002      	add	sp, #8
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	ab01      	add	r3, sp, #4
 800439e:	466a      	mov	r2, sp
 80043a0:	f7ff ffca 	bl	8004338 <__swhatbuf_r>
 80043a4:	9900      	ldr	r1, [sp, #0]
 80043a6:	4605      	mov	r5, r0
 80043a8:	4630      	mov	r0, r6
 80043aa:	f000 f887 	bl	80044bc <_malloc_r>
 80043ae:	b948      	cbnz	r0, 80043c4 <__smakebuf_r+0x44>
 80043b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b4:	059a      	lsls	r2, r3, #22
 80043b6:	d4ef      	bmi.n	8004398 <__smakebuf_r+0x18>
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	e7e3      	b.n	800438c <__smakebuf_r+0xc>
 80043c4:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <__smakebuf_r+0x7c>)
 80043c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	6020      	str	r0, [r4, #0]
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	9b00      	ldr	r3, [sp, #0]
 80043d4:	6120      	str	r0, [r4, #16]
 80043d6:	6163      	str	r3, [r4, #20]
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	b15b      	cbz	r3, 80043f4 <__smakebuf_r+0x74>
 80043dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e0:	4630      	mov	r0, r6
 80043e2:	f001 f92f 	bl	8005644 <_isatty_r>
 80043e6:	b128      	cbz	r0, 80043f4 <__smakebuf_r+0x74>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	431d      	orrs	r5, r3
 80043f8:	81a5      	strh	r5, [r4, #12]
 80043fa:	e7cd      	b.n	8004398 <__smakebuf_r+0x18>
 80043fc:	0800415d 	.word	0x0800415d

08004400 <__ascii_mbtowc>:
 8004400:	b082      	sub	sp, #8
 8004402:	b901      	cbnz	r1, 8004406 <__ascii_mbtowc+0x6>
 8004404:	a901      	add	r1, sp, #4
 8004406:	b142      	cbz	r2, 800441a <__ascii_mbtowc+0x1a>
 8004408:	b14b      	cbz	r3, 800441e <__ascii_mbtowc+0x1e>
 800440a:	7813      	ldrb	r3, [r2, #0]
 800440c:	600b      	str	r3, [r1, #0]
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	1c10      	adds	r0, r2, #0
 8004412:	bf18      	it	ne
 8004414:	2001      	movne	r0, #1
 8004416:	b002      	add	sp, #8
 8004418:	4770      	bx	lr
 800441a:	4610      	mov	r0, r2
 800441c:	e7fb      	b.n	8004416 <__ascii_mbtowc+0x16>
 800441e:	f06f 0001 	mvn.w	r0, #1
 8004422:	e7f8      	b.n	8004416 <__ascii_mbtowc+0x16>

08004424 <_free_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4605      	mov	r5, r0
 8004428:	2900      	cmp	r1, #0
 800442a:	d043      	beq.n	80044b4 <_free_r+0x90>
 800442c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004430:	1f0c      	subs	r4, r1, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	bfb8      	it	lt
 8004436:	18e4      	addlt	r4, r4, r3
 8004438:	f001 f93c 	bl	80056b4 <__malloc_lock>
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <_free_r+0x94>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	4610      	mov	r0, r2
 8004442:	b933      	cbnz	r3, 8004452 <_free_r+0x2e>
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	6014      	str	r4, [r2, #0]
 8004448:	4628      	mov	r0, r5
 800444a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444e:	f001 b932 	b.w	80056b6 <__malloc_unlock>
 8004452:	42a3      	cmp	r3, r4
 8004454:	d90b      	bls.n	800446e <_free_r+0x4a>
 8004456:	6821      	ldr	r1, [r4, #0]
 8004458:	1862      	adds	r2, r4, r1
 800445a:	4293      	cmp	r3, r2
 800445c:	bf01      	itttt	eq
 800445e:	681a      	ldreq	r2, [r3, #0]
 8004460:	685b      	ldreq	r3, [r3, #4]
 8004462:	1852      	addeq	r2, r2, r1
 8004464:	6022      	streq	r2, [r4, #0]
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6004      	str	r4, [r0, #0]
 800446a:	e7ed      	b.n	8004448 <_free_r+0x24>
 800446c:	4613      	mov	r3, r2
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	b10a      	cbz	r2, 8004476 <_free_r+0x52>
 8004472:	42a2      	cmp	r2, r4
 8004474:	d9fa      	bls.n	800446c <_free_r+0x48>
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	1858      	adds	r0, r3, r1
 800447a:	42a0      	cmp	r0, r4
 800447c:	d10b      	bne.n	8004496 <_free_r+0x72>
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	4401      	add	r1, r0
 8004482:	1858      	adds	r0, r3, r1
 8004484:	4282      	cmp	r2, r0
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	d1de      	bne.n	8004448 <_free_r+0x24>
 800448a:	6810      	ldr	r0, [r2, #0]
 800448c:	6852      	ldr	r2, [r2, #4]
 800448e:	4401      	add	r1, r0
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	e7d8      	b.n	8004448 <_free_r+0x24>
 8004496:	d902      	bls.n	800449e <_free_r+0x7a>
 8004498:	230c      	movs	r3, #12
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	e7d4      	b.n	8004448 <_free_r+0x24>
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	1821      	adds	r1, r4, r0
 80044a2:	428a      	cmp	r2, r1
 80044a4:	bf01      	itttt	eq
 80044a6:	6811      	ldreq	r1, [r2, #0]
 80044a8:	6852      	ldreq	r2, [r2, #4]
 80044aa:	1809      	addeq	r1, r1, r0
 80044ac:	6021      	streq	r1, [r4, #0]
 80044ae:	6062      	str	r2, [r4, #4]
 80044b0:	605c      	str	r4, [r3, #4]
 80044b2:	e7c9      	b.n	8004448 <_free_r+0x24>
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
 80044b6:	bf00      	nop
 80044b8:	20002348 	.word	0x20002348

080044bc <_malloc_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	1ccd      	adds	r5, r1, #3
 80044c0:	f025 0503 	bic.w	r5, r5, #3
 80044c4:	3508      	adds	r5, #8
 80044c6:	2d0c      	cmp	r5, #12
 80044c8:	bf38      	it	cc
 80044ca:	250c      	movcc	r5, #12
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	4606      	mov	r6, r0
 80044d0:	db01      	blt.n	80044d6 <_malloc_r+0x1a>
 80044d2:	42a9      	cmp	r1, r5
 80044d4:	d903      	bls.n	80044de <_malloc_r+0x22>
 80044d6:	230c      	movs	r3, #12
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	2000      	movs	r0, #0
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	f001 f8e9 	bl	80056b4 <__malloc_lock>
 80044e2:	4a23      	ldr	r2, [pc, #140]	; (8004570 <_malloc_r+0xb4>)
 80044e4:	6814      	ldr	r4, [r2, #0]
 80044e6:	4621      	mov	r1, r4
 80044e8:	b991      	cbnz	r1, 8004510 <_malloc_r+0x54>
 80044ea:	4c22      	ldr	r4, [pc, #136]	; (8004574 <_malloc_r+0xb8>)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	b91b      	cbnz	r3, 80044f8 <_malloc_r+0x3c>
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 ff81 	bl	80053f8 <_sbrk_r>
 80044f6:	6020      	str	r0, [r4, #0]
 80044f8:	4629      	mov	r1, r5
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 ff7c 	bl	80053f8 <_sbrk_r>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d126      	bne.n	8004552 <_malloc_r+0x96>
 8004504:	230c      	movs	r3, #12
 8004506:	4630      	mov	r0, r6
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	f001 f8d4 	bl	80056b6 <__malloc_unlock>
 800450e:	e7e4      	b.n	80044da <_malloc_r+0x1e>
 8004510:	680b      	ldr	r3, [r1, #0]
 8004512:	1b5b      	subs	r3, r3, r5
 8004514:	d41a      	bmi.n	800454c <_malloc_r+0x90>
 8004516:	2b0b      	cmp	r3, #11
 8004518:	d90f      	bls.n	800453a <_malloc_r+0x7e>
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	18cc      	adds	r4, r1, r3
 800451e:	50cd      	str	r5, [r1, r3]
 8004520:	4630      	mov	r0, r6
 8004522:	f001 f8c8 	bl	80056b6 <__malloc_unlock>
 8004526:	f104 000b 	add.w	r0, r4, #11
 800452a:	1d23      	adds	r3, r4, #4
 800452c:	f020 0007 	bic.w	r0, r0, #7
 8004530:	1ac3      	subs	r3, r0, r3
 8004532:	d01b      	beq.n	800456c <_malloc_r+0xb0>
 8004534:	425a      	negs	r2, r3
 8004536:	50e2      	str	r2, [r4, r3]
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	428c      	cmp	r4, r1
 800453c:	bf0b      	itete	eq
 800453e:	6863      	ldreq	r3, [r4, #4]
 8004540:	684b      	ldrne	r3, [r1, #4]
 8004542:	6013      	streq	r3, [r2, #0]
 8004544:	6063      	strne	r3, [r4, #4]
 8004546:	bf18      	it	ne
 8004548:	460c      	movne	r4, r1
 800454a:	e7e9      	b.n	8004520 <_malloc_r+0x64>
 800454c:	460c      	mov	r4, r1
 800454e:	6849      	ldr	r1, [r1, #4]
 8004550:	e7ca      	b.n	80044e8 <_malloc_r+0x2c>
 8004552:	1cc4      	adds	r4, r0, #3
 8004554:	f024 0403 	bic.w	r4, r4, #3
 8004558:	42a0      	cmp	r0, r4
 800455a:	d005      	beq.n	8004568 <_malloc_r+0xac>
 800455c:	1a21      	subs	r1, r4, r0
 800455e:	4630      	mov	r0, r6
 8004560:	f000 ff4a 	bl	80053f8 <_sbrk_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d0cd      	beq.n	8004504 <_malloc_r+0x48>
 8004568:	6025      	str	r5, [r4, #0]
 800456a:	e7d9      	b.n	8004520 <_malloc_r+0x64>
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	bf00      	nop
 8004570:	20002348 	.word	0x20002348
 8004574:	2000234c 	.word	0x2000234c

08004578 <__ssputs_r>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	688e      	ldr	r6, [r1, #8]
 800457e:	4682      	mov	sl, r0
 8004580:	429e      	cmp	r6, r3
 8004582:	460c      	mov	r4, r1
 8004584:	4691      	mov	r9, r2
 8004586:	4698      	mov	r8, r3
 8004588:	d835      	bhi.n	80045f6 <__ssputs_r+0x7e>
 800458a:	898a      	ldrh	r2, [r1, #12]
 800458c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004590:	d031      	beq.n	80045f6 <__ssputs_r+0x7e>
 8004592:	2302      	movs	r3, #2
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	6909      	ldr	r1, [r1, #16]
 8004598:	1a6f      	subs	r7, r5, r1
 800459a:	6965      	ldr	r5, [r4, #20]
 800459c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80045a4:	f108 0301 	add.w	r3, r8, #1
 80045a8:	443b      	add	r3, r7
 80045aa:	429d      	cmp	r5, r3
 80045ac:	bf38      	it	cc
 80045ae:	461d      	movcc	r5, r3
 80045b0:	0553      	lsls	r3, r2, #21
 80045b2:	d531      	bpl.n	8004618 <__ssputs_r+0xa0>
 80045b4:	4629      	mov	r1, r5
 80045b6:	f7ff ff81 	bl	80044bc <_malloc_r>
 80045ba:	4606      	mov	r6, r0
 80045bc:	b950      	cbnz	r0, 80045d4 <__ssputs_r+0x5c>
 80045be:	230c      	movs	r3, #12
 80045c0:	f8ca 3000 	str.w	r3, [sl]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d4:	463a      	mov	r2, r7
 80045d6:	6921      	ldr	r1, [r4, #16]
 80045d8:	f7ff f9ea 	bl	80039b0 <memcpy>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	6126      	str	r6, [r4, #16]
 80045ea:	443e      	add	r6, r7
 80045ec:	6026      	str	r6, [r4, #0]
 80045ee:	4646      	mov	r6, r8
 80045f0:	6165      	str	r5, [r4, #20]
 80045f2:	1bed      	subs	r5, r5, r7
 80045f4:	60a5      	str	r5, [r4, #8]
 80045f6:	4546      	cmp	r6, r8
 80045f8:	bf28      	it	cs
 80045fa:	4646      	movcs	r6, r8
 80045fc:	4649      	mov	r1, r9
 80045fe:	4632      	mov	r2, r6
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	f001 f83d 	bl	8005680 <memmove>
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	2000      	movs	r0, #0
 800460a:	1b9b      	subs	r3, r3, r6
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	441e      	add	r6, r3
 8004612:	6026      	str	r6, [r4, #0]
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	462a      	mov	r2, r5
 800461a:	f001 f84d 	bl	80056b8 <_realloc_r>
 800461e:	4606      	mov	r6, r0
 8004620:	2800      	cmp	r0, #0
 8004622:	d1e1      	bne.n	80045e8 <__ssputs_r+0x70>
 8004624:	6921      	ldr	r1, [r4, #16]
 8004626:	4650      	mov	r0, sl
 8004628:	f7ff fefc 	bl	8004424 <_free_r>
 800462c:	e7c7      	b.n	80045be <__ssputs_r+0x46>
	...

08004630 <_svfiprintf_r>:
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	b09d      	sub	sp, #116	; 0x74
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	898b      	ldrh	r3, [r1, #12]
 800463a:	4680      	mov	r8, r0
 800463c:	061c      	lsls	r4, r3, #24
 800463e:	460d      	mov	r5, r1
 8004640:	4616      	mov	r6, r2
 8004642:	d50f      	bpl.n	8004664 <_svfiprintf_r+0x34>
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	b96b      	cbnz	r3, 8004664 <_svfiprintf_r+0x34>
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	f7ff ff37 	bl	80044bc <_malloc_r>
 800464e:	6028      	str	r0, [r5, #0]
 8004650:	6128      	str	r0, [r5, #16]
 8004652:	b928      	cbnz	r0, 8004660 <_svfiprintf_r+0x30>
 8004654:	230c      	movs	r3, #12
 8004656:	f8c8 3000 	str.w	r3, [r8]
 800465a:	f04f 30ff 	mov.w	r0, #4294967295
 800465e:	e0c4      	b.n	80047ea <_svfiprintf_r+0x1ba>
 8004660:	2340      	movs	r3, #64	; 0x40
 8004662:	616b      	str	r3, [r5, #20]
 8004664:	2300      	movs	r3, #0
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	2320      	movs	r3, #32
 800466a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466e:	2330      	movs	r3, #48	; 0x30
 8004670:	f04f 0b01 	mov.w	fp, #1
 8004674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004678:	4637      	mov	r7, r6
 800467a:	463c      	mov	r4, r7
 800467c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d13c      	bne.n	80046fe <_svfiprintf_r+0xce>
 8004684:	ebb7 0a06 	subs.w	sl, r7, r6
 8004688:	d00b      	beq.n	80046a2 <_svfiprintf_r+0x72>
 800468a:	4653      	mov	r3, sl
 800468c:	4632      	mov	r2, r6
 800468e:	4629      	mov	r1, r5
 8004690:	4640      	mov	r0, r8
 8004692:	f7ff ff71 	bl	8004578 <__ssputs_r>
 8004696:	3001      	adds	r0, #1
 8004698:	f000 80a2 	beq.w	80047e0 <_svfiprintf_r+0x1b0>
 800469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469e:	4453      	add	r3, sl
 80046a0:	9309      	str	r3, [sp, #36]	; 0x24
 80046a2:	783b      	ldrb	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 809b 	beq.w	80047e0 <_svfiprintf_r+0x1b0>
 80046aa:	2300      	movs	r3, #0
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	9307      	str	r3, [sp, #28]
 80046b4:	9205      	str	r2, [sp, #20]
 80046b6:	9306      	str	r3, [sp, #24]
 80046b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046bc:	931a      	str	r3, [sp, #104]	; 0x68
 80046be:	2205      	movs	r2, #5
 80046c0:	7821      	ldrb	r1, [r4, #0]
 80046c2:	4850      	ldr	r0, [pc, #320]	; (8004804 <_svfiprintf_r+0x1d4>)
 80046c4:	f000 ffce 	bl	8005664 <memchr>
 80046c8:	1c67      	adds	r7, r4, #1
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	b9d8      	cbnz	r0, 8004706 <_svfiprintf_r+0xd6>
 80046ce:	06d9      	lsls	r1, r3, #27
 80046d0:	bf44      	itt	mi
 80046d2:	2220      	movmi	r2, #32
 80046d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046d8:	071a      	lsls	r2, r3, #28
 80046da:	bf44      	itt	mi
 80046dc:	222b      	movmi	r2, #43	; 0x2b
 80046de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046e2:	7822      	ldrb	r2, [r4, #0]
 80046e4:	2a2a      	cmp	r2, #42	; 0x2a
 80046e6:	d016      	beq.n	8004716 <_svfiprintf_r+0xe6>
 80046e8:	2100      	movs	r1, #0
 80046ea:	200a      	movs	r0, #10
 80046ec:	9a07      	ldr	r2, [sp, #28]
 80046ee:	4627      	mov	r7, r4
 80046f0:	783b      	ldrb	r3, [r7, #0]
 80046f2:	3401      	adds	r4, #1
 80046f4:	3b30      	subs	r3, #48	; 0x30
 80046f6:	2b09      	cmp	r3, #9
 80046f8:	d950      	bls.n	800479c <_svfiprintf_r+0x16c>
 80046fa:	b1c9      	cbz	r1, 8004730 <_svfiprintf_r+0x100>
 80046fc:	e011      	b.n	8004722 <_svfiprintf_r+0xf2>
 80046fe:	2b25      	cmp	r3, #37	; 0x25
 8004700:	d0c0      	beq.n	8004684 <_svfiprintf_r+0x54>
 8004702:	4627      	mov	r7, r4
 8004704:	e7b9      	b.n	800467a <_svfiprintf_r+0x4a>
 8004706:	4a3f      	ldr	r2, [pc, #252]	; (8004804 <_svfiprintf_r+0x1d4>)
 8004708:	463c      	mov	r4, r7
 800470a:	1a80      	subs	r0, r0, r2
 800470c:	fa0b f000 	lsl.w	r0, fp, r0
 8004710:	4318      	orrs	r0, r3
 8004712:	9004      	str	r0, [sp, #16]
 8004714:	e7d3      	b.n	80046be <_svfiprintf_r+0x8e>
 8004716:	9a03      	ldr	r2, [sp, #12]
 8004718:	1d11      	adds	r1, r2, #4
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	9103      	str	r1, [sp, #12]
 800471e:	2a00      	cmp	r2, #0
 8004720:	db01      	blt.n	8004726 <_svfiprintf_r+0xf6>
 8004722:	9207      	str	r2, [sp, #28]
 8004724:	e004      	b.n	8004730 <_svfiprintf_r+0x100>
 8004726:	4252      	negs	r2, r2
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	9207      	str	r2, [sp, #28]
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	783b      	ldrb	r3, [r7, #0]
 8004732:	2b2e      	cmp	r3, #46	; 0x2e
 8004734:	d10d      	bne.n	8004752 <_svfiprintf_r+0x122>
 8004736:	787b      	ldrb	r3, [r7, #1]
 8004738:	1c79      	adds	r1, r7, #1
 800473a:	2b2a      	cmp	r3, #42	; 0x2a
 800473c:	d132      	bne.n	80047a4 <_svfiprintf_r+0x174>
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	3702      	adds	r7, #2
 8004742:	1d1a      	adds	r2, r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	9203      	str	r2, [sp, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	bfb8      	it	lt
 800474c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	4c2d      	ldr	r4, [pc, #180]	; (8004808 <_svfiprintf_r+0x1d8>)
 8004754:	2203      	movs	r2, #3
 8004756:	7839      	ldrb	r1, [r7, #0]
 8004758:	4620      	mov	r0, r4
 800475a:	f000 ff83 	bl	8005664 <memchr>
 800475e:	b138      	cbz	r0, 8004770 <_svfiprintf_r+0x140>
 8004760:	2340      	movs	r3, #64	; 0x40
 8004762:	1b00      	subs	r0, r0, r4
 8004764:	fa03 f000 	lsl.w	r0, r3, r0
 8004768:	9b04      	ldr	r3, [sp, #16]
 800476a:	3701      	adds	r7, #1
 800476c:	4303      	orrs	r3, r0
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	7839      	ldrb	r1, [r7, #0]
 8004772:	2206      	movs	r2, #6
 8004774:	4825      	ldr	r0, [pc, #148]	; (800480c <_svfiprintf_r+0x1dc>)
 8004776:	1c7e      	adds	r6, r7, #1
 8004778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800477c:	f000 ff72 	bl	8005664 <memchr>
 8004780:	2800      	cmp	r0, #0
 8004782:	d035      	beq.n	80047f0 <_svfiprintf_r+0x1c0>
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <_svfiprintf_r+0x1e0>)
 8004786:	b9fb      	cbnz	r3, 80047c8 <_svfiprintf_r+0x198>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	3307      	adds	r3, #7
 800478c:	f023 0307 	bic.w	r3, r3, #7
 8004790:	3308      	adds	r3, #8
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004796:	444b      	add	r3, r9
 8004798:	9309      	str	r3, [sp, #36]	; 0x24
 800479a:	e76d      	b.n	8004678 <_svfiprintf_r+0x48>
 800479c:	fb00 3202 	mla	r2, r0, r2, r3
 80047a0:	2101      	movs	r1, #1
 80047a2:	e7a4      	b.n	80046ee <_svfiprintf_r+0xbe>
 80047a4:	2300      	movs	r3, #0
 80047a6:	240a      	movs	r4, #10
 80047a8:	4618      	mov	r0, r3
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	460f      	mov	r7, r1
 80047ae:	783a      	ldrb	r2, [r7, #0]
 80047b0:	3101      	adds	r1, #1
 80047b2:	3a30      	subs	r2, #48	; 0x30
 80047b4:	2a09      	cmp	r2, #9
 80047b6:	d903      	bls.n	80047c0 <_svfiprintf_r+0x190>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ca      	beq.n	8004752 <_svfiprintf_r+0x122>
 80047bc:	9005      	str	r0, [sp, #20]
 80047be:	e7c8      	b.n	8004752 <_svfiprintf_r+0x122>
 80047c0:	fb04 2000 	mla	r0, r4, r0, r2
 80047c4:	2301      	movs	r3, #1
 80047c6:	e7f1      	b.n	80047ac <_svfiprintf_r+0x17c>
 80047c8:	ab03      	add	r3, sp, #12
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	462a      	mov	r2, r5
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <_svfiprintf_r+0x1e4>)
 80047d0:	a904      	add	r1, sp, #16
 80047d2:	4640      	mov	r0, r8
 80047d4:	f3af 8000 	nop.w
 80047d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80047dc:	4681      	mov	r9, r0
 80047de:	d1d9      	bne.n	8004794 <_svfiprintf_r+0x164>
 80047e0:	89ab      	ldrh	r3, [r5, #12]
 80047e2:	065b      	lsls	r3, r3, #25
 80047e4:	f53f af39 	bmi.w	800465a <_svfiprintf_r+0x2a>
 80047e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ea:	b01d      	add	sp, #116	; 0x74
 80047ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f0:	ab03      	add	r3, sp, #12
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	462a      	mov	r2, r5
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <_svfiprintf_r+0x1e4>)
 80047f8:	a904      	add	r1, sp, #16
 80047fa:	4640      	mov	r0, r8
 80047fc:	f000 fb70 	bl	8004ee0 <_printf_i>
 8004800:	e7ea      	b.n	80047d8 <_svfiprintf_r+0x1a8>
 8004802:	bf00      	nop
 8004804:	08005aaa 	.word	0x08005aaa
 8004808:	08005ab0 	.word	0x08005ab0
 800480c:	08005ab4 	.word	0x08005ab4
 8004810:	00000000 	.word	0x00000000
 8004814:	08004579 	.word	0x08004579

08004818 <_sungetc_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	1c4b      	adds	r3, r1, #1
 800481c:	4614      	mov	r4, r2
 800481e:	d103      	bne.n	8004828 <_sungetc_r+0x10>
 8004820:	f04f 35ff 	mov.w	r5, #4294967295
 8004824:	4628      	mov	r0, r5
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	8993      	ldrh	r3, [r2, #12]
 800482a:	b2cd      	uxtb	r5, r1
 800482c:	f023 0320 	bic.w	r3, r3, #32
 8004830:	8193      	strh	r3, [r2, #12]
 8004832:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004834:	6852      	ldr	r2, [r2, #4]
 8004836:	b18b      	cbz	r3, 800485c <_sungetc_r+0x44>
 8004838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800483a:	429a      	cmp	r2, r3
 800483c:	da08      	bge.n	8004850 <_sungetc_r+0x38>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	1e5a      	subs	r2, r3, #1
 8004842:	6022      	str	r2, [r4, #0]
 8004844:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	3301      	adds	r3, #1
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	e7e9      	b.n	8004824 <_sungetc_r+0xc>
 8004850:	4621      	mov	r1, r4
 8004852:	f000 fe9f 	bl	8005594 <__submore>
 8004856:	2800      	cmp	r0, #0
 8004858:	d0f1      	beq.n	800483e <_sungetc_r+0x26>
 800485a:	e7e1      	b.n	8004820 <_sungetc_r+0x8>
 800485c:	6921      	ldr	r1, [r4, #16]
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	b151      	cbz	r1, 8004878 <_sungetc_r+0x60>
 8004862:	4299      	cmp	r1, r3
 8004864:	d208      	bcs.n	8004878 <_sungetc_r+0x60>
 8004866:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800486a:	428d      	cmp	r5, r1
 800486c:	d104      	bne.n	8004878 <_sungetc_r+0x60>
 800486e:	3b01      	subs	r3, #1
 8004870:	3201      	adds	r2, #1
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	6062      	str	r2, [r4, #4]
 8004876:	e7d5      	b.n	8004824 <_sungetc_r+0xc>
 8004878:	63e3      	str	r3, [r4, #60]	; 0x3c
 800487a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800487e:	6363      	str	r3, [r4, #52]	; 0x34
 8004880:	2303      	movs	r3, #3
 8004882:	63a3      	str	r3, [r4, #56]	; 0x38
 8004884:	4623      	mov	r3, r4
 8004886:	6422      	str	r2, [r4, #64]	; 0x40
 8004888:	f803 5f46 	strb.w	r5, [r3, #70]!
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	2301      	movs	r3, #1
 8004890:	e7dc      	b.n	800484c <_sungetc_r+0x34>

08004892 <__ssrefill_r>:
 8004892:	b510      	push	{r4, lr}
 8004894:	460c      	mov	r4, r1
 8004896:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004898:	b169      	cbz	r1, 80048b6 <__ssrefill_r+0x24>
 800489a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800489e:	4299      	cmp	r1, r3
 80048a0:	d001      	beq.n	80048a6 <__ssrefill_r+0x14>
 80048a2:	f7ff fdbf 	bl	8004424 <_free_r>
 80048a6:	2000      	movs	r0, #0
 80048a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048aa:	6360      	str	r0, [r4, #52]	; 0x34
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	b113      	cbz	r3, 80048b6 <__ssrefill_r+0x24>
 80048b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	f043 0320 	orr.w	r3, r3, #32
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	bd10      	pop	{r4, pc}

080048cc <__ssvfiscanf_r>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	2300      	movs	r3, #0
 80048d8:	4606      	mov	r6, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	4692      	mov	sl, r2
 80048de:	270a      	movs	r7, #10
 80048e0:	9346      	str	r3, [sp, #280]	; 0x118
 80048e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80048e4:	4b9f      	ldr	r3, [pc, #636]	; (8004b64 <__ssvfiscanf_r+0x298>)
 80048e6:	f10d 080c 	add.w	r8, sp, #12
 80048ea:	93a2      	str	r3, [sp, #648]	; 0x288
 80048ec:	4b9e      	ldr	r3, [pc, #632]	; (8004b68 <__ssvfiscanf_r+0x29c>)
 80048ee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004b6c <__ssvfiscanf_r+0x2a0>
 80048f2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80048f6:	93a3      	str	r3, [sp, #652]	; 0x28c
 80048f8:	f89a 3000 	ldrb.w	r3, [sl]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 812f 	beq.w	8004b60 <__ssvfiscanf_r+0x294>
 8004902:	f7ff fcf9 	bl	80042f8 <__locale_ctype_ptr>
 8004906:	f89a b000 	ldrb.w	fp, [sl]
 800490a:	4458      	add	r0, fp
 800490c:	7843      	ldrb	r3, [r0, #1]
 800490e:	f013 0308 	ands.w	r3, r3, #8
 8004912:	d143      	bne.n	800499c <__ssvfiscanf_r+0xd0>
 8004914:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004918:	f10a 0501 	add.w	r5, sl, #1
 800491c:	f040 8099 	bne.w	8004a52 <__ssvfiscanf_r+0x186>
 8004920:	9345      	str	r3, [sp, #276]	; 0x114
 8004922:	9343      	str	r3, [sp, #268]	; 0x10c
 8004924:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004928:	2b2a      	cmp	r3, #42	; 0x2a
 800492a:	d103      	bne.n	8004934 <__ssvfiscanf_r+0x68>
 800492c:	2310      	movs	r3, #16
 800492e:	f10a 0502 	add.w	r5, sl, #2
 8004932:	9343      	str	r3, [sp, #268]	; 0x10c
 8004934:	7829      	ldrb	r1, [r5, #0]
 8004936:	46aa      	mov	sl, r5
 8004938:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800493c:	2a09      	cmp	r2, #9
 800493e:	f105 0501 	add.w	r5, r5, #1
 8004942:	d941      	bls.n	80049c8 <__ssvfiscanf_r+0xfc>
 8004944:	2203      	movs	r2, #3
 8004946:	4889      	ldr	r0, [pc, #548]	; (8004b6c <__ssvfiscanf_r+0x2a0>)
 8004948:	f000 fe8c 	bl	8005664 <memchr>
 800494c:	b138      	cbz	r0, 800495e <__ssvfiscanf_r+0x92>
 800494e:	eba0 0309 	sub.w	r3, r0, r9
 8004952:	2001      	movs	r0, #1
 8004954:	46aa      	mov	sl, r5
 8004956:	4098      	lsls	r0, r3
 8004958:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800495a:	4318      	orrs	r0, r3
 800495c:	9043      	str	r0, [sp, #268]	; 0x10c
 800495e:	f89a 3000 	ldrb.w	r3, [sl]
 8004962:	f10a 0501 	add.w	r5, sl, #1
 8004966:	2b67      	cmp	r3, #103	; 0x67
 8004968:	d84a      	bhi.n	8004a00 <__ssvfiscanf_r+0x134>
 800496a:	2b65      	cmp	r3, #101	; 0x65
 800496c:	f080 80b7 	bcs.w	8004ade <__ssvfiscanf_r+0x212>
 8004970:	2b47      	cmp	r3, #71	; 0x47
 8004972:	d82f      	bhi.n	80049d4 <__ssvfiscanf_r+0x108>
 8004974:	2b45      	cmp	r3, #69	; 0x45
 8004976:	f080 80b2 	bcs.w	8004ade <__ssvfiscanf_r+0x212>
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8082 	beq.w	8004a84 <__ssvfiscanf_r+0x1b8>
 8004980:	2b25      	cmp	r3, #37	; 0x25
 8004982:	d066      	beq.n	8004a52 <__ssvfiscanf_r+0x186>
 8004984:	2303      	movs	r3, #3
 8004986:	9744      	str	r7, [sp, #272]	; 0x110
 8004988:	9349      	str	r3, [sp, #292]	; 0x124
 800498a:	e045      	b.n	8004a18 <__ssvfiscanf_r+0x14c>
 800498c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800498e:	3301      	adds	r3, #1
 8004990:	3101      	adds	r1, #1
 8004992:	9147      	str	r1, [sp, #284]	; 0x11c
 8004994:	6861      	ldr	r1, [r4, #4]
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	3901      	subs	r1, #1
 800499a:	6061      	str	r1, [r4, #4]
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dd0b      	ble.n	80049ba <__ssvfiscanf_r+0xee>
 80049a2:	f7ff fca9 	bl	80042f8 <__locale_ctype_ptr>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	7819      	ldrb	r1, [r3, #0]
 80049aa:	4408      	add	r0, r1
 80049ac:	7841      	ldrb	r1, [r0, #1]
 80049ae:	070d      	lsls	r5, r1, #28
 80049b0:	d4ec      	bmi.n	800498c <__ssvfiscanf_r+0xc0>
 80049b2:	f10a 0501 	add.w	r5, sl, #1
 80049b6:	46aa      	mov	sl, r5
 80049b8:	e79e      	b.n	80048f8 <__ssvfiscanf_r+0x2c>
 80049ba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80049bc:	4621      	mov	r1, r4
 80049be:	4630      	mov	r0, r6
 80049c0:	4798      	blx	r3
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0ed      	beq.n	80049a2 <__ssvfiscanf_r+0xd6>
 80049c6:	e7f4      	b.n	80049b2 <__ssvfiscanf_r+0xe6>
 80049c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80049ca:	fb07 1303 	mla	r3, r7, r3, r1
 80049ce:	3b30      	subs	r3, #48	; 0x30
 80049d0:	9345      	str	r3, [sp, #276]	; 0x114
 80049d2:	e7af      	b.n	8004934 <__ssvfiscanf_r+0x68>
 80049d4:	2b5b      	cmp	r3, #91	; 0x5b
 80049d6:	d061      	beq.n	8004a9c <__ssvfiscanf_r+0x1d0>
 80049d8:	d80c      	bhi.n	80049f4 <__ssvfiscanf_r+0x128>
 80049da:	2b58      	cmp	r3, #88	; 0x58
 80049dc:	d1d2      	bne.n	8004984 <__ssvfiscanf_r+0xb8>
 80049de:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	9243      	str	r2, [sp, #268]	; 0x10c
 80049e6:	2210      	movs	r2, #16
 80049e8:	9244      	str	r2, [sp, #272]	; 0x110
 80049ea:	2b6f      	cmp	r3, #111	; 0x6f
 80049ec:	bfb4      	ite	lt
 80049ee:	2303      	movlt	r3, #3
 80049f0:	2304      	movge	r3, #4
 80049f2:	e010      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 80049f4:	2b63      	cmp	r3, #99	; 0x63
 80049f6:	d05c      	beq.n	8004ab2 <__ssvfiscanf_r+0x1e6>
 80049f8:	2b64      	cmp	r3, #100	; 0x64
 80049fa:	d1c3      	bne.n	8004984 <__ssvfiscanf_r+0xb8>
 80049fc:	9744      	str	r7, [sp, #272]	; 0x110
 80049fe:	e7f4      	b.n	80049ea <__ssvfiscanf_r+0x11e>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d042      	beq.n	8004a8a <__ssvfiscanf_r+0x1be>
 8004a04:	d81d      	bhi.n	8004a42 <__ssvfiscanf_r+0x176>
 8004a06:	2b6e      	cmp	r3, #110	; 0x6e
 8004a08:	d059      	beq.n	8004abe <__ssvfiscanf_r+0x1f2>
 8004a0a:	d843      	bhi.n	8004a94 <__ssvfiscanf_r+0x1c8>
 8004a0c:	2b69      	cmp	r3, #105	; 0x69
 8004a0e:	d1b9      	bne.n	8004984 <__ssvfiscanf_r+0xb8>
 8004a10:	2300      	movs	r3, #0
 8004a12:	9344      	str	r3, [sp, #272]	; 0x110
 8004a14:	2303      	movs	r3, #3
 8004a16:	9349      	str	r3, [sp, #292]	; 0x124
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dd61      	ble.n	8004ae2 <__ssvfiscanf_r+0x216>
 8004a1e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a20:	0659      	lsls	r1, r3, #25
 8004a22:	d56f      	bpl.n	8004b04 <__ssvfiscanf_r+0x238>
 8004a24:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	dc7c      	bgt.n	8004b24 <__ssvfiscanf_r+0x258>
 8004a2a:	ab01      	add	r3, sp, #4
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	a943      	add	r1, sp, #268	; 0x10c
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 fb75 	bl	8005120 <_scanf_chars>
 8004a36:	2801      	cmp	r0, #1
 8004a38:	f000 8092 	beq.w	8004b60 <__ssvfiscanf_r+0x294>
 8004a3c:	2802      	cmp	r0, #2
 8004a3e:	d1ba      	bne.n	80049b6 <__ssvfiscanf_r+0xea>
 8004a40:	e01d      	b.n	8004a7e <__ssvfiscanf_r+0x1b2>
 8004a42:	2b75      	cmp	r3, #117	; 0x75
 8004a44:	d0da      	beq.n	80049fc <__ssvfiscanf_r+0x130>
 8004a46:	2b78      	cmp	r3, #120	; 0x78
 8004a48:	d0c9      	beq.n	80049de <__ssvfiscanf_r+0x112>
 8004a4a:	2b73      	cmp	r3, #115	; 0x73
 8004a4c:	d19a      	bne.n	8004984 <__ssvfiscanf_r+0xb8>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e7e1      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	dd0c      	ble.n	8004a72 <__ssvfiscanf_r+0x1a6>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	4593      	cmp	fp, r2
 8004a5e:	d17f      	bne.n	8004b60 <__ssvfiscanf_r+0x294>
 8004a60:	3301      	adds	r3, #1
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	6062      	str	r2, [r4, #4]
 8004a6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a70:	e7a1      	b.n	80049b6 <__ssvfiscanf_r+0xea>
 8004a72:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004a74:	4621      	mov	r1, r4
 8004a76:	4630      	mov	r0, r6
 8004a78:	4798      	blx	r3
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d0ec      	beq.n	8004a58 <__ssvfiscanf_r+0x18c>
 8004a7e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d163      	bne.n	8004b4c <__ssvfiscanf_r+0x280>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	e066      	b.n	8004b58 <__ssvfiscanf_r+0x28c>
 8004a8a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004a8c:	f042 0220 	orr.w	r2, r2, #32
 8004a90:	9243      	str	r2, [sp, #268]	; 0x10c
 8004a92:	e7a4      	b.n	80049de <__ssvfiscanf_r+0x112>
 8004a94:	2308      	movs	r3, #8
 8004a96:	9344      	str	r3, [sp, #272]	; 0x110
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e7bc      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	f000 fcba 	bl	8005418 <__sccl>
 8004aa4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aac:	9343      	str	r3, [sp, #268]	; 0x10c
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e7b1      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 8004ab2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab8:	9343      	str	r3, [sp, #268]	; 0x10c
 8004aba:	2300      	movs	r3, #0
 8004abc:	e7ab      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 8004abe:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004ac0:	06d0      	lsls	r0, r2, #27
 8004ac2:	f53f af78 	bmi.w	80049b6 <__ssvfiscanf_r+0xea>
 8004ac6:	f012 0f01 	tst.w	r2, #1
 8004aca:	9a01      	ldr	r2, [sp, #4]
 8004acc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004ace:	f102 0104 	add.w	r1, r2, #4
 8004ad2:	9101      	str	r1, [sp, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	bf14      	ite	ne
 8004ad8:	8013      	strhne	r3, [r2, #0]
 8004ada:	6013      	streq	r3, [r2, #0]
 8004adc:	e76b      	b.n	80049b6 <__ssvfiscanf_r+0xea>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e799      	b.n	8004a16 <__ssvfiscanf_r+0x14a>
 8004ae2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	4798      	blx	r3
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d097      	beq.n	8004a1e <__ssvfiscanf_r+0x152>
 8004aee:	e7c6      	b.n	8004a7e <__ssvfiscanf_r+0x1b2>
 8004af0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004af2:	3201      	adds	r2, #1
 8004af4:	9247      	str	r2, [sp, #284]	; 0x11c
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	3a01      	subs	r2, #1
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	6062      	str	r2, [r4, #4]
 8004afe:	dd0a      	ble.n	8004b16 <__ssvfiscanf_r+0x24a>
 8004b00:	3301      	adds	r3, #1
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	f7ff fbf8 	bl	80042f8 <__locale_ctype_ptr>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	4410      	add	r0, r2
 8004b0e:	7842      	ldrb	r2, [r0, #1]
 8004b10:	0712      	lsls	r2, r2, #28
 8004b12:	d4ed      	bmi.n	8004af0 <__ssvfiscanf_r+0x224>
 8004b14:	e786      	b.n	8004a24 <__ssvfiscanf_r+0x158>
 8004b16:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	4798      	blx	r3
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0f0      	beq.n	8004b04 <__ssvfiscanf_r+0x238>
 8004b22:	e7ac      	b.n	8004a7e <__ssvfiscanf_r+0x1b2>
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	dc06      	bgt.n	8004b36 <__ssvfiscanf_r+0x26a>
 8004b28:	ab01      	add	r3, sp, #4
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	a943      	add	r1, sp, #268	; 0x10c
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 fb5a 	bl	80051e8 <_scanf_i>
 8004b34:	e77f      	b.n	8004a36 <__ssvfiscanf_r+0x16a>
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <__ssvfiscanf_r+0x2a4>)
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f43f af3c 	beq.w	80049b6 <__ssvfiscanf_r+0xea>
 8004b3e:	ab01      	add	r3, sp, #4
 8004b40:	4622      	mov	r2, r4
 8004b42:	a943      	add	r1, sp, #268	; 0x10c
 8004b44:	4630      	mov	r0, r6
 8004b46:	f3af 8000 	nop.w
 8004b4a:	e774      	b.n	8004a36 <__ssvfiscanf_r+0x16a>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b52:	bf18      	it	ne
 8004b54:	f04f 30ff 	movne.w	r0, #4294967295
 8004b58:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004b62:	e7f9      	b.n	8004b58 <__ssvfiscanf_r+0x28c>
 8004b64:	08004819 	.word	0x08004819
 8004b68:	08004893 	.word	0x08004893
 8004b6c:	08005ab0 	.word	0x08005ab0
 8004b70:	00000000 	.word	0x00000000

08004b74 <__sfputc_r>:
 8004b74:	6893      	ldr	r3, [r2, #8]
 8004b76:	b410      	push	{r4}
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	6093      	str	r3, [r2, #8]
 8004b7e:	da08      	bge.n	8004b92 <__sfputc_r+0x1e>
 8004b80:	6994      	ldr	r4, [r2, #24]
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	db02      	blt.n	8004b8c <__sfputc_r+0x18>
 8004b86:	b2cb      	uxtb	r3, r1
 8004b88:	2b0a      	cmp	r3, #10
 8004b8a:	d102      	bne.n	8004b92 <__sfputc_r+0x1e>
 8004b8c:	bc10      	pop	{r4}
 8004b8e:	f7ff b951 	b.w	8003e34 <__swbuf_r>
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	1c58      	adds	r0, r3, #1
 8004b96:	6010      	str	r0, [r2, #0]
 8004b98:	7019      	strb	r1, [r3, #0]
 8004b9a:	b2c8      	uxtb	r0, r1
 8004b9c:	bc10      	pop	{r4}
 8004b9e:	4770      	bx	lr

08004ba0 <__sfputs_r>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	18d5      	adds	r5, r2, r3
 8004baa:	42ac      	cmp	r4, r5
 8004bac:	d101      	bne.n	8004bb2 <__sfputs_r+0x12>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e007      	b.n	8004bc2 <__sfputs_r+0x22>
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f7ff ffdb 	bl	8004b74 <__sfputc_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d1f3      	bne.n	8004baa <__sfputs_r+0xa>
 8004bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bc4 <_vfiprintf_r>:
 8004bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc8:	b09d      	sub	sp, #116	; 0x74
 8004bca:	460c      	mov	r4, r1
 8004bcc:	4617      	mov	r7, r2
 8004bce:	9303      	str	r3, [sp, #12]
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	b118      	cbz	r0, 8004bdc <_vfiprintf_r+0x18>
 8004bd4:	6983      	ldr	r3, [r0, #24]
 8004bd6:	b90b      	cbnz	r3, 8004bdc <_vfiprintf_r+0x18>
 8004bd8:	f7ff fb00 	bl	80041dc <__sinit>
 8004bdc:	4b7c      	ldr	r3, [pc, #496]	; (8004dd0 <_vfiprintf_r+0x20c>)
 8004bde:	429c      	cmp	r4, r3
 8004be0:	d157      	bne.n	8004c92 <_vfiprintf_r+0xce>
 8004be2:	6874      	ldr	r4, [r6, #4]
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	0718      	lsls	r0, r3, #28
 8004be8:	d55d      	bpl.n	8004ca6 <_vfiprintf_r+0xe2>
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05a      	beq.n	8004ca6 <_vfiprintf_r+0xe2>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bfa:	2330      	movs	r3, #48	; 0x30
 8004bfc:	f04f 0b01 	mov.w	fp, #1
 8004c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c04:	46b8      	mov	r8, r7
 8004c06:	4645      	mov	r5, r8
 8004c08:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d155      	bne.n	8004cbc <_vfiprintf_r+0xf8>
 8004c10:	ebb8 0a07 	subs.w	sl, r8, r7
 8004c14:	d00b      	beq.n	8004c2e <_vfiprintf_r+0x6a>
 8004c16:	4653      	mov	r3, sl
 8004c18:	463a      	mov	r2, r7
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff ffbf 	bl	8004ba0 <__sfputs_r>
 8004c22:	3001      	adds	r0, #1
 8004c24:	f000 80c4 	beq.w	8004db0 <_vfiprintf_r+0x1ec>
 8004c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2a:	4453      	add	r3, sl
 8004c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2e:	f898 3000 	ldrb.w	r3, [r8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80bc 	beq.w	8004db0 <_vfiprintf_r+0x1ec>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	9304      	str	r3, [sp, #16]
 8004c40:	9307      	str	r3, [sp, #28]
 8004c42:	9205      	str	r2, [sp, #20]
 8004c44:	9306      	str	r3, [sp, #24]
 8004c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c4c:	2205      	movs	r2, #5
 8004c4e:	7829      	ldrb	r1, [r5, #0]
 8004c50:	4860      	ldr	r0, [pc, #384]	; (8004dd4 <_vfiprintf_r+0x210>)
 8004c52:	f000 fd07 	bl	8005664 <memchr>
 8004c56:	f105 0801 	add.w	r8, r5, #1
 8004c5a:	9b04      	ldr	r3, [sp, #16]
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d131      	bne.n	8004cc4 <_vfiprintf_r+0x100>
 8004c60:	06d9      	lsls	r1, r3, #27
 8004c62:	bf44      	itt	mi
 8004c64:	2220      	movmi	r2, #32
 8004c66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c6a:	071a      	lsls	r2, r3, #28
 8004c6c:	bf44      	itt	mi
 8004c6e:	222b      	movmi	r2, #43	; 0x2b
 8004c70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c74:	782a      	ldrb	r2, [r5, #0]
 8004c76:	2a2a      	cmp	r2, #42	; 0x2a
 8004c78:	d02c      	beq.n	8004cd4 <_vfiprintf_r+0x110>
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	200a      	movs	r0, #10
 8004c7e:	9a07      	ldr	r2, [sp, #28]
 8004c80:	46a8      	mov	r8, r5
 8004c82:	f898 3000 	ldrb.w	r3, [r8]
 8004c86:	3501      	adds	r5, #1
 8004c88:	3b30      	subs	r3, #48	; 0x30
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d96d      	bls.n	8004d6a <_vfiprintf_r+0x1a6>
 8004c8e:	b371      	cbz	r1, 8004cee <_vfiprintf_r+0x12a>
 8004c90:	e026      	b.n	8004ce0 <_vfiprintf_r+0x11c>
 8004c92:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <_vfiprintf_r+0x214>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d101      	bne.n	8004c9c <_vfiprintf_r+0xd8>
 8004c98:	68b4      	ldr	r4, [r6, #8]
 8004c9a:	e7a3      	b.n	8004be4 <_vfiprintf_r+0x20>
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	; (8004ddc <_vfiprintf_r+0x218>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	bf08      	it	eq
 8004ca2:	68f4      	ldreq	r4, [r6, #12]
 8004ca4:	e79e      	b.n	8004be4 <_vfiprintf_r+0x20>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f7ff f927 	bl	8003efc <__swsetup_r>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d09e      	beq.n	8004bf0 <_vfiprintf_r+0x2c>
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	b01d      	add	sp, #116	; 0x74
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	2b25      	cmp	r3, #37	; 0x25
 8004cbe:	d0a7      	beq.n	8004c10 <_vfiprintf_r+0x4c>
 8004cc0:	46a8      	mov	r8, r5
 8004cc2:	e7a0      	b.n	8004c06 <_vfiprintf_r+0x42>
 8004cc4:	4a43      	ldr	r2, [pc, #268]	; (8004dd4 <_vfiprintf_r+0x210>)
 8004cc6:	4645      	mov	r5, r8
 8004cc8:	1a80      	subs	r0, r0, r2
 8004cca:	fa0b f000 	lsl.w	r0, fp, r0
 8004cce:	4318      	orrs	r0, r3
 8004cd0:	9004      	str	r0, [sp, #16]
 8004cd2:	e7bb      	b.n	8004c4c <_vfiprintf_r+0x88>
 8004cd4:	9a03      	ldr	r2, [sp, #12]
 8004cd6:	1d11      	adds	r1, r2, #4
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	9103      	str	r1, [sp, #12]
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	db01      	blt.n	8004ce4 <_vfiprintf_r+0x120>
 8004ce0:	9207      	str	r2, [sp, #28]
 8004ce2:	e004      	b.n	8004cee <_vfiprintf_r+0x12a>
 8004ce4:	4252      	negs	r2, r2
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	9207      	str	r2, [sp, #28]
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	f898 3000 	ldrb.w	r3, [r8]
 8004cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf4:	d110      	bne.n	8004d18 <_vfiprintf_r+0x154>
 8004cf6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004cfa:	f108 0101 	add.w	r1, r8, #1
 8004cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004d00:	d137      	bne.n	8004d72 <_vfiprintf_r+0x1ae>
 8004d02:	9b03      	ldr	r3, [sp, #12]
 8004d04:	f108 0802 	add.w	r8, r8, #2
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9203      	str	r2, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfb8      	it	lt
 8004d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d16:	9305      	str	r3, [sp, #20]
 8004d18:	4d31      	ldr	r5, [pc, #196]	; (8004de0 <_vfiprintf_r+0x21c>)
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	f898 1000 	ldrb.w	r1, [r8]
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 fc9f 	bl	8005664 <memchr>
 8004d26:	b140      	cbz	r0, 8004d3a <_vfiprintf_r+0x176>
 8004d28:	2340      	movs	r3, #64	; 0x40
 8004d2a:	1b40      	subs	r0, r0, r5
 8004d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8004d30:	9b04      	ldr	r3, [sp, #16]
 8004d32:	f108 0801 	add.w	r8, r8, #1
 8004d36:	4303      	orrs	r3, r0
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	f898 1000 	ldrb.w	r1, [r8]
 8004d3e:	2206      	movs	r2, #6
 8004d40:	4828      	ldr	r0, [pc, #160]	; (8004de4 <_vfiprintf_r+0x220>)
 8004d42:	f108 0701 	add.w	r7, r8, #1
 8004d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d4a:	f000 fc8b 	bl	8005664 <memchr>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d034      	beq.n	8004dbc <_vfiprintf_r+0x1f8>
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <_vfiprintf_r+0x224>)
 8004d54:	bb03      	cbnz	r3, 8004d98 <_vfiprintf_r+0x1d4>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	3307      	adds	r3, #7
 8004d5a:	f023 0307 	bic.w	r3, r3, #7
 8004d5e:	3308      	adds	r3, #8
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	444b      	add	r3, r9
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	e74c      	b.n	8004c04 <_vfiprintf_r+0x40>
 8004d6a:	fb00 3202 	mla	r2, r0, r2, r3
 8004d6e:	2101      	movs	r1, #1
 8004d70:	e786      	b.n	8004c80 <_vfiprintf_r+0xbc>
 8004d72:	2300      	movs	r3, #0
 8004d74:	250a      	movs	r5, #10
 8004d76:	4618      	mov	r0, r3
 8004d78:	9305      	str	r3, [sp, #20]
 8004d7a:	4688      	mov	r8, r1
 8004d7c:	f898 2000 	ldrb.w	r2, [r8]
 8004d80:	3101      	adds	r1, #1
 8004d82:	3a30      	subs	r2, #48	; 0x30
 8004d84:	2a09      	cmp	r2, #9
 8004d86:	d903      	bls.n	8004d90 <_vfiprintf_r+0x1cc>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0c5      	beq.n	8004d18 <_vfiprintf_r+0x154>
 8004d8c:	9005      	str	r0, [sp, #20]
 8004d8e:	e7c3      	b.n	8004d18 <_vfiprintf_r+0x154>
 8004d90:	fb05 2000 	mla	r0, r5, r0, r2
 8004d94:	2301      	movs	r3, #1
 8004d96:	e7f0      	b.n	8004d7a <_vfiprintf_r+0x1b6>
 8004d98:	ab03      	add	r3, sp, #12
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <_vfiprintf_r+0x228>)
 8004da0:	a904      	add	r1, sp, #16
 8004da2:	4630      	mov	r0, r6
 8004da4:	f3af 8000 	nop.w
 8004da8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004dac:	4681      	mov	r9, r0
 8004dae:	d1d8      	bne.n	8004d62 <_vfiprintf_r+0x19e>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	065b      	lsls	r3, r3, #25
 8004db4:	f53f af7d 	bmi.w	8004cb2 <_vfiprintf_r+0xee>
 8004db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dba:	e77c      	b.n	8004cb6 <_vfiprintf_r+0xf2>
 8004dbc:	ab03      	add	r3, sp, #12
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <_vfiprintf_r+0x228>)
 8004dc4:	a904      	add	r1, sp, #16
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 f88a 	bl	8004ee0 <_printf_i>
 8004dcc:	e7ec      	b.n	8004da8 <_vfiprintf_r+0x1e4>
 8004dce:	bf00      	nop
 8004dd0:	08005a60 	.word	0x08005a60
 8004dd4:	08005aaa 	.word	0x08005aaa
 8004dd8:	08005a80 	.word	0x08005a80
 8004ddc:	08005a40 	.word	0x08005a40
 8004de0:	08005ab0 	.word	0x08005ab0
 8004de4:	08005ab4 	.word	0x08005ab4
 8004de8:	00000000 	.word	0x00000000
 8004dec:	08004ba1 	.word	0x08004ba1

08004df0 <_printf_common>:
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	4691      	mov	r9, r2
 8004df6:	461f      	mov	r7, r3
 8004df8:	688a      	ldr	r2, [r1, #8]
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bfb8      	it	lt
 8004e02:	4613      	movlt	r3, r2
 8004e04:	f8c9 3000 	str.w	r3, [r9]
 8004e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e12:	b112      	cbz	r2, 8004e1a <_printf_common+0x2a>
 8004e14:	3301      	adds	r3, #1
 8004e16:	f8c9 3000 	str.w	r3, [r9]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	0699      	lsls	r1, r3, #26
 8004e1e:	bf42      	ittt	mi
 8004e20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e24:	3302      	addmi	r3, #2
 8004e26:	f8c9 3000 	strmi.w	r3, [r9]
 8004e2a:	6825      	ldr	r5, [r4, #0]
 8004e2c:	f015 0506 	ands.w	r5, r5, #6
 8004e30:	d107      	bne.n	8004e42 <_printf_common+0x52>
 8004e32:	f104 0a19 	add.w	sl, r4, #25
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	f8d9 2000 	ldr.w	r2, [r9]
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	db2a      	blt.n	8004e98 <_printf_common+0xa8>
 8004e42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	3300      	adds	r3, #0
 8004e4a:	bf18      	it	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	0692      	lsls	r2, r2, #26
 8004e50:	d42f      	bmi.n	8004eb2 <_printf_common+0xc2>
 8004e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e56:	4639      	mov	r1, r7
 8004e58:	4630      	mov	r0, r6
 8004e5a:	47c0      	blx	r8
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d022      	beq.n	8004ea6 <_printf_common+0xb6>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	68e5      	ldr	r5, [r4, #12]
 8004e64:	f003 0306 	and.w	r3, r3, #6
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	bf18      	it	ne
 8004e6c:	2500      	movne	r5, #0
 8004e6e:	f8d9 2000 	ldr.w	r2, [r9]
 8004e72:	f04f 0900 	mov.w	r9, #0
 8004e76:	bf08      	it	eq
 8004e78:	1aad      	subeq	r5, r5, r2
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	bf08      	it	eq
 8004e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bfc4      	itt	gt
 8004e88:	1a9b      	subgt	r3, r3, r2
 8004e8a:	18ed      	addgt	r5, r5, r3
 8004e8c:	341a      	adds	r4, #26
 8004e8e:	454d      	cmp	r5, r9
 8004e90:	d11b      	bne.n	8004eca <_printf_common+0xda>
 8004e92:	2000      	movs	r0, #0
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	47c0      	blx	r8
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d103      	bne.n	8004eae <_printf_common+0xbe>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7c1      	b.n	8004e36 <_printf_common+0x46>
 8004eb2:	2030      	movs	r0, #48	; 0x30
 8004eb4:	18e1      	adds	r1, r4, r3
 8004eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec0:	4422      	add	r2, r4
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec8:	e7c3      	b.n	8004e52 <_printf_common+0x62>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	47c0      	blx	r8
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d0e6      	beq.n	8004ea6 <_printf_common+0xb6>
 8004ed8:	f109 0901 	add.w	r9, r9, #1
 8004edc:	e7d7      	b.n	8004e8e <_printf_common+0x9e>
	...

08004ee0 <_printf_i>:
 8004ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	4617      	mov	r7, r2
 8004ee6:	7e0a      	ldrb	r2, [r1, #24]
 8004ee8:	b085      	sub	sp, #20
 8004eea:	2a6e      	cmp	r2, #110	; 0x6e
 8004eec:	4698      	mov	r8, r3
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ef4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004ef8:	f000 80bc 	beq.w	8005074 <_printf_i+0x194>
 8004efc:	d81a      	bhi.n	8004f34 <_printf_i+0x54>
 8004efe:	2a63      	cmp	r2, #99	; 0x63
 8004f00:	d02e      	beq.n	8004f60 <_printf_i+0x80>
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x3a>
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	f000 80c8 	beq.w	800509a <_printf_i+0x1ba>
 8004f0a:	2a58      	cmp	r2, #88	; 0x58
 8004f0c:	f000 808a 	beq.w	8005024 <_printf_i+0x144>
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004f18:	e02a      	b.n	8004f70 <_printf_i+0x90>
 8004f1a:	2a64      	cmp	r2, #100	; 0x64
 8004f1c:	d001      	beq.n	8004f22 <_printf_i+0x42>
 8004f1e:	2a69      	cmp	r2, #105	; 0x69
 8004f20:	d1f6      	bne.n	8004f10 <_printf_i+0x30>
 8004f22:	6821      	ldr	r1, [r4, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f2a:	d023      	beq.n	8004f74 <_printf_i+0x94>
 8004f2c:	1d11      	adds	r1, r2, #4
 8004f2e:	6019      	str	r1, [r3, #0]
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	e027      	b.n	8004f84 <_printf_i+0xa4>
 8004f34:	2a73      	cmp	r2, #115	; 0x73
 8004f36:	f000 80b4 	beq.w	80050a2 <_printf_i+0x1c2>
 8004f3a:	d808      	bhi.n	8004f4e <_printf_i+0x6e>
 8004f3c:	2a6f      	cmp	r2, #111	; 0x6f
 8004f3e:	d02a      	beq.n	8004f96 <_printf_i+0xb6>
 8004f40:	2a70      	cmp	r2, #112	; 0x70
 8004f42:	d1e5      	bne.n	8004f10 <_printf_i+0x30>
 8004f44:	680a      	ldr	r2, [r1, #0]
 8004f46:	f042 0220 	orr.w	r2, r2, #32
 8004f4a:	600a      	str	r2, [r1, #0]
 8004f4c:	e003      	b.n	8004f56 <_printf_i+0x76>
 8004f4e:	2a75      	cmp	r2, #117	; 0x75
 8004f50:	d021      	beq.n	8004f96 <_printf_i+0xb6>
 8004f52:	2a78      	cmp	r2, #120	; 0x78
 8004f54:	d1dc      	bne.n	8004f10 <_printf_i+0x30>
 8004f56:	2278      	movs	r2, #120	; 0x78
 8004f58:	496f      	ldr	r1, [pc, #444]	; (8005118 <_printf_i+0x238>)
 8004f5a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004f5e:	e064      	b.n	800502a <_printf_i+0x14a>
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004f66:	1d11      	adds	r1, r2, #4
 8004f68:	6019      	str	r1, [r3, #0]
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0a3      	b.n	80050bc <_printf_i+0x1dc>
 8004f74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f78:	f102 0104 	add.w	r1, r2, #4
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	d0d7      	beq.n	8004f30 <_printf_i+0x50>
 8004f80:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xb0>
 8004f88:	222d      	movs	r2, #45	; 0x2d
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f90:	4962      	ldr	r1, [pc, #392]	; (800511c <_printf_i+0x23c>)
 8004f92:	220a      	movs	r2, #10
 8004f94:	e017      	b.n	8004fc6 <_printf_i+0xe6>
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f9e:	d003      	beq.n	8004fa8 <_printf_i+0xc8>
 8004fa0:	1d08      	adds	r0, r1, #4
 8004fa2:	6018      	str	r0, [r3, #0]
 8004fa4:	680b      	ldr	r3, [r1, #0]
 8004fa6:	e006      	b.n	8004fb6 <_printf_i+0xd6>
 8004fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fac:	f101 0004 	add.w	r0, r1, #4
 8004fb0:	6018      	str	r0, [r3, #0]
 8004fb2:	d0f7      	beq.n	8004fa4 <_printf_i+0xc4>
 8004fb4:	880b      	ldrh	r3, [r1, #0]
 8004fb6:	2a6f      	cmp	r2, #111	; 0x6f
 8004fb8:	bf14      	ite	ne
 8004fba:	220a      	movne	r2, #10
 8004fbc:	2208      	moveq	r2, #8
 8004fbe:	4957      	ldr	r1, [pc, #348]	; (800511c <_printf_i+0x23c>)
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004fc6:	6865      	ldr	r5, [r4, #4]
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	60a5      	str	r5, [r4, #8]
 8004fcc:	f2c0 809c 	blt.w	8005108 <_printf_i+0x228>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	f020 0004 	bic.w	r0, r0, #4
 8004fd6:	6020      	str	r0, [r4, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d13f      	bne.n	800505c <_printf_i+0x17c>
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	f040 8095 	bne.w	800510c <_printf_i+0x22c>
 8004fe2:	4675      	mov	r5, lr
 8004fe4:	2a08      	cmp	r2, #8
 8004fe6:	d10b      	bne.n	8005000 <_printf_i+0x120>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07da      	lsls	r2, r3, #31
 8004fec:	d508      	bpl.n	8005000 <_printf_i+0x120>
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	6862      	ldr	r2, [r4, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bfde      	ittt	le
 8004ff6:	2330      	movle	r3, #48	; 0x30
 8004ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005000:	ebae 0305 	sub.w	r3, lr, r5
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	f8cd 8000 	str.w	r8, [sp]
 800500a:	463b      	mov	r3, r7
 800500c:	aa03      	add	r2, sp, #12
 800500e:	4621      	mov	r1, r4
 8005010:	4630      	mov	r0, r6
 8005012:	f7ff feed 	bl	8004df0 <_printf_common>
 8005016:	3001      	adds	r0, #1
 8005018:	d155      	bne.n	80050c6 <_printf_i+0x1e6>
 800501a:	f04f 30ff 	mov.w	r0, #4294967295
 800501e:	b005      	add	sp, #20
 8005020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005024:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005028:	493c      	ldr	r1, [pc, #240]	; (800511c <_printf_i+0x23c>)
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005032:	f100 0504 	add.w	r5, r0, #4
 8005036:	601d      	str	r5, [r3, #0]
 8005038:	d001      	beq.n	800503e <_printf_i+0x15e>
 800503a:	6803      	ldr	r3, [r0, #0]
 800503c:	e002      	b.n	8005044 <_printf_i+0x164>
 800503e:	0655      	lsls	r5, r2, #25
 8005040:	d5fb      	bpl.n	800503a <_printf_i+0x15a>
 8005042:	8803      	ldrh	r3, [r0, #0]
 8005044:	07d0      	lsls	r0, r2, #31
 8005046:	bf44      	itt	mi
 8005048:	f042 0220 	orrmi.w	r2, r2, #32
 800504c:	6022      	strmi	r2, [r4, #0]
 800504e:	b91b      	cbnz	r3, 8005058 <_printf_i+0x178>
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	f022 0220 	bic.w	r2, r2, #32
 8005056:	6022      	str	r2, [r4, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	e7b1      	b.n	8004fc0 <_printf_i+0xe0>
 800505c:	4675      	mov	r5, lr
 800505e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005062:	fb02 3310 	mls	r3, r2, r0, r3
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800506c:	4603      	mov	r3, r0
 800506e:	2800      	cmp	r0, #0
 8005070:	d1f5      	bne.n	800505e <_printf_i+0x17e>
 8005072:	e7b7      	b.n	8004fe4 <_printf_i+0x104>
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f010 0f80 	tst.w	r0, #128	; 0x80
 800507c:	6949      	ldr	r1, [r1, #20]
 800507e:	d004      	beq.n	800508a <_printf_i+0x1aa>
 8005080:	1d10      	adds	r0, r2, #4
 8005082:	6018      	str	r0, [r3, #0]
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	6019      	str	r1, [r3, #0]
 8005088:	e007      	b.n	800509a <_printf_i+0x1ba>
 800508a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800508e:	f102 0004 	add.w	r0, r2, #4
 8005092:	6018      	str	r0, [r3, #0]
 8005094:	6813      	ldr	r3, [r2, #0]
 8005096:	d0f6      	beq.n	8005086 <_printf_i+0x1a6>
 8005098:	8019      	strh	r1, [r3, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	4675      	mov	r5, lr
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	e7b1      	b.n	8005006 <_printf_i+0x126>
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	1d11      	adds	r1, r2, #4
 80050a6:	6019      	str	r1, [r3, #0]
 80050a8:	6815      	ldr	r5, [r2, #0]
 80050aa:	2100      	movs	r1, #0
 80050ac:	6862      	ldr	r2, [r4, #4]
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fad8 	bl	8005664 <memchr>
 80050b4:	b108      	cbz	r0, 80050ba <_printf_i+0x1da>
 80050b6:	1b40      	subs	r0, r0, r5
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	2300      	movs	r3, #0
 80050c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c4:	e79f      	b.n	8005006 <_printf_i+0x126>
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4639      	mov	r1, r7
 80050cc:	4630      	mov	r0, r6
 80050ce:	47c0      	blx	r8
 80050d0:	3001      	adds	r0, #1
 80050d2:	d0a2      	beq.n	800501a <_printf_i+0x13a>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	d507      	bpl.n	80050ea <_printf_i+0x20a>
 80050da:	2500      	movs	r5, #0
 80050dc:	f104 0919 	add.w	r9, r4, #25
 80050e0:	68e3      	ldr	r3, [r4, #12]
 80050e2:	9a03      	ldr	r2, [sp, #12]
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	429d      	cmp	r5, r3
 80050e8:	db05      	blt.n	80050f6 <_printf_i+0x216>
 80050ea:	68e0      	ldr	r0, [r4, #12]
 80050ec:	9b03      	ldr	r3, [sp, #12]
 80050ee:	4298      	cmp	r0, r3
 80050f0:	bfb8      	it	lt
 80050f2:	4618      	movlt	r0, r3
 80050f4:	e793      	b.n	800501e <_printf_i+0x13e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	464a      	mov	r2, r9
 80050fa:	4639      	mov	r1, r7
 80050fc:	4630      	mov	r0, r6
 80050fe:	47c0      	blx	r8
 8005100:	3001      	adds	r0, #1
 8005102:	d08a      	beq.n	800501a <_printf_i+0x13a>
 8005104:	3501      	adds	r5, #1
 8005106:	e7eb      	b.n	80050e0 <_printf_i+0x200>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1a7      	bne.n	800505c <_printf_i+0x17c>
 800510c:	780b      	ldrb	r3, [r1, #0]
 800510e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005116:	e765      	b.n	8004fe4 <_printf_i+0x104>
 8005118:	08005acc 	.word	0x08005acc
 800511c:	08005abb 	.word	0x08005abb

08005120 <_scanf_chars>:
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	4615      	mov	r5, r2
 8005126:	688a      	ldr	r2, [r1, #8]
 8005128:	4680      	mov	r8, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b932      	cbnz	r2, 800513c <_scanf_chars+0x1c>
 800512e:	698a      	ldr	r2, [r1, #24]
 8005130:	2a00      	cmp	r2, #0
 8005132:	bf0c      	ite	eq
 8005134:	2201      	moveq	r2, #1
 8005136:	f04f 32ff 	movne.w	r2, #4294967295
 800513a:	608a      	str	r2, [r1, #8]
 800513c:	2600      	movs	r6, #0
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	06d1      	lsls	r1, r2, #27
 8005142:	bf5f      	itttt	pl
 8005144:	681a      	ldrpl	r2, [r3, #0]
 8005146:	1d11      	addpl	r1, r2, #4
 8005148:	6019      	strpl	r1, [r3, #0]
 800514a:	6817      	ldrpl	r7, [r2, #0]
 800514c:	69a3      	ldr	r3, [r4, #24]
 800514e:	b1db      	cbz	r3, 8005188 <_scanf_chars+0x68>
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <_scanf_chars+0x44>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	6962      	ldr	r2, [r4, #20]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	b9a3      	cbnz	r3, 8005188 <_scanf_chars+0x68>
 800515e:	2e00      	cmp	r6, #0
 8005160:	d131      	bne.n	80051c6 <_scanf_chars+0xa6>
 8005162:	e006      	b.n	8005172 <_scanf_chars+0x52>
 8005164:	2b02      	cmp	r3, #2
 8005166:	d007      	beq.n	8005178 <_scanf_chars+0x58>
 8005168:	2e00      	cmp	r6, #0
 800516a:	d12c      	bne.n	80051c6 <_scanf_chars+0xa6>
 800516c:	69a3      	ldr	r3, [r4, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d129      	bne.n	80051c6 <_scanf_chars+0xa6>
 8005172:	2001      	movs	r0, #1
 8005174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005178:	f7ff f8be 	bl	80042f8 <__locale_ctype_ptr>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4418      	add	r0, r3
 8005182:	7843      	ldrb	r3, [r0, #1]
 8005184:	071b      	lsls	r3, r3, #28
 8005186:	d4ef      	bmi.n	8005168 <_scanf_chars+0x48>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	3601      	adds	r6, #1
 800518c:	06da      	lsls	r2, r3, #27
 800518e:	bf5e      	ittt	pl
 8005190:	682b      	ldrpl	r3, [r5, #0]
 8005192:	781b      	ldrbpl	r3, [r3, #0]
 8005194:	703b      	strbpl	r3, [r7, #0]
 8005196:	682a      	ldr	r2, [r5, #0]
 8005198:	686b      	ldr	r3, [r5, #4]
 800519a:	f102 0201 	add.w	r2, r2, #1
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	68a2      	ldr	r2, [r4, #8]
 80051a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80051a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80051aa:	606b      	str	r3, [r5, #4]
 80051ac:	bf58      	it	pl
 80051ae:	3701      	addpl	r7, #1
 80051b0:	60a2      	str	r2, [r4, #8]
 80051b2:	b142      	cbz	r2, 80051c6 <_scanf_chars+0xa6>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dcc9      	bgt.n	800514c <_scanf_chars+0x2c>
 80051b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051bc:	4629      	mov	r1, r5
 80051be:	4640      	mov	r0, r8
 80051c0:	4798      	blx	r3
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d0c2      	beq.n	800514c <_scanf_chars+0x2c>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	f013 0310 	ands.w	r3, r3, #16
 80051cc:	d105      	bne.n	80051da <_scanf_chars+0xba>
 80051ce:	68e2      	ldr	r2, [r4, #12]
 80051d0:	3201      	adds	r2, #1
 80051d2:	60e2      	str	r2, [r4, #12]
 80051d4:	69a2      	ldr	r2, [r4, #24]
 80051d6:	b102      	cbz	r2, 80051da <_scanf_chars+0xba>
 80051d8:	703b      	strb	r3, [r7, #0]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	2000      	movs	r0, #0
 80051de:	441e      	add	r6, r3
 80051e0:	6126      	str	r6, [r4, #16]
 80051e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080051e8 <_scanf_i>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	460c      	mov	r4, r1
 80051ee:	469a      	mov	sl, r3
 80051f0:	4b74      	ldr	r3, [pc, #464]	; (80053c4 <_scanf_i+0x1dc>)
 80051f2:	b087      	sub	sp, #28
 80051f4:	4683      	mov	fp, r0
 80051f6:	4616      	mov	r6, r2
 80051f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051fc:	ab03      	add	r3, sp, #12
 80051fe:	68a7      	ldr	r7, [r4, #8]
 8005200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005204:	4b70      	ldr	r3, [pc, #448]	; (80053c8 <_scanf_i+0x1e0>)
 8005206:	69a1      	ldr	r1, [r4, #24]
 8005208:	4a70      	ldr	r2, [pc, #448]	; (80053cc <_scanf_i+0x1e4>)
 800520a:	f104 091c 	add.w	r9, r4, #28
 800520e:	2903      	cmp	r1, #3
 8005210:	bf18      	it	ne
 8005212:	461a      	movne	r2, r3
 8005214:	1e7b      	subs	r3, r7, #1
 8005216:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800521a:	bf84      	itt	hi
 800521c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005220:	60a3      	strhi	r3, [r4, #8]
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	bf88      	it	hi
 8005226:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800522a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bf98      	it	ls
 8005232:	2700      	movls	r7, #0
 8005234:	464b      	mov	r3, r9
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	9200      	str	r2, [sp, #0]
 800523c:	bf88      	it	hi
 800523e:	197f      	addhi	r7, r7, r5
 8005240:	6831      	ldr	r1, [r6, #0]
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	ab03      	add	r3, sp, #12
 8005246:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800524a:	2202      	movs	r2, #2
 800524c:	7809      	ldrb	r1, [r1, #0]
 800524e:	f000 fa09 	bl	8005664 <memchr>
 8005252:	9b01      	ldr	r3, [sp, #4]
 8005254:	b328      	cbz	r0, 80052a2 <_scanf_i+0xba>
 8005256:	f1b8 0f01 	cmp.w	r8, #1
 800525a:	d156      	bne.n	800530a <_scanf_i+0x122>
 800525c:	6862      	ldr	r2, [r4, #4]
 800525e:	b92a      	cbnz	r2, 800526c <_scanf_i+0x84>
 8005260:	2208      	movs	r2, #8
 8005262:	6062      	str	r2, [r4, #4]
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	6022      	str	r2, [r4, #0]
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005272:	6022      	str	r2, [r4, #0]
 8005274:	68a2      	ldr	r2, [r4, #8]
 8005276:	1e51      	subs	r1, r2, #1
 8005278:	60a1      	str	r1, [r4, #8]
 800527a:	b192      	cbz	r2, 80052a2 <_scanf_i+0xba>
 800527c:	6832      	ldr	r2, [r6, #0]
 800527e:	1c5d      	adds	r5, r3, #1
 8005280:	1c51      	adds	r1, r2, #1
 8005282:	6031      	str	r1, [r6, #0]
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6873      	ldr	r3, [r6, #4]
 800528a:	3b01      	subs	r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	6073      	str	r3, [r6, #4]
 8005290:	dc06      	bgt.n	80052a0 <_scanf_i+0xb8>
 8005292:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005296:	4631      	mov	r1, r6
 8005298:	4658      	mov	r0, fp
 800529a:	4798      	blx	r3
 800529c:	2800      	cmp	r0, #0
 800529e:	d177      	bne.n	8005390 <_scanf_i+0x1a8>
 80052a0:	462b      	mov	r3, r5
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	f1b8 0f03 	cmp.w	r8, #3
 80052aa:	d1c9      	bne.n	8005240 <_scanf_i+0x58>
 80052ac:	6862      	ldr	r2, [r4, #4]
 80052ae:	b90a      	cbnz	r2, 80052b4 <_scanf_i+0xcc>
 80052b0:	220a      	movs	r2, #10
 80052b2:	6062      	str	r2, [r4, #4]
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	4946      	ldr	r1, [pc, #280]	; (80053d0 <_scanf_i+0x1e8>)
 80052b8:	6960      	ldr	r0, [r4, #20]
 80052ba:	1a89      	subs	r1, r1, r2
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	f000 f8ab 	bl	8005418 <__sccl>
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	f04f 0800 	mov.w	r8, #0
 80052c8:	461d      	mov	r5, r3
 80052ca:	68a3      	ldr	r3, [r4, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d039      	beq.n	8005344 <_scanf_i+0x15c>
 80052d0:	6831      	ldr	r1, [r6, #0]
 80052d2:	6960      	ldr	r0, [r4, #20]
 80052d4:	780a      	ldrb	r2, [r1, #0]
 80052d6:	5c80      	ldrb	r0, [r0, r2]
 80052d8:	2800      	cmp	r0, #0
 80052da:	d033      	beq.n	8005344 <_scanf_i+0x15c>
 80052dc:	2a30      	cmp	r2, #48	; 0x30
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	d121      	bne.n	8005326 <_scanf_i+0x13e>
 80052e2:	0510      	lsls	r0, r2, #20
 80052e4:	d51f      	bpl.n	8005326 <_scanf_i+0x13e>
 80052e6:	f108 0801 	add.w	r8, r8, #1
 80052ea:	b117      	cbz	r7, 80052f2 <_scanf_i+0x10a>
 80052ec:	3301      	adds	r3, #1
 80052ee:	3f01      	subs	r7, #1
 80052f0:	60a3      	str	r3, [r4, #8]
 80052f2:	6873      	ldr	r3, [r6, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	6073      	str	r3, [r6, #4]
 80052fa:	dd1c      	ble.n	8005336 <_scanf_i+0x14e>
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	3b01      	subs	r3, #1
 8005306:	60a3      	str	r3, [r4, #8]
 8005308:	e7df      	b.n	80052ca <_scanf_i+0xe2>
 800530a:	f1b8 0f02 	cmp.w	r8, #2
 800530e:	d1b1      	bne.n	8005274 <_scanf_i+0x8c>
 8005310:	6822      	ldr	r2, [r4, #0]
 8005312:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005316:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800531a:	d1c2      	bne.n	80052a2 <_scanf_i+0xba>
 800531c:	2110      	movs	r1, #16
 800531e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005322:	6061      	str	r1, [r4, #4]
 8005324:	e7a5      	b.n	8005272 <_scanf_i+0x8a>
 8005326:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	780b      	ldrb	r3, [r1, #0]
 800532e:	3501      	adds	r5, #1
 8005330:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005334:	e7dd      	b.n	80052f2 <_scanf_i+0x10a>
 8005336:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800533a:	4631      	mov	r1, r6
 800533c:	4658      	mov	r0, fp
 800533e:	4798      	blx	r3
 8005340:	2800      	cmp	r0, #0
 8005342:	d0de      	beq.n	8005302 <_scanf_i+0x11a>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	05d9      	lsls	r1, r3, #23
 8005348:	d50c      	bpl.n	8005364 <_scanf_i+0x17c>
 800534a:	454d      	cmp	r5, r9
 800534c:	d908      	bls.n	8005360 <_scanf_i+0x178>
 800534e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005352:	1e6f      	subs	r7, r5, #1
 8005354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005358:	4632      	mov	r2, r6
 800535a:	4658      	mov	r0, fp
 800535c:	4798      	blx	r3
 800535e:	463d      	mov	r5, r7
 8005360:	454d      	cmp	r5, r9
 8005362:	d02c      	beq.n	80053be <_scanf_i+0x1d6>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	f012 0210 	ands.w	r2, r2, #16
 800536a:	d11e      	bne.n	80053aa <_scanf_i+0x1c2>
 800536c:	702a      	strb	r2, [r5, #0]
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	4649      	mov	r1, r9
 8005372:	4658      	mov	r0, fp
 8005374:	9e00      	ldr	r6, [sp, #0]
 8005376:	47b0      	blx	r6
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	f8da 3000 	ldr.w	r3, [sl]
 800537e:	f012 0f20 	tst.w	r2, #32
 8005382:	d008      	beq.n	8005396 <_scanf_i+0x1ae>
 8005384:	1d1a      	adds	r2, r3, #4
 8005386:	f8ca 2000 	str.w	r2, [sl]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6018      	str	r0, [r3, #0]
 800538e:	e009      	b.n	80053a4 <_scanf_i+0x1bc>
 8005390:	f04f 0800 	mov.w	r8, #0
 8005394:	e7d6      	b.n	8005344 <_scanf_i+0x15c>
 8005396:	07d2      	lsls	r2, r2, #31
 8005398:	d5f4      	bpl.n	8005384 <_scanf_i+0x19c>
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	f8ca 2000 	str.w	r2, [sl]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	8018      	strh	r0, [r3, #0]
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60e3      	str	r3, [r4, #12]
 80053aa:	2000      	movs	r0, #0
 80053ac:	eba5 0509 	sub.w	r5, r5, r9
 80053b0:	44a8      	add	r8, r5
 80053b2:	6925      	ldr	r5, [r4, #16]
 80053b4:	4445      	add	r5, r8
 80053b6:	6125      	str	r5, [r4, #16]
 80053b8:	b007      	add	sp, #28
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	2001      	movs	r0, #1
 80053c0:	e7fa      	b.n	80053b8 <_scanf_i+0x1d0>
 80053c2:	bf00      	nop
 80053c4:	080057dc 	.word	0x080057dc
 80053c8:	08005571 	.word	0x08005571
 80053cc:	08003de5 	.word	0x08003de5
 80053d0:	08005aed 	.word	0x08005aed

080053d4 <_read_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4605      	mov	r5, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	2200      	movs	r2, #0
 80053de:	4c05      	ldr	r4, [pc, #20]	; (80053f4 <_read_r+0x20>)
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fa fee1 	bl	80001aa <_read>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_read_r+0x1e>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_read_r+0x1e>
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	2000290c 	.word	0x2000290c

080053f8 <_sbrk_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	2300      	movs	r3, #0
 80053fc:	4c05      	ldr	r4, [pc, #20]	; (8005414 <_sbrk_r+0x1c>)
 80053fe:	4605      	mov	r5, r0
 8005400:	4608      	mov	r0, r1
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	f7fa feee 	bl	80001e4 <_sbrk>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_sbrk_r+0x1a>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	b103      	cbz	r3, 8005412 <_sbrk_r+0x1a>
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	2000290c 	.word	0x2000290c

08005418 <__sccl>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	780b      	ldrb	r3, [r1, #0]
 800541c:	1e44      	subs	r4, r0, #1
 800541e:	2b5e      	cmp	r3, #94	; 0x5e
 8005420:	bf13      	iteet	ne
 8005422:	1c4a      	addne	r2, r1, #1
 8005424:	1c8a      	addeq	r2, r1, #2
 8005426:	784b      	ldrbeq	r3, [r1, #1]
 8005428:	2100      	movne	r1, #0
 800542a:	bf08      	it	eq
 800542c:	2101      	moveq	r1, #1
 800542e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005432:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005436:	42a5      	cmp	r5, r4
 8005438:	d1fb      	bne.n	8005432 <__sccl+0x1a>
 800543a:	b913      	cbnz	r3, 8005442 <__sccl+0x2a>
 800543c:	3a01      	subs	r2, #1
 800543e:	4610      	mov	r0, r2
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	f081 0401 	eor.w	r4, r1, #1
 8005446:	4611      	mov	r1, r2
 8005448:	54c4      	strb	r4, [r0, r3]
 800544a:	780d      	ldrb	r5, [r1, #0]
 800544c:	1c4a      	adds	r2, r1, #1
 800544e:	2d2d      	cmp	r5, #45	; 0x2d
 8005450:	d006      	beq.n	8005460 <__sccl+0x48>
 8005452:	2d5d      	cmp	r5, #93	; 0x5d
 8005454:	d0f3      	beq.n	800543e <__sccl+0x26>
 8005456:	b90d      	cbnz	r5, 800545c <__sccl+0x44>
 8005458:	460a      	mov	r2, r1
 800545a:	e7f0      	b.n	800543e <__sccl+0x26>
 800545c:	462b      	mov	r3, r5
 800545e:	e7f2      	b.n	8005446 <__sccl+0x2e>
 8005460:	784e      	ldrb	r6, [r1, #1]
 8005462:	2e5d      	cmp	r6, #93	; 0x5d
 8005464:	d0fa      	beq.n	800545c <__sccl+0x44>
 8005466:	42b3      	cmp	r3, r6
 8005468:	dcf8      	bgt.n	800545c <__sccl+0x44>
 800546a:	3102      	adds	r1, #2
 800546c:	3301      	adds	r3, #1
 800546e:	429e      	cmp	r6, r3
 8005470:	54c4      	strb	r4, [r0, r3]
 8005472:	dcfb      	bgt.n	800546c <__sccl+0x54>
 8005474:	e7e9      	b.n	800544a <__sccl+0x32>

08005476 <_strtoul_l.isra.0>:
 8005476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547a:	4680      	mov	r8, r0
 800547c:	4689      	mov	r9, r1
 800547e:	4692      	mov	sl, r2
 8005480:	461e      	mov	r6, r3
 8005482:	460f      	mov	r7, r1
 8005484:	463d      	mov	r5, r7
 8005486:	9808      	ldr	r0, [sp, #32]
 8005488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800548c:	f7fe ff30 	bl	80042f0 <__locale_ctype_ptr_l>
 8005490:	4420      	add	r0, r4
 8005492:	7843      	ldrb	r3, [r0, #1]
 8005494:	f013 0308 	ands.w	r3, r3, #8
 8005498:	d10a      	bne.n	80054b0 <_strtoul_l.isra.0+0x3a>
 800549a:	2c2d      	cmp	r4, #45	; 0x2d
 800549c:	d10a      	bne.n	80054b4 <_strtoul_l.isra.0+0x3e>
 800549e:	2301      	movs	r3, #1
 80054a0:	782c      	ldrb	r4, [r5, #0]
 80054a2:	1cbd      	adds	r5, r7, #2
 80054a4:	b15e      	cbz	r6, 80054be <_strtoul_l.isra.0+0x48>
 80054a6:	2e10      	cmp	r6, #16
 80054a8:	d113      	bne.n	80054d2 <_strtoul_l.isra.0+0x5c>
 80054aa:	2c30      	cmp	r4, #48	; 0x30
 80054ac:	d009      	beq.n	80054c2 <_strtoul_l.isra.0+0x4c>
 80054ae:	e010      	b.n	80054d2 <_strtoul_l.isra.0+0x5c>
 80054b0:	462f      	mov	r7, r5
 80054b2:	e7e7      	b.n	8005484 <_strtoul_l.isra.0+0xe>
 80054b4:	2c2b      	cmp	r4, #43	; 0x2b
 80054b6:	bf04      	itt	eq
 80054b8:	782c      	ldrbeq	r4, [r5, #0]
 80054ba:	1cbd      	addeq	r5, r7, #2
 80054bc:	e7f2      	b.n	80054a4 <_strtoul_l.isra.0+0x2e>
 80054be:	2c30      	cmp	r4, #48	; 0x30
 80054c0:	d125      	bne.n	800550e <_strtoul_l.isra.0+0x98>
 80054c2:	782a      	ldrb	r2, [r5, #0]
 80054c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80054c8:	2a58      	cmp	r2, #88	; 0x58
 80054ca:	d14a      	bne.n	8005562 <_strtoul_l.isra.0+0xec>
 80054cc:	2610      	movs	r6, #16
 80054ce:	786c      	ldrb	r4, [r5, #1]
 80054d0:	3502      	adds	r5, #2
 80054d2:	f04f 31ff 	mov.w	r1, #4294967295
 80054d6:	fbb1 f1f6 	udiv	r1, r1, r6
 80054da:	2700      	movs	r7, #0
 80054dc:	fb06 fe01 	mul.w	lr, r6, r1
 80054e0:	4638      	mov	r0, r7
 80054e2:	ea6f 0e0e 	mvn.w	lr, lr
 80054e6:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80054ea:	2a09      	cmp	r2, #9
 80054ec:	d811      	bhi.n	8005512 <_strtoul_l.isra.0+0x9c>
 80054ee:	4614      	mov	r4, r2
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	dd1d      	ble.n	8005530 <_strtoul_l.isra.0+0xba>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	db18      	blt.n	800552a <_strtoul_l.isra.0+0xb4>
 80054f8:	4281      	cmp	r1, r0
 80054fa:	d316      	bcc.n	800552a <_strtoul_l.isra.0+0xb4>
 80054fc:	d101      	bne.n	8005502 <_strtoul_l.isra.0+0x8c>
 80054fe:	45a6      	cmp	lr, r4
 8005500:	db13      	blt.n	800552a <_strtoul_l.isra.0+0xb4>
 8005502:	2701      	movs	r7, #1
 8005504:	fb00 4006 	mla	r0, r0, r6, r4
 8005508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800550c:	e7eb      	b.n	80054e6 <_strtoul_l.isra.0+0x70>
 800550e:	260a      	movs	r6, #10
 8005510:	e7df      	b.n	80054d2 <_strtoul_l.isra.0+0x5c>
 8005512:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8005516:	2a19      	cmp	r2, #25
 8005518:	d801      	bhi.n	800551e <_strtoul_l.isra.0+0xa8>
 800551a:	3c37      	subs	r4, #55	; 0x37
 800551c:	e7e8      	b.n	80054f0 <_strtoul_l.isra.0+0x7a>
 800551e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8005522:	2a19      	cmp	r2, #25
 8005524:	d804      	bhi.n	8005530 <_strtoul_l.isra.0+0xba>
 8005526:	3c57      	subs	r4, #87	; 0x57
 8005528:	e7e2      	b.n	80054f0 <_strtoul_l.isra.0+0x7a>
 800552a:	f04f 37ff 	mov.w	r7, #4294967295
 800552e:	e7eb      	b.n	8005508 <_strtoul_l.isra.0+0x92>
 8005530:	2f00      	cmp	r7, #0
 8005532:	da09      	bge.n	8005548 <_strtoul_l.isra.0+0xd2>
 8005534:	2322      	movs	r3, #34	; 0x22
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	f8c8 3000 	str.w	r3, [r8]
 800553e:	f1ba 0f00 	cmp.w	sl, #0
 8005542:	d107      	bne.n	8005554 <_strtoul_l.isra.0+0xde>
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	b103      	cbz	r3, 800554c <_strtoul_l.isra.0+0xd6>
 800554a:	4240      	negs	r0, r0
 800554c:	f1ba 0f00 	cmp.w	sl, #0
 8005550:	d00c      	beq.n	800556c <_strtoul_l.isra.0+0xf6>
 8005552:	b127      	cbz	r7, 800555e <_strtoul_l.isra.0+0xe8>
 8005554:	3d01      	subs	r5, #1
 8005556:	f8ca 5000 	str.w	r5, [sl]
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	464d      	mov	r5, r9
 8005560:	e7f9      	b.n	8005556 <_strtoul_l.isra.0+0xe0>
 8005562:	2430      	movs	r4, #48	; 0x30
 8005564:	2e00      	cmp	r6, #0
 8005566:	d1b4      	bne.n	80054d2 <_strtoul_l.isra.0+0x5c>
 8005568:	2608      	movs	r6, #8
 800556a:	e7b2      	b.n	80054d2 <_strtoul_l.isra.0+0x5c>
 800556c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005570 <_strtoul_r>:
 8005570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005572:	4c06      	ldr	r4, [pc, #24]	; (800558c <_strtoul_r+0x1c>)
 8005574:	4d06      	ldr	r5, [pc, #24]	; (8005590 <_strtoul_r+0x20>)
 8005576:	6824      	ldr	r4, [r4, #0]
 8005578:	6a24      	ldr	r4, [r4, #32]
 800557a:	2c00      	cmp	r4, #0
 800557c:	bf08      	it	eq
 800557e:	462c      	moveq	r4, r5
 8005580:	9400      	str	r4, [sp, #0]
 8005582:	f7ff ff78 	bl	8005476 <_strtoul_l.isra.0>
 8005586:	b003      	add	sp, #12
 8005588:	bd30      	pop	{r4, r5, pc}
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c
 8005590:	20000070 	.word	0x20000070

08005594 <__submore>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800559c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d11c      	bne.n	80055de <__submore+0x4a>
 80055a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055a8:	f7fe ff88 	bl	80044bc <_malloc_r>
 80055ac:	b918      	cbnz	r0, 80055b6 <__submore+0x22>
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80055bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80055c0:	6360      	str	r0, [r4, #52]	; 0x34
 80055c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80055c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80055ce:	7043      	strb	r3, [r0, #1]
 80055d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055d4:	7003      	strb	r3, [r0, #0]
 80055d6:	6020      	str	r0, [r4, #0]
 80055d8:	2000      	movs	r0, #0
 80055da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055e0:	0077      	lsls	r7, r6, #1
 80055e2:	463a      	mov	r2, r7
 80055e4:	f000 f868 	bl	80056b8 <_realloc_r>
 80055e8:	4605      	mov	r5, r0
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0df      	beq.n	80055ae <__submore+0x1a>
 80055ee:	eb00 0806 	add.w	r8, r0, r6
 80055f2:	4601      	mov	r1, r0
 80055f4:	4632      	mov	r2, r6
 80055f6:	4640      	mov	r0, r8
 80055f8:	f7fe f9da 	bl	80039b0 <memcpy>
 80055fc:	f8c4 8000 	str.w	r8, [r4]
 8005600:	6365      	str	r5, [r4, #52]	; 0x34
 8005602:	63a7      	str	r7, [r4, #56]	; 0x38
 8005604:	e7e8      	b.n	80055d8 <__submore+0x44>

08005606 <__ascii_wctomb>:
 8005606:	b149      	cbz	r1, 800561c <__ascii_wctomb+0x16>
 8005608:	2aff      	cmp	r2, #255	; 0xff
 800560a:	bf8b      	itete	hi
 800560c:	238a      	movhi	r3, #138	; 0x8a
 800560e:	700a      	strbls	r2, [r1, #0]
 8005610:	6003      	strhi	r3, [r0, #0]
 8005612:	2001      	movls	r0, #1
 8005614:	bf88      	it	hi
 8005616:	f04f 30ff 	movhi.w	r0, #4294967295
 800561a:	4770      	bx	lr
 800561c:	4608      	mov	r0, r1
 800561e:	4770      	bx	lr

08005620 <_fstat_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	2300      	movs	r3, #0
 8005624:	4c06      	ldr	r4, [pc, #24]	; (8005640 <_fstat_r+0x20>)
 8005626:	4605      	mov	r5, r0
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	f7fa fdf6 	bl	800021e <_fstat>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d102      	bne.n	800563c <_fstat_r+0x1c>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	b103      	cbz	r3, 800563c <_fstat_r+0x1c>
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	bd38      	pop	{r3, r4, r5, pc}
 800563e:	bf00      	nop
 8005640:	2000290c 	.word	0x2000290c

08005644 <_isatty_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	2300      	movs	r3, #0
 8005648:	4c05      	ldr	r4, [pc, #20]	; (8005660 <_isatty_r+0x1c>)
 800564a:	4605      	mov	r5, r0
 800564c:	4608      	mov	r0, r1
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	f7fa fdea 	bl	8000228 <_isatty>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_isatty_r+0x1a>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	b103      	cbz	r3, 800565e <_isatty_r+0x1a>
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	2000290c 	.word	0x2000290c

08005664 <memchr>:
 8005664:	b510      	push	{r4, lr}
 8005666:	b2c9      	uxtb	r1, r1
 8005668:	4402      	add	r2, r0
 800566a:	4290      	cmp	r0, r2
 800566c:	4603      	mov	r3, r0
 800566e:	d101      	bne.n	8005674 <memchr+0x10>
 8005670:	2000      	movs	r0, #0
 8005672:	bd10      	pop	{r4, pc}
 8005674:	781c      	ldrb	r4, [r3, #0]
 8005676:	3001      	adds	r0, #1
 8005678:	428c      	cmp	r4, r1
 800567a:	d1f6      	bne.n	800566a <memchr+0x6>
 800567c:	4618      	mov	r0, r3
 800567e:	bd10      	pop	{r4, pc}

08005680 <memmove>:
 8005680:	4288      	cmp	r0, r1
 8005682:	b510      	push	{r4, lr}
 8005684:	eb01 0302 	add.w	r3, r1, r2
 8005688:	d803      	bhi.n	8005692 <memmove+0x12>
 800568a:	1e42      	subs	r2, r0, #1
 800568c:	4299      	cmp	r1, r3
 800568e:	d10c      	bne.n	80056aa <memmove+0x2a>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	4298      	cmp	r0, r3
 8005694:	d2f9      	bcs.n	800568a <memmove+0xa>
 8005696:	1881      	adds	r1, r0, r2
 8005698:	1ad2      	subs	r2, r2, r3
 800569a:	42d3      	cmn	r3, r2
 800569c:	d100      	bne.n	80056a0 <memmove+0x20>
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056a8:	e7f7      	b.n	800569a <memmove+0x1a>
 80056aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056b2:	e7eb      	b.n	800568c <memmove+0xc>

080056b4 <__malloc_lock>:
 80056b4:	4770      	bx	lr

080056b6 <__malloc_unlock>:
 80056b6:	4770      	bx	lr

080056b8 <_realloc_r>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	4607      	mov	r7, r0
 80056bc:	4614      	mov	r4, r2
 80056be:	460e      	mov	r6, r1
 80056c0:	b921      	cbnz	r1, 80056cc <_realloc_r+0x14>
 80056c2:	4611      	mov	r1, r2
 80056c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056c8:	f7fe bef8 	b.w	80044bc <_malloc_r>
 80056cc:	b922      	cbnz	r2, 80056d8 <_realloc_r+0x20>
 80056ce:	f7fe fea9 	bl	8004424 <_free_r>
 80056d2:	4625      	mov	r5, r4
 80056d4:	4628      	mov	r0, r5
 80056d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d8:	f000 f814 	bl	8005704 <_malloc_usable_size_r>
 80056dc:	4284      	cmp	r4, r0
 80056de:	d90f      	bls.n	8005700 <_realloc_r+0x48>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4638      	mov	r0, r7
 80056e4:	f7fe feea 	bl	80044bc <_malloc_r>
 80056e8:	4605      	mov	r5, r0
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0f2      	beq.n	80056d4 <_realloc_r+0x1c>
 80056ee:	4631      	mov	r1, r6
 80056f0:	4622      	mov	r2, r4
 80056f2:	f7fe f95d 	bl	80039b0 <memcpy>
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7fe fe93 	bl	8004424 <_free_r>
 80056fe:	e7e9      	b.n	80056d4 <_realloc_r+0x1c>
 8005700:	4635      	mov	r5, r6
 8005702:	e7e7      	b.n	80056d4 <_realloc_r+0x1c>

08005704 <_malloc_usable_size_r>:
 8005704:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005708:	2800      	cmp	r0, #0
 800570a:	f1a0 0004 	sub.w	r0, r0, #4
 800570e:	bfbc      	itt	lt
 8005710:	580b      	ldrlt	r3, [r1, r0]
 8005712:	18c0      	addlt	r0, r0, r3
 8005714:	4770      	bx	lr
	...

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
