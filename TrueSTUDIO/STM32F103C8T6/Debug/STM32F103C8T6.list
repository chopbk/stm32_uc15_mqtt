
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  0800547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002740  200001dc  08005658  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000291c  08005658  0002291c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000b59a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a308  00000000  00000000  0002b79f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051a5  00000000  00000000  00055aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001388  00000000  00000000  0005ac50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb0  00000000  00000000  0005bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f11b  00000000  00000000  0005db88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006dee  00000000  00000000  0006cca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00073a91  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004650  00000000  00000000  00073b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005058 	.word	0x08005058

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005058 	.word	0x08005058

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000160:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000162:	e003      	b.n	800016c <LoopCopyDataInit>

08000164 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000164:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000166:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000168:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800016a:	3104      	adds	r1, #4

0800016c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800016c:	480a      	ldr	r0, [pc, #40]	; (8000198 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800016e:	4b0b      	ldr	r3, [pc, #44]	; (800019c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000170:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000172:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000174:	d3f6      	bcc.n	8000164 <CopyDataInit>
  ldr r2, =_sbss
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000178:	e002      	b.n	8000180 <LoopFillZerobss>

0800017a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800017a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800017c:	f842 3b04 	str.w	r3, [r2], #4

08000180 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000182:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000184:	d3f9      	bcc.n	800017a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000186:	f000 fb3b 	bl	8000800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800018a:	f003 fe2d 	bl	8003de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800018e:	f000 f8e1 	bl	8000354 <main>
  bx lr
 8000192:	4770      	bx	lr
  ldr r3, =_sidata
 8000194:	0800547c 	.word	0x0800547c
  ldr r0, =_sdata
 8000198:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800019c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80001a0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80001a4:	2000291c 	.word	0x2000291c

080001a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001a8:	e7fe      	b.n	80001a8 <ADC1_2_IRQHandler>

080001aa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80001aa:	b570      	push	{r4, r5, r6, lr}
 80001ac:	460e      	mov	r6, r1
 80001ae:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b0:	460c      	mov	r4, r1
 80001b2:	1ba3      	subs	r3, r4, r6
 80001b4:	429d      	cmp	r5, r3
 80001b6:	dc01      	bgt.n	80001bc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80001b8:	4628      	mov	r0, r5
 80001ba:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80001bc:	f3af 8000 	nop.w
 80001c0:	f804 0b01 	strb.w	r0, [r4], #1
 80001c4:	e7f5      	b.n	80001b2 <_read+0x8>

080001c6 <_write>:

int _write(int file, char *ptr, int len)
{
 80001c6:	b570      	push	{r4, r5, r6, lr}
 80001c8:	460e      	mov	r6, r1
 80001ca:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001cc:	460c      	mov	r4, r1
 80001ce:	1ba3      	subs	r3, r4, r6
 80001d0:	429d      	cmp	r5, r3
 80001d2:	dc01      	bgt.n	80001d8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80001d4:	4628      	mov	r0, r5
 80001d6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80001d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80001dc:	f000 f88e 	bl	80002fc <__io_putchar>
 80001e0:	e7f5      	b.n	80001ce <_write+0x8>
	...

080001e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80001e4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <_sbrk+0x2c>)
{
 80001e8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80001ea:	6819      	ldr	r1, [r3, #0]
 80001ec:	b909      	cbnz	r1, 80001f2 <_sbrk+0xe>
		heap_end = &end;
 80001ee:	4909      	ldr	r1, [pc, #36]	; (8000214 <_sbrk+0x30>)
 80001f0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80001f2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80001f4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80001f6:	4402      	add	r2, r0
 80001f8:	428a      	cmp	r2, r1
 80001fa:	d906      	bls.n	800020a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80001fc:	f003 fdee 	bl	8003ddc <__errno>
 8000200:	230c      	movs	r3, #12
 8000202:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000204:	f04f 30ff 	mov.w	r0, #4294967295
 8000208:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800020a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800020c:	bd08      	pop	{r3, pc}
 800020e:	bf00      	nop
 8000210:	200001f8 	.word	0x200001f8
 8000214:	2000291c 	.word	0x2000291c

08000218 <_close>:

int _close(int file)
{
	return -1;
}
 8000218:	f04f 30ff 	mov.w	r0, #4294967295
 800021c:	4770      	bx	lr

0800021e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800021e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000222:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000224:	604b      	str	r3, [r1, #4]
}
 8000226:	4770      	bx	lr

08000228 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000228:	2001      	movs	r0, #1
 800022a:	4770      	bx	lr

0800022c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800022c:	2000      	movs	r0, #0
 800022e:	4770      	bx	lr

08000230 <defaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 8000230:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f001 ffa8 	bl	8002188 <osDelay>
 8000238:	e7fb      	b.n	8000232 <defaultTask+0x2>
	...

0800023c <displayTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTaskFunc */
void displayTaskFunc(void const * argument)
{
 800023c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN displayTaskFunc */
  /* Infinite loop */
	uint8_t rxchar;
  for(;;)
  {
	if(RINGBUF_GetFill(&RxUart3RingBuff)){
 800023e:	4d13      	ldr	r5, [pc, #76]	; (800028c <displayTaskFunc+0x50>)
		RINGBUF_Get(&RxUart3RingBuff, &rxchar);
		HAL_UART_Transmit(&huart1, &rxchar, 1, 0xFFFF);
 8000240:	4e13      	ldr	r6, [pc, #76]	; (8000290 <displayTaskFunc+0x54>)
	}
	if(RINGBUF_GetFill(&RxUart1RingBuff)){
 8000242:	4c14      	ldr	r4, [pc, #80]	; (8000294 <displayTaskFunc+0x58>)
	if(RINGBUF_GetFill(&RxUart3RingBuff)){
 8000244:	4628      	mov	r0, r5
 8000246:	f001 ff73 	bl	8002130 <RINGBUF_GetFill>
 800024a:	b160      	cbz	r0, 8000266 <displayTaskFunc+0x2a>
		RINGBUF_Get(&RxUart3RingBuff, &rxchar);
 800024c:	f10d 0107 	add.w	r1, sp, #7
 8000250:	4628      	mov	r0, r5
 8000252:	f001 ff56 	bl	8002102 <RINGBUF_Get>
		HAL_UART_Transmit(&huart1, &rxchar, 1, 0xFFFF);
 8000256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025a:	2201      	movs	r2, #1
 800025c:	f10d 0107 	add.w	r1, sp, #7
 8000260:	4630      	mov	r0, r6
 8000262:	f001 f9f3 	bl	800164c <HAL_UART_Transmit>
	if(RINGBUF_GetFill(&RxUart1RingBuff)){
 8000266:	4620      	mov	r0, r4
 8000268:	f001 ff62 	bl	8002130 <RINGBUF_GetFill>
 800026c:	2800      	cmp	r0, #0
 800026e:	d0e9      	beq.n	8000244 <displayTaskFunc+0x8>
		RINGBUF_Get(&RxUart1RingBuff, &rxchar);
 8000270:	f10d 0107 	add.w	r1, sp, #7
 8000274:	4620      	mov	r0, r4
 8000276:	f001 ff44 	bl	8002102 <RINGBUF_Get>
		HAL_UART_Transmit(&huart3, &rxchar, 1, 0xFFFF);
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	2201      	movs	r2, #1
 8000280:	f10d 0107 	add.w	r1, sp, #7
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <displayTaskFunc+0x5c>)
 8000286:	f001 f9e1 	bl	800164c <HAL_UART_Transmit>
 800028a:	e7db      	b.n	8000244 <displayTaskFunc+0x8>
 800028c:	20002634 	.word	0x20002634
 8000290:	20002390 	.word	0x20002390
 8000294:	2000264c 	.word	0x2000264c
 8000298:	20002350 	.word	0x20002350

0800029c <LEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDTask */
void LEDTask(void const * argument)
{
 800029c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint16_t data;
  /* USER CODE BEGIN LEDTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageWaiting(ledQueueHandle)){
 800029e:	4d15      	ldr	r5, [pc, #84]	; (80002f4 <LEDTask+0x58>)
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
		osDelay(50);
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
	} else {
		osDelay(1000);
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
 80002a0:	4c15      	ldr	r4, [pc, #84]	; (80002f8 <LEDTask+0x5c>)
	  if(osMessageWaiting(ledQueueHandle)){
 80002a2:	6828      	ldr	r0, [r5, #0]
 80002a4:	f002 f85c 	bl	8002360 <osMessageWaiting>
 80002a8:	b130      	cbz	r0, 80002b8 <LEDTask+0x1c>
		  event = osMessageGet(ledQueueHandle, 10);
 80002aa:	220a      	movs	r2, #10
 80002ac:	6829      	ldr	r1, [r5, #0]
 80002ae:	a801      	add	r0, sp, #4
 80002b0:	f001 fffe 	bl	80022b0 <osMessageGet>
		  data = event.value.v;
 80002b4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
	if(data & POW_FLAG){
 80002b8:	07f3      	lsls	r3, r6, #31
 80002ba:	d510      	bpl.n	80002de <LEDTask+0x42>
		osDelay(100);
 80002bc:	2064      	movs	r0, #100	; 0x64
 80002be:	f001 ff63 	bl	8002188 <osDelay>
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
 80002c2:	4620      	mov	r0, r4
 80002c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c8:	f000 fc7b 	bl	8000bc2 <HAL_GPIO_TogglePin>
		osDelay(50);
 80002cc:	2032      	movs	r0, #50	; 0x32
		osDelay(100);
 80002ce:	f001 ff5b 	bl	8002188 <osDelay>
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
 80002d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d6:	4620      	mov	r0, r4
 80002d8:	f000 fc73 	bl	8000bc2 <HAL_GPIO_TogglePin>
 80002dc:	e7e1      	b.n	80002a2 <LEDTask+0x6>
		osDelay(1000);
 80002de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e2:	f001 ff51 	bl	8002188 <osDelay>
		HAL_GPIO_TogglePin(GPIOB,STA3_Pin);
 80002e6:	4620      	mov	r0, r4
 80002e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ec:	f000 fc69 	bl	8000bc2 <HAL_GPIO_TogglePin>
		osDelay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	e7ec      	b.n	80002ce <LEDTask+0x32>
 80002f4:	20002630 	.word	0x20002630
 80002f8:	40010c00 	.word	0x40010c00

080002fc <__io_putchar>:
{
 80002fc:	b510      	push	{r4, lr}
 80002fe:	4604      	mov	r4, r0
	RINGBUF_Put(&RxUart3RingBuff, ch);
 8000300:	b2c1      	uxtb	r1, r0
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <__io_putchar+0x10>)
 8000304:	f001 feea 	bl	80020dc <RINGBUF_Put>
}
 8000308:	4620      	mov	r0, r4
 800030a:	bd10      	pop	{r4, pc}
 800030c:	20002634 	.word	0x20002634

08000310 <SystemClock_Config>:
{
 8000310:	b500      	push	{lr}
 8000312:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000314:	2228      	movs	r2, #40	; 0x28
 8000316:	2100      	movs	r1, #0
 8000318:	a806      	add	r0, sp, #24
 800031a:	f003 fd94 	bl	8003e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	2214      	movs	r2, #20
 8000320:	2100      	movs	r1, #0
 8000322:	a801      	add	r0, sp, #4
 8000324:	f003 fd8f 	bl	8003e46 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000334:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f000 fcc9 	bl	8000ccc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	f000 fe87 	bl	800105c <HAL_RCC_ClockConfig>
}
 800034e:	b011      	add	sp, #68	; 0x44
 8000350:	f85d fb04 	ldr.w	pc, [sp], #4

08000354 <main>:
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 8000358:	f000 fa78 	bl	800084c <HAL_Init>
  SystemClock_Config();
 800035c:	f7ff ffd8 	bl	8000310 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	2210      	movs	r2, #16
 8000362:	2100      	movs	r1, #0
 8000364:	a81b      	add	r0, sp, #108	; 0x6c
 8000366:	f003 fd6e 	bl	8003e46 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b6f      	ldr	r3, [pc, #444]	; (8000528 <main+0x1d4>)
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 800036c:	21a0      	movs	r1, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000370:	486e      	ldr	r0, [pc, #440]	; (800052c <main+0x1d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	f042 0204 	orr.w	r2, r2, #4
 8000376:	619a      	str	r2, [r3, #24]
 8000378:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	f002 0204 	and.w	r2, r2, #4
 8000380:	9201      	str	r2, [sp, #4]
 8000382:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	f042 0208 	orr.w	r2, r2, #8
 800038c:	619a      	str	r2, [r3, #24]
 800038e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	f003 0308 	and.w	r3, r3, #8
 8000396:	9302      	str	r3, [sp, #8]
 8000398:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, STA1_Pin|WISMO_RESET_Pin, GPIO_PIN_RESET);
 800039a:	f000 fc0d 	bl	8000bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, WISMO_ON_Pin|STA3_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80003a4:	4862      	ldr	r0, [pc, #392]	; (8000530 <main+0x1dc>)
 80003a6:	f000 fc07 	bl	8000bb8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = STA1_Pin|WISMO_RESET_Pin;
 80003ac:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ae:	a91b      	add	r1, sp, #108	; 0x6c
 80003b0:	485e      	ldr	r0, [pc, #376]	; (800052c <main+0x1d8>)
  GPIO_InitStruct.Pin = STA1_Pin|WISMO_RESET_Pin;
 80003b2:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f000 fb17 	bl	80009ec <HAL_GPIO_Init>
  HAL_GPIO_Init(WISMO_RDY_GPIO_Port, &GPIO_InitStruct);
 80003be:	a91b      	add	r1, sp, #108	; 0x6c
 80003c0:	485b      	ldr	r0, [pc, #364]	; (8000530 <main+0x1dc>)
  GPIO_InitStruct.Pin = WISMO_RDY_Pin;
 80003c2:	951b      	str	r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c4:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(WISMO_RDY_GPIO_Port, &GPIO_InitStruct);
 80003c8:	f000 fb10 	bl	80009ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WISMO_ON_Pin|STA3_Pin;
 80003cc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
  huart1.Init.BaudRate = 115200;
 80003d0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	961e      	str	r6, [sp, #120]	; 0x78
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d6:	260c      	movs	r6, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d8:	a91b      	add	r1, sp, #108	; 0x6c
 80003da:	4855      	ldr	r0, [pc, #340]	; (8000530 <main+0x1dc>)
  GPIO_InitStruct.Pin = WISMO_ON_Pin|STA3_Pin;
 80003dc:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	951c      	str	r5, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e2:	f000 fb03 	bl	80009ec <HAL_GPIO_Init>
  huart1.Instance = USART1;
 80003e6:	4853      	ldr	r0, [pc, #332]	; (8000534 <main+0x1e0>)
  huart1.Init.BaudRate = 115200;
 80003e8:	4b53      	ldr	r3, [pc, #332]	; (8000538 <main+0x1e4>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ea:	6146      	str	r6, [r0, #20]
  huart1.Init.BaudRate = 115200;
 80003ec:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f0:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f2:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f4:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	f001 f8f9 	bl	80015f0 <HAL_UART_Init>
  huart3.Instance = USART3;
 80003fe:	484f      	ldr	r0, [pc, #316]	; (800053c <main+0x1e8>)
 8000400:	4b4f      	ldr	r3, [pc, #316]	; (8000540 <main+0x1ec>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000402:	6146      	str	r6, [r0, #20]
  huart3.Init.BaudRate = 115200;
 8000404:	e880 0088 	stmia.w	r0, {r3, r7}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000408:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800040a:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800040c:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000412:	f001 f8ed 	bl	80015f0 <HAL_UART_Init>
  hi2c1.Instance = I2C1;
 8000416:	484b      	ldr	r0, [pc, #300]	; (8000544 <main+0x1f0>)
  hi2c1.Init.ClockSpeed = 100000;
 8000418:	4a4b      	ldr	r2, [pc, #300]	; (8000548 <main+0x1f4>)
 800041a:	4b4c      	ldr	r3, [pc, #304]	; (800054c <main+0x1f8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800041c:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800041e:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000426:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000428:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800042c:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800042e:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000430:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000432:	f000 fbcb 	bl	8000bcc <HAL_I2C_Init>
  HAL_GPIO_WritePin(GPIOB, STA3_Pin, GPIO_PIN_SET);
 8000436:	462a      	mov	r2, r5
 8000438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043c:	483c      	ldr	r0, [pc, #240]	; (8000530 <main+0x1dc>)
 800043e:	f000 fbbb 	bl	8000bb8 <HAL_GPIO_WritePin>
	RINGBUF_Init(&RxUart3RingBuff, ring3_buff, BUFF_SIZE);
 8000442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000446:	4942      	ldr	r1, [pc, #264]	; (8000550 <main+0x1fc>)
 8000448:	4842      	ldr	r0, [pc, #264]	; (8000554 <main+0x200>)
 800044a:	f001 fe39 	bl	80020c0 <RINGBUF_Init>
	RINGBUF_Init(&RxUart1RingBuff, ring1_buff, BUFF_SIZE);
 800044e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000452:	4941      	ldr	r1, [pc, #260]	; (8000558 <main+0x204>)
 8000454:	4841      	ldr	r0, [pc, #260]	; (800055c <main+0x208>)
 8000456:	f001 fe33 	bl	80020c0 <RINGBUF_Init>
	printf("UC15 STM32\r\n");
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <main+0x20c>)
 800045c:	f003 fd58 	bl	8003f10 <puts>
  osSemaphoreDef(myBinarySem01);
 8000460:	a820      	add	r0, sp, #128	; 0x80
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000462:	4629      	mov	r1, r5
  osSemaphoreDef(myBinarySem01);
 8000464:	f840 4d80 	str.w	r4, [r0, #-128]!
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000468:	f001 fe96 	bl	8002198 <osSemaphoreCreate>
  osThreadDef(defaultTaskName, defaultTask, osPriorityNormal, 0, 128);
 800046c:	4d3d      	ldr	r5, [pc, #244]	; (8000564 <main+0x210>)
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800046e:	4b3e      	ldr	r3, [pc, #248]	; (8000568 <main+0x214>)
  osThreadDef(defaultTaskName, defaultTask, osPriorityNormal, 0, 128);
 8000470:	af07      	add	r7, sp, #28
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000472:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTaskName, defaultTask, osPriorityNormal, 0, 128);
 8000474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000476:	462e      	mov	r6, r5
 8000478:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800047a:	f856 3b04 	ldr.w	r3, [r6], #4
  defaultTaskNameHandle = osThreadCreate(osThread(defaultTaskName), NULL);
 800047e:	4621      	mov	r1, r4
 8000480:	a807      	add	r0, sp, #28
  osThreadDef(defaultTaskName, defaultTask, osPriorityNormal, 0, 128);
 8000482:	603b      	str	r3, [r7, #0]
  defaultTaskNameHandle = osThreadCreate(osThread(defaultTaskName), NULL);
 8000484:	f001 fe67 	bl	8002156 <osThreadCreate>
 8000488:	4b38      	ldr	r3, [pc, #224]	; (800056c <main+0x218>)
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 800048a:	af0c      	add	r7, sp, #48	; 0x30
  defaultTaskNameHandle = osThreadCreate(osThread(defaultTaskName), NULL);
 800048c:	6018      	str	r0, [r3, #0]
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 800048e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000490:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000492:	6833      	ldr	r3, [r6, #0]
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 8000494:	4621      	mov	r1, r4
 8000496:	a80c      	add	r0, sp, #48	; 0x30
  osThreadDef(gsmTaskName, GsmTask, osPriorityNormal, 0, 1024);
 8000498:	603b      	str	r3, [r7, #0]
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 800049a:	f001 fe5c 	bl	8002156 <osThreadCreate>
 800049e:	4b34      	ldr	r3, [pc, #208]	; (8000570 <main+0x21c>)
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 80004a0:	f105 0718 	add.w	r7, r5, #24
 80004a4:	ae11      	add	r6, sp, #68	; 0x44
  gsmTaskNameHandle = osThreadCreate(osThread(gsmTaskName), NULL);
 80004a6:	6018      	str	r0, [r3, #0]
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 80004a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80004aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004ac:	683b      	ldr	r3, [r7, #0]
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 80004ae:	4621      	mov	r1, r4
 80004b0:	a811      	add	r0, sp, #68	; 0x44
  osThreadDef(displayTaskName, displayTaskFunc, osPriorityNormal, 0, 128);
 80004b2:	6033      	str	r3, [r6, #0]
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 80004b4:	f001 fe4f 	bl	8002156 <osThreadCreate>
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <main+0x220>)
  osThreadDef(LEDTaskName, LEDTask, osPriorityNormal, 0, 128);
 80004ba:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 80004be:	ae16      	add	r6, sp, #88	; 0x58
  displayTaskNameHandle = osThreadCreate(osThread(displayTaskName), NULL);
 80004c0:	6018      	str	r0, [r3, #0]
  osThreadDef(LEDTaskName, LEDTask, osPriorityNormal, 0, 128);
 80004c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80004c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004c6:	683b      	ldr	r3, [r7, #0]
  LEDTaskNameHandle = osThreadCreate(osThread(LEDTaskName), NULL);
 80004c8:	4621      	mov	r1, r4
 80004ca:	a816      	add	r0, sp, #88	; 0x58
  osThreadDef(LEDTaskName, LEDTask, osPriorityNormal, 0, 128);
 80004cc:	6033      	str	r3, [r6, #0]
  LEDTaskNameHandle = osThreadCreate(osThread(LEDTaskName), NULL);
 80004ce:	f001 fe42 	bl	8002156 <osThreadCreate>
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <main+0x224>)
  osThreadDef(sttCheckRoutine, sttCheckRoutineTask, osPriorityNormal, 0, 128);
 80004d4:	f105 0740 	add.w	r7, r5, #64	; 0x40
 80004d8:	ae1b      	add	r6, sp, #108	; 0x6c
  LEDTaskNameHandle = osThreadCreate(osThread(LEDTaskName), NULL);
 80004da:	6018      	str	r0, [r3, #0]
  osThreadDef(sttCheckRoutine, sttCheckRoutineTask, osPriorityNormal, 0, 128);
 80004dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80004de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004e0:	683b      	ldr	r3, [r7, #0]
  sttCheckRoutineHandle = osThreadCreate(osThread(sttCheckRoutine), NULL);
 80004e2:	4621      	mov	r1, r4
 80004e4:	a81b      	add	r0, sp, #108	; 0x6c
  osThreadDef(sttCheckRoutine, sttCheckRoutineTask, osPriorityNormal, 0, 128);
 80004e6:	6033      	str	r3, [r6, #0]
  sttCheckRoutineHandle = osThreadCreate(osThread(sttCheckRoutine), NULL);
 80004e8:	f001 fe35 	bl	8002156 <osThreadCreate>
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <main+0x228>)
  osMessageQDef(datQueue, 3, uint32_t);
 80004ee:	f105 0254 	add.w	r2, r5, #84	; 0x54
  sttCheckRoutineHandle = osThreadCreate(osThread(sttCheckRoutine), NULL);
 80004f2:	6018      	str	r0, [r3, #0]
  osMessageQDef(datQueue, 3, uint32_t);
 80004f4:	ab03      	add	r3, sp, #12
 80004f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fa:	e883 0003 	stmia.w	r3, {r0, r1}
  datQueueHandle = osMessageCreate(osMessageQ(datQueue), NULL);
 80004fe:	4621      	mov	r1, r4
 8000500:	4618      	mov	r0, r3
 8000502:	f001 fea9 	bl	8002258 <osMessageCreate>
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <main+0x22c>)
  osMessageQDef(ledQueue, 3, uint16_t);
 8000508:	355c      	adds	r5, #92	; 0x5c
  datQueueHandle = osMessageCreate(osMessageQ(datQueue), NULL);
 800050a:	6018      	str	r0, [r3, #0]
  osMessageQDef(ledQueue, 3, uint16_t);
 800050c:	ab05      	add	r3, sp, #20
 800050e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000512:	e883 0003 	stmia.w	r3, {r0, r1}
  ledQueueHandle = osMessageCreate(osMessageQ(ledQueue), NULL);
 8000516:	4618      	mov	r0, r3
 8000518:	4621      	mov	r1, r4
 800051a:	f001 fe9d 	bl	8002258 <osMessageCreate>
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <main+0x230>)
 8000520:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000522:	f001 fe13 	bl	800214c <osKernelStart>
 8000526:	e7fe      	b.n	8000526 <main+0x1d2>
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	40010c00 	.word	0x40010c00
 8000534:	20002390 	.word	0x20002390
 8000538:	40013800 	.word	0x40013800
 800053c:	20002350 	.word	0x20002350
 8000540:	40004800 	.word	0x40004800
 8000544:	200023d4 	.word	0x200023d4
 8000548:	40005400 	.word	0x40005400
 800054c:	000186a0 	.word	0x000186a0
 8000550:	20002530 	.word	0x20002530
 8000554:	20002634 	.word	0x20002634
 8000558:	20002428 	.word	0x20002428
 800055c:	2000264c 	.word	0x2000264c
 8000560:	0800514c 	.word	0x0800514c
 8000564:	08005070 	.word	0x08005070
 8000568:	20002648 	.word	0x20002648
 800056c:	200023d0 	.word	0x200023d0
 8000570:	20002528 	.word	0x20002528
 8000574:	20002644 	.word	0x20002644
 8000578:	20002660 	.word	0x20002660
 800057c:	2000265c 	.word	0x2000265c
 8000580:	2000252c 	.word	0x2000252c
 8000584:	20002630 	.word	0x20002630

08000588 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000588:	6802      	ldr	r2, [r0, #0]
 800058a:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800058c:	429a      	cmp	r2, r3
 800058e:	d101      	bne.n	8000594 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000590:	f000 b96e 	b.w	8000870 <HAL_IncTick>
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40000800 	.word	0x40000800

0800059c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_MspInit+0x48>)
{
 800059e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005a2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b0:	f002 0201 	and.w	r2, r2, #1
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005be:	61da      	str	r2, [r3, #28]
 80005c0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005c2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005cc:	f000 f986 	bl	80008dc <HAL_NVIC_SetPriority>

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <HAL_MspInit+0x4c>)
 80005d2:	6853      	ldr	r3, [r2, #4]
 80005d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	b003      	add	sp, #12
 80005e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005ec:	b510      	push	{r4, lr}
 80005ee:	4604      	mov	r4, r0
 80005f0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2210      	movs	r2, #16
 80005f4:	2100      	movs	r1, #0
 80005f6:	a802      	add	r0, sp, #8
 80005f8:	f003 fc25 	bl	8003e46 <memset>
  if(hi2c->Instance==I2C1)
 80005fc:	6822      	ldr	r2, [r4, #0]
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_I2C_MspInit+0x58>)
 8000600:	429a      	cmp	r2, r3
 8000602:	d11c      	bne.n	800063e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4c10      	ldr	r4, [pc, #64]	; (8000648 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	61a3      	str	r3, [r4, #24]
 8000612:	69a3      	ldr	r3, [r4, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061c:	23c0      	movs	r3, #192	; 0xc0
 800061e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000620:	2312      	movs	r3, #18
 8000622:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f000 f9e0 	bl	80009ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800062c:	69e3      	ldr	r3, [r4, #28]
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000632:	61e3      	str	r3, [r4, #28]
 8000634:	69e3      	ldr	r3, [r4, #28]
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800063e:	b006      	add	sp, #24
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010c00 	.word	0x40010c00

08000650 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2210      	movs	r2, #16
{
 8000652:	b510      	push	{r4, lr}
 8000654:	4604      	mov	r4, r0
 8000656:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	eb0d 0002 	add.w	r0, sp, r2
 800065c:	2100      	movs	r1, #0
 800065e:	f003 fbf2 	bl	8003e46 <memset>
  if(huart->Instance==USART1)
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	4a33      	ldr	r2, [pc, #204]	; (8000734 <HAL_UART_MspInit+0xe4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d131      	bne.n	80006ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <HAL_UART_MspInit+0xe8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800066e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	4832      	ldr	r0, [pc, #200]	; (800073c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000676:	619a      	str	r2, [r3, #24]
 8000678:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	619a      	str	r2, [r3, #24]
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f000 f9a2 	bl	80009ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	a904      	add	r1, sp, #16
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f000 f999 	bl	80009ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006ba:	2025      	movs	r0, #37	; 0x25
 80006bc:	4622      	mov	r2, r4
 80006be:	2105      	movs	r1, #5
 80006c0:	f000 f90c 	bl	80008dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006c4:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006c6:	f000 f93d 	bl	8000944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006ca:	b008      	add	sp, #32
 80006cc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_UART_MspInit+0xf0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d1fa      	bne.n	80006ca <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80006d8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80006dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80006e0:	61da      	str	r2, [r3, #28]
 80006e2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80006e6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80006ea:	9202      	str	r2, [sp, #8]
 80006ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	f042 0208 	orr.w	r2, r2, #8
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	9303      	str	r3, [sp, #12]
 80006fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000704:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f000 f96d 	bl	80009ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000712:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	a904      	add	r1, sp, #16
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800071a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f000 f964 	bl	80009ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000724:	2027      	movs	r0, #39	; 0x27
 8000726:	4622      	mov	r2, r4
 8000728:	2105      	movs	r1, #5
 800072a:	f000 f8d7 	bl	80008dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800072e:	2027      	movs	r0, #39	; 0x27
 8000730:	e7c9      	b.n	80006c6 <HAL_UART_MspInit+0x76>
 8000732:	bf00      	nop
 8000734:	40013800 	.word	0x40013800
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800
 8000740:	40004800 	.word	0x40004800
 8000744:	40010c00 	.word	0x40010c00

08000748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800074a:	4601      	mov	r1, r0
{
 800074c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800074e:	2200      	movs	r2, #0
 8000750:	201e      	movs	r0, #30
 8000752:	f000 f8c3 	bl	80008dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000756:	201e      	movs	r0, #30
 8000758:	f000 f8f4 	bl	8000944 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800075e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000760:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000762:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000764:	f042 0204 	orr.w	r2, r2, #4
 8000768:	61da      	str	r2, [r3, #28]
 800076a:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800076c:	4c11      	ldr	r4, [pc, #68]	; (80007b4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000776:	f000 fd43 	bl	8001200 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800077a:	f000 fd21 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_InitTick+0x70>)
 8000780:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000782:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000786:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_InitTick+0x74>)
 800078a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 800078e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000790:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8000792:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000794:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8000796:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800079a:	f000 fe39 	bl	8001410 <HAL_TIM_Base_Init>
 800079e:	b920      	cbnz	r0, 80007aa <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007a0:	4620      	mov	r0, r4
 80007a2:	f000 fd4c 	bl	800123e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80007a6:	b008      	add	sp, #32
 80007a8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80007aa:	2001      	movs	r0, #1
 80007ac:	e7fb      	b.n	80007a6 <HAL_InitTick+0x5e>
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	20002664 	.word	0x20002664
 80007b8:	40000800 	.word	0x40000800
 80007bc:	000f4240 	.word	0x000f4240

080007c0 <NMI_Handler>:
 80007c0:	4770      	bx	lr

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler>

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	4770      	bx	lr

080007cc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <TIM4_IRQHandler+0x8>)
 80007ce:	f000 bd45 	b.w	800125c <HAL_TIM_IRQHandler>
 80007d2:	bf00      	nop
 80007d4:	20002664 	.word	0x20002664

080007d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <USART1_IRQHandler+0x10>)
 80007dc:	f000 fffa 	bl	80017d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uart1_RxCallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 80007e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uart1_RxCallBack();
 80007e4:	f001 b9ae 	b.w	8001b44 <uart1_RxCallBack>
 80007e8:	20002390 	.word	0x20002390

080007ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <USART3_IRQHandler+0x10>)
 80007f0:	f000 fff0 	bl	80017d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Gsm_RxCallBack();
  /* USER CODE END USART3_IRQn 1 */
}
 80007f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Gsm_RxCallBack();
 80007f8:	f001 b97e 	b.w	8001af8 <Gsm_RxCallBack>
 80007fc:	20002350 	.word	0x20002350

08000800 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <SystemInit+0x40>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	f042 0201 	orr.w	r2, r2, #1
 8000808:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800080a:	6859      	ldr	r1, [r3, #4]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <SystemInit+0x44>)
 800080e:	400a      	ands	r2, r1
 8000810:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000818:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800081c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000824:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800082c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800082e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000832:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <SystemInit+0x48>)
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	f8ff0000 	.word	0xf8ff0000
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x20>)
{
 800084e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000852:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085a:	f000 f82d 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff ff72 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe9a 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000868:	2000      	movs	r0, #0
 800086a:	bd08      	pop	{r3, pc}
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <HAL_IncTick+0x10>)
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <HAL_IncTick+0x14>)
 8000874:	6811      	ldr	r1, [r2, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	440b      	add	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	200026a4 	.word	0x200026a4
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <HAL_GetTick+0x8>)
 800088a:	6818      	ldr	r0, [r3, #0]
}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200026a4 	.word	0x200026a4

08000894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fff6 	bl	8000888 <HAL_GetTick>
 800089c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80008a0:	bf1e      	ittt	ne
 80008a2:	4b04      	ldrne	r3, [pc, #16]	; (80008b4 <HAL_Delay+0x20>)
 80008a4:	781b      	ldrbne	r3, [r3, #0]
 80008a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a8:	f7ff ffee 	bl	8000888 <HAL_GetTick>
 80008ac:	1b40      	subs	r0, r0, r5
 80008ae:	4284      	cmp	r4, r0
 80008b0:	d8fa      	bhi.n	80008a8 <HAL_Delay+0x14>
  {
  }
}
 80008b2:	bd38      	pop	{r3, r4, r5, pc}
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008ba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	0c1b      	lsrs	r3, r3, #16
 80008ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80008d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008d4:	60d3      	str	r3, [r2, #12]
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008de:	b530      	push	{r4, r5, lr}
 80008e0:	68dc      	ldr	r4, [r3, #12]
 80008e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	bf28      	it	cs
 80008f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f8:	bf98      	it	ls
 80008fa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000900:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000904:	bf88      	it	hi
 8000906:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4019      	ands	r1, r3
 800090a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	fa05 f404 	lsl.w	r4, r5, r4
 8000910:	3c01      	subs	r4, #1
 8000912:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000914:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000916:	ea42 0201 	orr.w	r2, r2, r1
 800091a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	bfaf      	iteee	ge
 8000920:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	4b06      	ldrlt	r3, [pc, #24]	; (8000940 <HAL_NVIC_SetPriority+0x64>)
 8000926:	f000 000f 	andlt.w	r0, r0, #15
 800092a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	bfa5      	ittet	ge
 800092e:	b2d2      	uxtbge	r2, r2
 8000930:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800093a:	bd30      	pop	{r4, r5, pc}
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	e000ed14 	.word	0xe000ed14

08000944 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000944:	2301      	movs	r3, #1
 8000946:	0942      	lsrs	r2, r0, #5
 8000948:	f000 001f 	and.w	r0, r0, #31
 800094c:	fa03 f000 	lsl.w	r0, r3, r0
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <HAL_NVIC_EnableIRQ+0x14>)
 8000952:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100

0800095c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800095c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000960:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000962:	2b02      	cmp	r3, #2
 8000964:	d003      	beq.n	800096e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000966:	2304      	movs	r3, #4
 8000968:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800096a:	2001      	movs	r0, #1
 800096c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800096e:	6803      	ldr	r3, [r0, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f022 020e 	bic.w	r2, r2, #14
 8000976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f022 0201 	bic.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <HAL_DMA_Abort_IT+0x88>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d01f      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x6a>
 8000986:	3214      	adds	r2, #20
 8000988:	4293      	cmp	r3, r2
 800098a:	d01e      	beq.n	80009ca <HAL_DMA_Abort_IT+0x6e>
 800098c:	3214      	adds	r2, #20
 800098e:	4293      	cmp	r3, r2
 8000990:	d01d      	beq.n	80009ce <HAL_DMA_Abort_IT+0x72>
 8000992:	3214      	adds	r2, #20
 8000994:	4293      	cmp	r3, r2
 8000996:	d01d      	beq.n	80009d4 <HAL_DMA_Abort_IT+0x78>
 8000998:	3214      	adds	r2, #20
 800099a:	4293      	cmp	r3, r2
 800099c:	d01d      	beq.n	80009da <HAL_DMA_Abort_IT+0x7e>
 800099e:	3214      	adds	r2, #20
 80009a0:	4293      	cmp	r3, r2
 80009a2:	bf0c      	ite	eq
 80009a4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80009a8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ae:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009b0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80009ba:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80009be:	b17b      	cbz	r3, 80009e0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80009c0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80009c2:	4620      	mov	r0, r4
 80009c4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009c6:	2301      	movs	r3, #1
 80009c8:	e7f0      	b.n	80009ac <HAL_DMA_Abort_IT+0x50>
 80009ca:	2310      	movs	r3, #16
 80009cc:	e7ee      	b.n	80009ac <HAL_DMA_Abort_IT+0x50>
 80009ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d2:	e7eb      	b.n	80009ac <HAL_DMA_Abort_IT+0x50>
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	e7e8      	b.n	80009ac <HAL_DMA_Abort_IT+0x50>
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	e7e5      	b.n	80009ac <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80009e0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80009e2:	bd10      	pop	{r4, pc}
 80009e4:	40020008 	.word	0x40020008
 80009e8:	40020000 	.word	0x40020000

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80009f0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009f2:	4616      	mov	r6, r2
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000b9c <HAL_GPIO_Init+0x1b0>
 80009fa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000ba0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80009fe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000a04:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a08:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000a0c:	45a0      	cmp	r8, r4
 8000a0e:	d17f      	bne.n	8000b10 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000a10:	684d      	ldr	r5, [r1, #4]
 8000a12:	2d12      	cmp	r5, #18
 8000a14:	f000 80af 	beq.w	8000b76 <HAL_GPIO_Init+0x18a>
 8000a18:	f200 8088 	bhi.w	8000b2c <HAL_GPIO_Init+0x140>
 8000a1c:	2d02      	cmp	r5, #2
 8000a1e:	f000 80a7 	beq.w	8000b70 <HAL_GPIO_Init+0x184>
 8000a22:	d87c      	bhi.n	8000b1e <HAL_GPIO_Init+0x132>
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	f000 808e 	beq.w	8000b46 <HAL_GPIO_Init+0x15a>
 8000a2a:	2d01      	cmp	r5, #1
 8000a2c:	f000 809e 	beq.w	8000b6c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a34:	2cff      	cmp	r4, #255	; 0xff
 8000a36:	bf93      	iteet	ls
 8000a38:	4682      	movls	sl, r0
 8000a3a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000a3e:	3d08      	subhi	r5, #8
 8000a40:	f8d0 b000 	ldrls.w	fp, [r0]
 8000a44:	bf92      	itee	ls
 8000a46:	00b5      	lslls	r5, r6, #2
 8000a48:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000a4c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a4e:	fa09 f805 	lsl.w	r8, r9, r5
 8000a52:	ea2b 0808 	bic.w	r8, fp, r8
 8000a56:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5a:	bf88      	it	hi
 8000a5c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a60:	ea48 0505 	orr.w	r5, r8, r5
 8000a64:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a68:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a6c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a70:	d04e      	beq.n	8000b10 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4d47      	ldr	r5, [pc, #284]	; (8000b90 <HAL_GPIO_Init+0x1a4>)
 8000a74:	4f46      	ldr	r7, [pc, #280]	; (8000b90 <HAL_GPIO_Init+0x1a4>)
 8000a76:	69ad      	ldr	r5, [r5, #24]
 8000a78:	f026 0803 	bic.w	r8, r6, #3
 8000a7c:	f045 0501 	orr.w	r5, r5, #1
 8000a80:	61bd      	str	r5, [r7, #24]
 8000a82:	69bd      	ldr	r5, [r7, #24]
 8000a84:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000a88:	f005 0501 	and.w	r5, r5, #1
 8000a8c:	9501      	str	r5, [sp, #4]
 8000a8e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a92:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000a9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000aa0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000aa4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa8:	4d3a      	ldr	r5, [pc, #232]	; (8000b94 <HAL_GPIO_Init+0x1a8>)
 8000aaa:	42a8      	cmp	r0, r5
 8000aac:	d068      	beq.n	8000b80 <HAL_GPIO_Init+0x194>
 8000aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ab2:	42a8      	cmp	r0, r5
 8000ab4:	d066      	beq.n	8000b84 <HAL_GPIO_Init+0x198>
 8000ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aba:	42a8      	cmp	r0, r5
 8000abc:	d064      	beq.n	8000b88 <HAL_GPIO_Init+0x19c>
 8000abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ac2:	42a8      	cmp	r0, r5
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2503      	moveq	r5, #3
 8000ac8:	2504      	movne	r5, #4
 8000aca:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ace:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000ad2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000adc:	bf14      	ite	ne
 8000ade:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae0:	43a5      	biceq	r5, r4
 8000ae2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000aea:	bf14      	ite	ne
 8000aec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aee:	43a5      	biceq	r5, r4
 8000af0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af8:	bf14      	ite	ne
 8000afa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000afc:	43a5      	biceq	r5, r4
 8000afe:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b00:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b02:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b06:	bf14      	ite	ne
 8000b08:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b0a:	ea25 0404 	biceq.w	r4, r5, r4
 8000b0e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b10:	3601      	adds	r6, #1
 8000b12:	2e10      	cmp	r6, #16
 8000b14:	f47f af73 	bne.w	80009fe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000b18:	b003      	add	sp, #12
 8000b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000b1e:	2d03      	cmp	r5, #3
 8000b20:	d022      	beq.n	8000b68 <HAL_GPIO_Init+0x17c>
 8000b22:	2d11      	cmp	r5, #17
 8000b24:	d184      	bne.n	8000a30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b26:	68ca      	ldr	r2, [r1, #12]
 8000b28:	3204      	adds	r2, #4
          break;
 8000b2a:	e781      	b.n	8000a30 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000b2c:	4f1a      	ldr	r7, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x1ac>)
 8000b2e:	42bd      	cmp	r5, r7
 8000b30:	d009      	beq.n	8000b46 <HAL_GPIO_Init+0x15a>
 8000b32:	d812      	bhi.n	8000b5a <HAL_GPIO_Init+0x16e>
 8000b34:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000ba4 <HAL_GPIO_Init+0x1b8>
 8000b38:	454d      	cmp	r5, r9
 8000b3a:	d004      	beq.n	8000b46 <HAL_GPIO_Init+0x15a>
 8000b3c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000b40:	454d      	cmp	r5, r9
 8000b42:	f47f af75 	bne.w	8000a30 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b46:	688a      	ldr	r2, [r1, #8]
 8000b48:	b1c2      	cbz	r2, 8000b7c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b4a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b4c:	bf0c      	ite	eq
 8000b4e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b52:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b56:	2208      	movs	r2, #8
 8000b58:	e76a      	b.n	8000a30 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000b5a:	4575      	cmp	r5, lr
 8000b5c:	d0f3      	beq.n	8000b46 <HAL_GPIO_Init+0x15a>
 8000b5e:	4565      	cmp	r5, ip
 8000b60:	d0f1      	beq.n	8000b46 <HAL_GPIO_Init+0x15a>
 8000b62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ba8 <HAL_GPIO_Init+0x1bc>
 8000b66:	e7eb      	b.n	8000b40 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e761      	b.n	8000a30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b6c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b6e:	e75f      	b.n	8000a30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b70:	68ca      	ldr	r2, [r1, #12]
 8000b72:	3208      	adds	r2, #8
          break;
 8000b74:	e75c      	b.n	8000a30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b76:	68ca      	ldr	r2, [r1, #12]
 8000b78:	320c      	adds	r2, #12
          break;
 8000b7a:	e759      	b.n	8000a30 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	e757      	b.n	8000a30 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b80:	2500      	movs	r5, #0
 8000b82:	e7a2      	b.n	8000aca <HAL_GPIO_Init+0xde>
 8000b84:	2501      	movs	r5, #1
 8000b86:	e7a0      	b.n	8000aca <HAL_GPIO_Init+0xde>
 8000b88:	2502      	movs	r5, #2
 8000b8a:	e79e      	b.n	8000aca <HAL_GPIO_Init+0xde>
 8000b8c:	40010400 	.word	0x40010400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	10210000 	.word	0x10210000
 8000b9c:	10310000 	.word	0x10310000
 8000ba0:	10320000 	.word	0x10320000
 8000ba4:	10110000 	.word	0x10110000
 8000ba8:	10220000 	.word	0x10220000

08000bac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bac:	6883      	ldr	r3, [r0, #8]
 8000bae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000bb0:	bf14      	ite	ne
 8000bb2:	2001      	movne	r0, #1
 8000bb4:	2000      	moveq	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	b10a      	cbz	r2, 8000bbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	6101      	str	r1, [r0, #16]
 8000bbc:	4770      	bx	lr
 8000bbe:	0409      	lsls	r1, r1, #16
 8000bc0:	e7fb      	b.n	8000bba <HAL_GPIO_WritePin+0x2>

08000bc2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000bc2:	68c3      	ldr	r3, [r0, #12]
 8000bc4:	4059      	eors	r1, r3
 8000bc6:	60c1      	str	r1, [r0, #12]
 8000bc8:	4770      	bx	lr
	...

08000bcc <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000bce:	4604      	mov	r4, r0
 8000bd0:	b908      	cbnz	r0, 8000bd6 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bde:	b91b      	cbnz	r3, 8000be8 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000be0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000be4:	f7ff fd02 	bl	80005ec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be8:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bea:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bf8:	f000 fae2 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bfc:	6863      	ldr	r3, [r4, #4]
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_I2C_Init+0xf0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d830      	bhi.n	8000c66 <HAL_I2C_Init+0x9a>
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <HAL_I2C_Init+0xf4>)
 8000c06:	4290      	cmp	r0, r2
 8000c08:	d9e3      	bls.n	8000bd2 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c0a:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c0c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c0e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000c12:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c14:	3201      	adds	r2, #1
 8000c16:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_I2C_Init+0xf0>)
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d832      	bhi.n	8000c86 <HAL_I2C_Init+0xba>
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	bf38      	it	cc
 8000c30:	2304      	movcc	r3, #4
 8000c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c34:	6a22      	ldr	r2, [r4, #32]
 8000c36:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c38:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000c3e:	68e2      	ldr	r2, [r4, #12]
 8000c40:	6923      	ldr	r3, [r4, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000c46:	69a2      	ldr	r2, [r4, #24]
 8000c48:	6963      	ldr	r3, [r4, #20]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000c4e:	680b      	ldr	r3, [r1, #0]
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000c56:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c58:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c5e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <HAL_I2C_Init+0xfc>)
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	d9b2      	bls.n	8000bd2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000c6c:	4d15      	ldr	r5, [pc, #84]	; (8000cc4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000c72:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000c76:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c78:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000c7a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c7c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000c80:	fbb2 f2f5 	udiv	r2, r2, r5
 8000c84:	e7c6      	b.n	8000c14 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c86:	68a2      	ldr	r2, [r4, #8]
 8000c88:	b952      	cbnz	r2, 8000ca0 <HAL_I2C_Init+0xd4>
 8000c8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c92:	1c43      	adds	r3, r0, #1
 8000c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c98:	b16b      	cbz	r3, 8000cb6 <HAL_I2C_Init+0xea>
 8000c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9e:	e7c8      	b.n	8000c32 <HAL_I2C_Init+0x66>
 8000ca0:	2219      	movs	r2, #25
 8000ca2:	4353      	muls	r3, r2
 8000ca4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca8:	1c43      	adds	r3, r0, #1
 8000caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cae:	b113      	cbz	r3, 8000cb6 <HAL_I2C_Init+0xea>
 8000cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb4:	e7bd      	b.n	8000c32 <HAL_I2C_Init+0x66>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e7bb      	b.n	8000c32 <HAL_I2C_Init+0x66>
 8000cba:	bf00      	nop
 8000cbc:	000186a0 	.word	0x000186a0
 8000cc0:	001e847f 	.word	0x001e847f
 8000cc4:	000f4240 	.word	0x000f4240
 8000cc8:	003d08ff 	.word	0x003d08ff

08000ccc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	6803      	ldr	r3, [r0, #0]
{
 8000cce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	07db      	lsls	r3, r3, #31
{
 8000cd4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	d410      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	079f      	lsls	r7, r3, #30
 8000cdc:	d45e      	bmi.n	8000d9c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	0719      	lsls	r1, r3, #28
 8000ce2:	f100 8095 	bmi.w	8000e10 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	075a      	lsls	r2, r3, #29
 8000cea:	f100 80bf 	bmi.w	8000e6c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cee:	69ea      	ldr	r2, [r5, #28]
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 812d 	bne.w	8000f50 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e014      	b.n	8000d24 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cfa:	4c90      	ldr	r4, [pc, #576]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000cfc:	6863      	ldr	r3, [r4, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d007      	beq.n	8000d16 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d06:	6863      	ldr	r3, [r4, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d10c      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	03de      	lsls	r6, r3, #15
 8000d14:	d509      	bpl.n	8000d2a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	039c      	lsls	r4, r3, #14
 8000d1a:	d5dd      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0xc>
 8000d1c:	686b      	ldr	r3, [r5, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1da      	bne.n	8000cd8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d22:	2001      	movs	r0, #1
}
 8000d24:	b002      	add	sp, #8
 8000d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	686b      	ldr	r3, [r5, #4]
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d110      	bne.n	8000d54 <HAL_RCC_OscConfig+0x88>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fda5 	bl	8000888 <HAL_GetTick>
 8000d3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	0398      	lsls	r0, r3, #14
 8000d44:	d4c8      	bmi.n	8000cd8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d46:	f7ff fd9f 	bl	8000888 <HAL_GetTick>
 8000d4a:	1b80      	subs	r0, r0, r6
 8000d4c:	2864      	cmp	r0, #100	; 0x64
 8000d4e:	d9f7      	bls.n	8000d40 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
 8000d52:	e7e7      	b.n	8000d24 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d54:	b99b      	cbnz	r3, 8000d7e <HAL_RCC_OscConfig+0xb2>
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d66:	f7ff fd8f 	bl	8000888 <HAL_GetTick>
 8000d6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	0399      	lsls	r1, r3, #14
 8000d70:	d5b2      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d72:	f7ff fd89 	bl	8000888 <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	2864      	cmp	r0, #100	; 0x64
 8000d7a:	d9f7      	bls.n	8000d6c <HAL_RCC_OscConfig+0xa0>
 8000d7c:	e7e8      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	d103      	bne.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 8000d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	e7d1      	b.n	8000d32 <HAL_RCC_OscConfig+0x66>
 8000d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d92:	6023      	str	r3, [r4, #0]
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	e7cd      	b.n	8000d38 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d9c:	4c67      	ldr	r4, [pc, #412]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	f013 0f0c 	tst.w	r3, #12
 8000da4:	d007      	beq.n	8000db6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da6:	6863      	ldr	r3, [r4, #4]
 8000da8:	f003 030c 	and.w	r3, r3, #12
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d110      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x106>
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	03da      	lsls	r2, r3, #15
 8000db4:	d40d      	bmi.n	8000dd2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	079b      	lsls	r3, r3, #30
 8000dba:	d502      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
 8000dbc:	692b      	ldr	r3, [r5, #16]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d1af      	bne.n	8000d22 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	696a      	ldr	r2, [r5, #20]
 8000dc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	e785      	b.n	8000cde <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd2:	692a      	ldr	r2, [r5, #16]
 8000dd4:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <HAL_RCC_OscConfig+0x274>)
 8000dd6:	b16a      	cbz	r2, 8000df4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fd54 	bl	8000888 <HAL_GetTick>
 8000de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	079f      	lsls	r7, r3, #30
 8000de6:	d4ec      	bmi.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fd4e 	bl	8000888 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f7      	bls.n	8000de2 <HAL_RCC_OscConfig+0x116>
 8000df2:	e7ad      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000df4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df6:	f7ff fd47 	bl	8000888 <HAL_GetTick>
 8000dfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	0798      	lsls	r0, r3, #30
 8000e00:	f57f af6d 	bpl.w	8000cde <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e04:	f7ff fd40 	bl	8000888 <HAL_GetTick>
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9f6      	bls.n	8000dfc <HAL_RCC_OscConfig+0x130>
 8000e0e:	e79f      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e10:	69aa      	ldr	r2, [r5, #24]
 8000e12:	4c4a      	ldr	r4, [pc, #296]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000e14:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <HAL_RCC_OscConfig+0x278>)
 8000e16:	b1da      	cbz	r2, 8000e50 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fd34 	bl	8000888 <HAL_GetTick>
 8000e20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e24:	079b      	lsls	r3, r3, #30
 8000e26:	d50d      	bpl.n	8000e44 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e2c:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <HAL_RCC_OscConfig+0x27c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e34:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e36:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	9201      	str	r2, [sp, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_RCC_OscConfig+0x16a>
 8000e42:	e750      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e44:	f7ff fd20 	bl	8000888 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9e9      	bls.n	8000e22 <HAL_RCC_OscConfig+0x156>
 8000e4e:	e77f      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e52:	f7ff fd19 	bl	8000888 <HAL_GetTick>
 8000e56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e5a:	079f      	lsls	r7, r3, #30
 8000e5c:	f57f af43 	bpl.w	8000ce6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fd12 	bl	8000888 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d9f6      	bls.n	8000e58 <HAL_RCC_OscConfig+0x18c>
 8000e6a:	e771      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6c:	4c33      	ldr	r4, [pc, #204]	; (8000f3c <HAL_RCC_OscConfig+0x270>)
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	00d8      	lsls	r0, r3, #3
 8000e72:	d424      	bmi.n	8000ebe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e74:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	69e3      	ldr	r3, [r4, #28]
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	61e3      	str	r3, [r4, #28]
 8000e7e:	69e3      	ldr	r3, [r4, #28]
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	4e30      	ldr	r6, [pc, #192]	; (8000f4c <HAL_RCC_OscConfig+0x280>)
 8000e8a:	6833      	ldr	r3, [r6, #0]
 8000e8c:	05d9      	lsls	r1, r3, #23
 8000e8e:	d518      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	68eb      	ldr	r3, [r5, #12]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d126      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x218>
 8000e96:	6a23      	ldr	r3, [r4, #32]
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fcf3 	bl	8000888 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ea6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	6a23      	ldr	r3, [r4, #32]
 8000eaa:	079b      	lsls	r3, r3, #30
 8000eac:	d53f      	bpl.n	8000f2e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	f43f af1d 	beq.w	8000cee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb4:	69e3      	ldr	r3, [r4, #28]
 8000eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eba:	61e3      	str	r3, [r4, #28]
 8000ebc:	e717      	b.n	8000cee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	e7e2      	b.n	8000e88 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000eca:	f7ff fcdd 	bl	8000888 <HAL_GetTick>
 8000ece:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	6833      	ldr	r3, [r6, #0]
 8000ed2:	05da      	lsls	r2, r3, #23
 8000ed4:	d4dc      	bmi.n	8000e90 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed6:	f7ff fcd7 	bl	8000888 <HAL_GetTick>
 8000eda:	eba0 0008 	sub.w	r0, r0, r8
 8000ede:	2864      	cmp	r0, #100	; 0x64
 8000ee0:	d9f6      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x204>
 8000ee2:	e735      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	b9ab      	cbnz	r3, 8000f12 <HAL_RCC_OscConfig+0x246>
 8000ee6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6223      	str	r3, [r4, #32]
 8000ef2:	6a23      	ldr	r3, [r4, #32]
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000efa:	f7ff fcc5 	bl	8000888 <HAL_GetTick>
 8000efe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	6a23      	ldr	r3, [r4, #32]
 8000f02:	0798      	lsls	r0, r3, #30
 8000f04:	d5d3      	bpl.n	8000eae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fcbf 	bl	8000888 <HAL_GetTick>
 8000f0a:	1b80      	subs	r0, r0, r6
 8000f0c:	4540      	cmp	r0, r8
 8000f0e:	d9f7      	bls.n	8000f00 <HAL_RCC_OscConfig+0x234>
 8000f10:	e71e      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	6a23      	ldr	r3, [r4, #32]
 8000f16:	d103      	bne.n	8000f20 <HAL_RCC_OscConfig+0x254>
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6223      	str	r3, [r4, #32]
 8000f1e:	e7ba      	b.n	8000e96 <HAL_RCC_OscConfig+0x1ca>
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6223      	str	r3, [r4, #32]
 8000f26:	6a23      	ldr	r3, [r4, #32]
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	e7b6      	b.n	8000e9c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fcab 	bl	8000888 <HAL_GetTick>
 8000f32:	eba0 0008 	sub.w	r0, r0, r8
 8000f36:	42b0      	cmp	r0, r6
 8000f38:	d9b6      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1dc>
 8000f3a:	e709      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	42420000 	.word	0x42420000
 8000f44:	42420480 	.word	0x42420480
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f50:	4c22      	ldr	r4, [pc, #136]	; (8000fdc <HAL_RCC_OscConfig+0x310>)
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	f43f aee2 	beq.w	8000d22 <HAL_RCC_OscConfig+0x56>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	4e1f      	ldr	r6, [pc, #124]	; (8000fe0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f62:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f64:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f66:	d12b      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc8e 	bl	8000888 <HAL_GetTick>
 8000f6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	0199      	lsls	r1, r3, #6
 8000f72:	d41f      	bmi.n	8000fb4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f74:	6a2b      	ldr	r3, [r5, #32]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d105      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f7c:	6862      	ldr	r2, [r4, #4]
 8000f7e:	68a9      	ldr	r1, [r5, #8]
 8000f80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f84:	430a      	orrs	r2, r1
 8000f86:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f88:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f8a:	6862      	ldr	r2, [r4, #4]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f92:	4313      	orrs	r3, r2
 8000f94:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f96:	2301      	movs	r3, #1
 8000f98:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fc75 	bl	8000888 <HAL_GetTick>
 8000f9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	019a      	lsls	r2, r3, #6
 8000fa4:	f53f aea7 	bmi.w	8000cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fc6e 	bl	8000888 <HAL_GetTick>
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d9f6      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x2d4>
 8000fb2:	e6cd      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff fc68 	bl	8000888 <HAL_GetTick>
 8000fb8:	1bc0      	subs	r0, r0, r7
 8000fba:	2802      	cmp	r0, #2
 8000fbc:	d9d7      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2a2>
 8000fbe:	e6c7      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc62 	bl	8000888 <HAL_GetTick>
 8000fc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	f57f ae94 	bpl.w	8000cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fc5b 	bl	8000888 <HAL_GetTick>
 8000fd2:	1b40      	subs	r0, r0, r5
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f6      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x2fa>
 8000fd8:	e6ba      	b.n	8000d50 <HAL_RCC_OscConfig+0x84>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	42420060 	.word	0x42420060

08000fe4 <HAL_RCC_GetSysClockFreq>:
{
 8000fe4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fe8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fea:	ac02      	add	r4, sp, #8
 8000fec:	f103 0510 	add.w	r5, r3, #16
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	c203      	stmia	r2!, {r0, r1}
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	d1f7      	bne.n	8000ff0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001000:	2301      	movs	r3, #1
 8001002:	f88d 3004 	strb.w	r3, [sp, #4]
 8001006:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001008:	4911      	ldr	r1, [pc, #68]	; (8001050 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800100a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800100e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001010:	f003 020c 	and.w	r2, r3, #12
 8001014:	2a08      	cmp	r2, #8
 8001016:	d117      	bne.n	8001048 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001018:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800101c:	a806      	add	r0, sp, #24
 800101e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001020:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001022:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001026:	d50c      	bpl.n	8001042 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001028:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800102c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001030:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001032:	aa06      	add	r2, sp, #24
 8001034:	4413      	add	r3, r2
 8001036:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800103a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800103e:	b007      	add	sp, #28
 8001040:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_RCC_GetSysClockFreq+0x74>)
 8001044:	4350      	muls	r0, r2
 8001046:	e7fa      	b.n	800103e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800104a:	e7f8      	b.n	800103e <HAL_RCC_GetSysClockFreq+0x5a>
 800104c:	080050e4 	.word	0x080050e4
 8001050:	40021000 	.word	0x40021000
 8001054:	007a1200 	.word	0x007a1200
 8001058:	003d0900 	.word	0x003d0900

0800105c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_RCC_ClockConfig+0x154>)
{
 800105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001062:	6813      	ldr	r3, [r2, #0]
{
 8001064:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	428b      	cmp	r3, r1
{
 800106c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800106e:	d32a      	bcc.n	80010c6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	6829      	ldr	r1, [r5, #0]
 8001072:	078c      	lsls	r4, r1, #30
 8001074:	d434      	bmi.n	80010e0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001076:	07ca      	lsls	r2, r1, #31
 8001078:	d447      	bmi.n	800110a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800107a:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x154>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	429e      	cmp	r6, r3
 8001084:	f0c0 8082 	bcc.w	800118c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	682a      	ldr	r2, [r5, #0]
 800108a:	4c4a      	ldr	r4, [pc, #296]	; (80011b4 <HAL_RCC_ClockConfig+0x158>)
 800108c:	f012 0f04 	tst.w	r2, #4
 8001090:	f040 8087 	bne.w	80011a2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	0713      	lsls	r3, r2, #28
 8001096:	d506      	bpl.n	80010a6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	692a      	ldr	r2, [r5, #16]
 800109c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010a4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a6:	f7ff ff9d 	bl	8000fe4 <HAL_RCC_GetSysClockFreq>
 80010aa:	6863      	ldr	r3, [r4, #4]
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <HAL_RCC_ClockConfig+0x15c>)
 80010ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	40d8      	lsrs	r0, r3
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <HAL_RCC_ClockConfig+0x160>)
 80010b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fb44 	bl	8000748 <HAL_InitTick>
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
}
 80010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	f023 0307 	bic.w	r3, r3, #7
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d0:	6813      	ldr	r3, [r2, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d0ca      	beq.n	8001070 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e6:	bf1e      	ittt	ne
 80010e8:	685a      	ldrne	r2, [r3, #4]
 80010ea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010ee:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f2:	bf42      	ittt	mi
 80010f4:	685a      	ldrmi	r2, [r3, #4]
 80010f6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010fa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68a8      	ldr	r0, [r5, #8]
 8001100:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001104:	4302      	orrs	r2, r0
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	e7b5      	b.n	8001076 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	686a      	ldr	r2, [r5, #4]
 800110c:	4c29      	ldr	r4, [pc, #164]	; (80011b4 <HAL_RCC_ClockConfig+0x158>)
 800110e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001112:	d11c      	bne.n	800114e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	d0df      	beq.n	80010da <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001120:	f023 0303 	bic.w	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001128:	f7ff fbae 	bl	8000888 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800112e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001130:	2b01      	cmp	r3, #1
 8001132:	d114      	bne.n	800115e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d09d      	beq.n	800107a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113e:	f7ff fba3 	bl	8000888 <HAL_GetTick>
 8001142:	1bc0      	subs	r0, r0, r7
 8001144:	4540      	cmp	r0, r8
 8001146:	d9f5      	bls.n	8001134 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
 800114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	2a02      	cmp	r2, #2
 8001150:	d102      	bne.n	8001158 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001152:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001156:	e7df      	b.n	8001118 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	f013 0f02 	tst.w	r3, #2
 800115c:	e7dc      	b.n	8001118 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115e:	2b02      	cmp	r3, #2
 8001160:	d10f      	bne.n	8001182 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d086      	beq.n	800107a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116c:	f7ff fb8c 	bl	8000888 <HAL_GetTick>
 8001170:	1bc0      	subs	r0, r0, r7
 8001172:	4540      	cmp	r0, r8
 8001174:	d9f5      	bls.n	8001162 <HAL_RCC_ClockConfig+0x106>
 8001176:	e7e7      	b.n	8001148 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff fb86 	bl	8000888 <HAL_GetTick>
 800117c:	1bc0      	subs	r0, r0, r7
 800117e:	4540      	cmp	r0, r8
 8001180:	d8e2      	bhi.n	8001148 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001182:	6863      	ldr	r3, [r4, #4]
 8001184:	f013 0f0c 	tst.w	r3, #12
 8001188:	d1f6      	bne.n	8001178 <HAL_RCC_ClockConfig+0x11c>
 800118a:	e776      	b.n	800107a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	f023 0307 	bic.w	r3, r3, #7
 8001192:	4333      	orrs	r3, r6
 8001194:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	429e      	cmp	r6, r3
 800119e:	d19c      	bne.n	80010da <HAL_RCC_ClockConfig+0x7e>
 80011a0:	e772      	b.n	8001088 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	68e9      	ldr	r1, [r5, #12]
 80011a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011aa:	430b      	orrs	r3, r1
 80011ac:	6063      	str	r3, [r4, #4]
 80011ae:	e771      	b.n	8001094 <HAL_RCC_ClockConfig+0x38>
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	080051a0 	.word	0x080051a0
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	4a03      	ldr	r2, [pc, #12]	; (80011dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011ce:	6810      	ldr	r0, [r2, #0]
}    
 80011d0:	40d8      	lsrs	r0, r3
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	080051b0 	.word	0x080051b0
 80011dc:	20000000 	.word	0x20000000

080011e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011ee:	6810      	ldr	r0, [r2, #0]
} 
 80011f0:	40d8      	lsrs	r0, r3
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	080051b0 	.word	0x080051b0
 80011fc:	20000000 	.word	0x20000000

08001200 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001200:	230f      	movs	r3, #15
 8001202:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_GetClockConfig+0x34>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001214:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800121c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001226:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_RCC_GetClockConfig+0x38>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	600b      	str	r3, [r1, #0]
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_TIM_Base_MspInit>:
 800123c:	4770      	bx	lr

0800123e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800123e:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001240:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
}
 8001252:	4770      	bx	lr

08001254 <HAL_TIM_OC_DelayElapsedCallback>:
 8001254:	4770      	bx	lr

08001256 <HAL_TIM_IC_CaptureCallback>:
 8001256:	4770      	bx	lr

08001258 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001258:	4770      	bx	lr

0800125a <HAL_TIM_TriggerCallback>:
 800125a:	4770      	bx	lr

0800125c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800125c:	6803      	ldr	r3, [r0, #0]
{
 800125e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001260:	691a      	ldr	r2, [r3, #16]
{
 8001262:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001264:	0791      	lsls	r1, r2, #30
 8001266:	d50e      	bpl.n	8001286 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	0792      	lsls	r2, r2, #30
 800126c:	d50b      	bpl.n	8001286 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800126e:	f06f 0202 	mvn.w	r2, #2
 8001272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001274:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001276:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001278:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800127a:	079b      	lsls	r3, r3, #30
 800127c:	d077      	beq.n	800136e <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800127e:	f7ff ffea 	bl	8001256 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001282:	2300      	movs	r3, #0
 8001284:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	0750      	lsls	r0, r2, #29
 800128c:	d510      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	0751      	lsls	r1, r2, #29
 8001292:	d50d      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001294:	f06f 0204 	mvn.w	r2, #4
 8001298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800129a:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800129c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800129e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012a0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80012a4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012a6:	d068      	beq.n	800137a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80012a8:	f7ff ffd5 	bl	8001256 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ac:	2300      	movs	r3, #0
 80012ae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	0712      	lsls	r2, r2, #28
 80012b6:	d50f      	bpl.n	80012d8 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	0710      	lsls	r0, r2, #28
 80012bc:	d50c      	bpl.n	80012d8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012be:	f06f 0208 	mvn.w	r2, #8
 80012c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012c4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012c6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012c8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ca:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80012cc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ce:	d05a      	beq.n	8001386 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012d0:	f7ff ffc1 	bl	8001256 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d4:	2300      	movs	r3, #0
 80012d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	06d2      	lsls	r2, r2, #27
 80012de:	d510      	bpl.n	8001302 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	06d0      	lsls	r0, r2, #27
 80012e4:	d50d      	bpl.n	8001302 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012e6:	f06f 0210 	mvn.w	r2, #16
 80012ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012ec:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012f0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80012f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012f8:	d04b      	beq.n	8001392 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80012fa:	f7ff ffac 	bl	8001256 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012fe:	2300      	movs	r3, #0
 8001300:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	07d1      	lsls	r1, r2, #31
 8001308:	d508      	bpl.n	800131c <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	07d2      	lsls	r2, r2, #31
 800130e:	d505      	bpl.n	800131c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001310:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001314:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001316:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001318:	f7ff f936 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	0610      	lsls	r0, r2, #24
 8001322:	d508      	bpl.n	8001336 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	0611      	lsls	r1, r2, #24
 8001328:	d505      	bpl.n	8001336 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800132a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800132e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001330:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001332:	f000 f888 	bl	8001446 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	0652      	lsls	r2, r2, #25
 800133c:	d508      	bpl.n	8001350 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	0650      	lsls	r0, r2, #25
 8001342:	d505      	bpl.n	8001350 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001344:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001348:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800134a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800134c:	f7ff ff85 	bl	800125a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	0691      	lsls	r1, r2, #26
 8001356:	d522      	bpl.n	800139e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	0692      	lsls	r2, r2, #26
 800135c:	d51f      	bpl.n	800139e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800135e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001362:	4620      	mov	r0, r4
    }
  }
}
 8001364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001368:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800136a:	f000 b86b 	b.w	8001444 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800136e:	f7ff ff71 	bl	8001254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff70 	bl	8001258 <HAL_TIM_PWM_PulseFinishedCallback>
 8001378:	e783      	b.n	8001282 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137a:	f7ff ff6b 	bl	8001254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ff6a 	bl	8001258 <HAL_TIM_PWM_PulseFinishedCallback>
 8001384:	e792      	b.n	80012ac <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001386:	f7ff ff65 	bl	8001254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff ff64 	bl	8001258 <HAL_TIM_PWM_PulseFinishedCallback>
 8001390:	e7a0      	b.n	80012d4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001392:	f7ff ff5f 	bl	8001254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ff5e 	bl	8001258 <HAL_TIM_PWM_PulseFinishedCallback>
 800139c:	e7af      	b.n	80012fe <HAL_TIM_IRQHandler+0xa2>
 800139e:	bd10      	pop	{r4, pc}

080013a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013a0:	4a1a      	ldr	r2, [pc, #104]	; (800140c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80013a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d00a      	beq.n	80013be <TIM_Base_SetConfig+0x1e>
 80013a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013ac:	d007      	beq.n	80013be <TIM_Base_SetConfig+0x1e>
 80013ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80013b2:	4290      	cmp	r0, r2
 80013b4:	d003      	beq.n	80013be <TIM_Base_SetConfig+0x1e>
 80013b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ba:	4290      	cmp	r0, r2
 80013bc:	d115      	bne.n	80013ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80013be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013c4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <TIM_Base_SetConfig+0x6c>)
 80013c8:	4290      	cmp	r0, r2
 80013ca:	d00a      	beq.n	80013e2 <TIM_Base_SetConfig+0x42>
 80013cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013d0:	d007      	beq.n	80013e2 <TIM_Base_SetConfig+0x42>
 80013d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80013d6:	4290      	cmp	r0, r2
 80013d8:	d003      	beq.n	80013e2 <TIM_Base_SetConfig+0x42>
 80013da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013de:	4290      	cmp	r0, r2
 80013e0:	d103      	bne.n	80013ea <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013e2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80013ea:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80013ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80013f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80013f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013f4:	688b      	ldr	r3, [r1, #8]
 80013f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013f8:	680b      	ldr	r3, [r1, #0]
 80013fa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <TIM_Base_SetConfig+0x6c>)
 80013fe:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001400:	bf04      	itt	eq
 8001402:	690b      	ldreq	r3, [r1, #16]
 8001404:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001406:	2301      	movs	r3, #1
 8001408:	6143      	str	r3, [r0, #20]
 800140a:	4770      	bx	lr
 800140c:	40012c00 	.word	0x40012c00

08001410 <HAL_TIM_Base_Init>:
{
 8001410:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001412:	4604      	mov	r4, r0
 8001414:	b1a0      	cbz	r0, 8001440 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001416:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800141a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800141e:	b91b      	cbnz	r3, 8001428 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001420:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001424:	f7ff ff0a 	bl	800123c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001428:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800142c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001430:	1d21      	adds	r1, r4, #4
 8001432:	f7ff ffb5 	bl	80013a0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001436:	2301      	movs	r3, #1
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800143a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800143e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
}
 8001442:	bd10      	pop	{r4, pc}

08001444 <HAL_TIMEx_CommutationCallback>:
 8001444:	4770      	bx	lr

08001446 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001446:	4770      	bx	lr

08001448 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001448:	6803      	ldr	r3, [r0, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001450:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800145a:	2320      	movs	r3, #32
 800145c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001460:	4770      	bx	lr
	...

08001464 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001468:	6805      	ldr	r5, [r0, #0]
 800146a:	68c2      	ldr	r2, [r0, #12]
 800146c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800146e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001474:	4313      	orrs	r3, r2
 8001476:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001478:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800147a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800147c:	430b      	orrs	r3, r1
 800147e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001480:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001484:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001488:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800148a:	4313      	orrs	r3, r2
 800148c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800148e:	696b      	ldr	r3, [r5, #20]
 8001490:	6982      	ldr	r2, [r0, #24]
 8001492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001496:	4313      	orrs	r3, r2
 8001498:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <UART_SetConfig+0x138>)
{
 800149c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800149e:	429d      	cmp	r5, r3
 80014a0:	f04f 0419 	mov.w	r4, #25
 80014a4:	d146      	bne.n	8001534 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014a6:	f7ff fe9b 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
 80014aa:	fb04 f300 	mul.w	r3, r4, r0
 80014ae:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80014b2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80014b6:	00b6      	lsls	r6, r6, #2
 80014b8:	fbb3 f3f6 	udiv	r3, r3, r6
 80014bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80014c0:	011e      	lsls	r6, r3, #4
 80014c2:	f7ff fe8d 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
 80014c6:	4360      	muls	r0, r4
 80014c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fbb0 f7f3 	udiv	r7, r0, r3
 80014d2:	f7ff fe85 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
 80014d6:	4360      	muls	r0, r4
 80014d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80014e6:	fb08 7313 	mls	r3, r8, r3, r7
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	3332      	adds	r3, #50	; 0x32
 80014ee:	fbb3 f3f8 	udiv	r3, r3, r8
 80014f2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80014f6:	f7ff fe73 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
 80014fa:	4360      	muls	r0, r4
 80014fc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	fbb0 faf2 	udiv	sl, r0, r2
 8001506:	f7ff fe6b 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800150a:	4360      	muls	r0, r4
 800150c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	fbb3 f3f8 	udiv	r3, r3, r8
 800151a:	fb08 a313 	mls	r3, r8, r3, sl
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	3332      	adds	r3, #50	; 0x32
 8001522:	fbb3 f3f8 	udiv	r3, r3, r8
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	433b      	orrs	r3, r7
 800152c:	4433      	add	r3, r6
 800152e:	60ab      	str	r3, [r5, #8]
 8001530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001534:	f7ff fe44 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001538:	fb04 f300 	mul.w	r3, r4, r0
 800153c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001540:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001544:	00b6      	lsls	r6, r6, #2
 8001546:	fbb3 f3f6 	udiv	r3, r3, r6
 800154a:	fbb3 f3f8 	udiv	r3, r3, r8
 800154e:	011e      	lsls	r6, r3, #4
 8001550:	f7ff fe36 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001554:	4360      	muls	r0, r4
 8001556:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001560:	f7ff fe2e 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001564:	4360      	muls	r0, r4
 8001566:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001570:	fbb3 f3f8 	udiv	r3, r3, r8
 8001574:	fb08 7313 	mls	r3, r8, r3, r7
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	3332      	adds	r3, #50	; 0x32
 800157c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001580:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001584:	f7ff fe1c 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001588:	4360      	muls	r0, r4
 800158a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	fbb0 faf2 	udiv	sl, r0, r2
 8001594:	f7ff fe14 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 8001598:	e7b7      	b.n	800150a <UART_SetConfig+0xa6>
 800159a:	bf00      	nop
 800159c:	40013800 	.word	0x40013800

080015a0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	4604      	mov	r4, r0
 80015a4:	460e      	mov	r6, r1
 80015a6:	4617      	mov	r7, r2
 80015a8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80015aa:	6821      	ldr	r1, [r4, #0]
 80015ac:	680b      	ldr	r3, [r1, #0]
 80015ae:	ea36 0303 	bics.w	r3, r6, r3
 80015b2:	d101      	bne.n	80015b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80015b4:	2000      	movs	r0, #0
}
 80015b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80015b8:	1c6b      	adds	r3, r5, #1
 80015ba:	d0f7      	beq.n	80015ac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015bc:	b995      	cbnz	r5, 80015e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015be:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80015c0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015d2:	2320      	movs	r3, #32
 80015d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015d8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80015dc:	2300      	movs	r3, #0
 80015de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015e4:	f7ff f950 	bl	8000888 <HAL_GetTick>
 80015e8:	1bc0      	subs	r0, r0, r7
 80015ea:	4285      	cmp	r5, r0
 80015ec:	d2dd      	bcs.n	80015aa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80015ee:	e7e6      	b.n	80015be <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080015f0 <HAL_UART_Init>:
{
 80015f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015f2:	4604      	mov	r4, r0
 80015f4:	b340      	cbz	r0, 8001648 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015fe:	b91b      	cbnz	r3, 8001608 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001600:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001604:	f7ff f824 	bl	8000650 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001608:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800160a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800160c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001610:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001612:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001618:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800161a:	f7ff ff23 	bl	8001464 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800161e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001620:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001630:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001638:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800163a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800163e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001642:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
}
 800164a:	bd10      	pop	{r4, pc}

0800164c <HAL_UART_Transmit>:
{
 800164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001650:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001652:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001656:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001658:	2b20      	cmp	r3, #32
{
 800165a:	460d      	mov	r5, r1
 800165c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800165e:	d14e      	bne.n	80016fe <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001660:	2900      	cmp	r1, #0
 8001662:	d049      	beq.n	80016f8 <HAL_UART_Transmit+0xac>
 8001664:	2a00      	cmp	r2, #0
 8001666:	d047      	beq.n	80016f8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001668:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800166c:	2b01      	cmp	r3, #1
 800166e:	d046      	beq.n	80016fe <HAL_UART_Transmit+0xb2>
 8001670:	2301      	movs	r3, #1
 8001672:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800167a:	2321      	movs	r3, #33	; 0x21
 800167c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001680:	f7ff f902 	bl	8000888 <HAL_GetTick>
 8001684:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001686:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800168a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800168e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001690:	b29b      	uxth	r3, r3
 8001692:	b96b      	cbnz	r3, 80016b0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4632      	mov	r2, r6
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff ff80 	bl	80015a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016a0:	b9a8      	cbnz	r0, 80016ce <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80016a2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80016a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80016a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80016ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80016b0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016ba:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016bc:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016c2:	4620      	mov	r0, r4
 80016c4:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016c6:	d10e      	bne.n	80016e6 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016c8:	f7ff ff6a 	bl	80015a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016cc:	b110      	cbz	r0, 80016d4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80016ce:	2003      	movs	r0, #3
 80016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016d4:	882b      	ldrh	r3, [r5, #0]
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016dc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	b943      	cbnz	r3, 80016f4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80016e2:	3502      	adds	r5, #2
 80016e4:	e7d3      	b.n	800168e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016e6:	f7ff ff5b 	bl	80015a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	782a      	ldrb	r2, [r5, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	3501      	adds	r5, #1
 80016f6:	e7ca      	b.n	800168e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80016fe:	2002      	movs	r0, #2
}
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001704 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001704:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001708:	2b20      	cmp	r3, #32
 800170a:	d120      	bne.n	800174e <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 800170c:	b1e9      	cbz	r1, 800174a <HAL_UART_Receive_IT+0x46>
 800170e:	b1e2      	cbz	r2, 800174a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001710:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001714:	2b01      	cmp	r3, #1
 8001716:	d01a      	beq.n	800174e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001718:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800171a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800171c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800171e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001720:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001722:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001726:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001728:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800172a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800172c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001730:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001734:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001736:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001738:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800173a:	f041 0101 	orr.w	r1, r1, #1
 800173e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001740:	68d1      	ldr	r1, [r2, #12]
 8001742:	f041 0120 	orr.w	r1, r1, #32
 8001746:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001748:	4770      	bx	lr
      return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	4770      	bx	lr
    return HAL_BUSY;
 800174e:	2002      	movs	r0, #2
}
 8001750:	4770      	bx	lr

08001752 <HAL_UART_TxCpltCallback>:
 8001752:	4770      	bx	lr

08001754 <HAL_UART_RxCpltCallback>:
 8001754:	4770      	bx	lr

08001756 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001756:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800175a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800175c:	2b22      	cmp	r3, #34	; 0x22
 800175e:	d136      	bne.n	80017ce <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001760:	6883      	ldr	r3, [r0, #8]
 8001762:	6901      	ldr	r1, [r0, #16]
 8001764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800176c:	d123      	bne.n	80017b6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800176e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001770:	b9e9      	cbnz	r1, 80017ae <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001772:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001776:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800177a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800177c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800177e:	3c01      	subs	r4, #1
 8001780:	b2a4      	uxth	r4, r4
 8001782:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001784:	b98c      	cbnz	r4, 80017aa <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001786:	6803      	ldr	r3, [r0, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	f022 0220 	bic.w	r2, r2, #32
 800178e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001796:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80017a0:	2320      	movs	r3, #32
 80017a2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80017a6:	f7ff ffd5 	bl	8001754 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f823 2b01 	strh.w	r2, [r3], #1
 80017b4:	e7e1      	b.n	800177a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017b6:	b921      	cbnz	r1, 80017c2 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017b8:	1c59      	adds	r1, r3, #1
 80017ba:	6852      	ldr	r2, [r2, #4]
 80017bc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e7dc      	b.n	800177c <UART_Receive_IT+0x26>
 80017c2:	6852      	ldr	r2, [r2, #4]
 80017c4:	1c59      	adds	r1, r3, #1
 80017c6:	6281      	str	r1, [r0, #40]	; 0x28
 80017c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017cc:	e7f7      	b.n	80017be <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80017ce:	2002      	movs	r0, #2
 80017d0:	bd10      	pop	{r4, pc}

080017d2 <HAL_UART_ErrorCallback>:
 80017d2:	4770      	bx	lr

080017d4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017d4:	6803      	ldr	r3, [r0, #0]
{
 80017d6:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017d8:	681a      	ldr	r2, [r3, #0]
{
 80017da:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80017dc:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017de:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017e0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80017e2:	d107      	bne.n	80017f4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017e4:	0696      	lsls	r6, r2, #26
 80017e6:	d55a      	bpl.n	800189e <HAL_UART_IRQHandler+0xca>
 80017e8:	068d      	lsls	r5, r1, #26
 80017ea:	d558      	bpl.n	800189e <HAL_UART_IRQHandler+0xca>
}
 80017ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80017f0:	f7ff bfb1 	b.w	8001756 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017f4:	f015 0501 	ands.w	r5, r5, #1
 80017f8:	d102      	bne.n	8001800 <HAL_UART_IRQHandler+0x2c>
 80017fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80017fe:	d04e      	beq.n	800189e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001800:	07d3      	lsls	r3, r2, #31
 8001802:	d505      	bpl.n	8001810 <HAL_UART_IRQHandler+0x3c>
 8001804:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001806:	bf42      	ittt	mi
 8001808:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800180a:	f043 0301 	orrmi.w	r3, r3, #1
 800180e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001810:	0750      	lsls	r0, r2, #29
 8001812:	d504      	bpl.n	800181e <HAL_UART_IRQHandler+0x4a>
 8001814:	b11d      	cbz	r5, 800181e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800181e:	0793      	lsls	r3, r2, #30
 8001820:	d504      	bpl.n	800182c <HAL_UART_IRQHandler+0x58>
 8001822:	b11d      	cbz	r5, 800182c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800182c:	0716      	lsls	r6, r2, #28
 800182e:	d504      	bpl.n	800183a <HAL_UART_IRQHandler+0x66>
 8001830:	b11d      	cbz	r5, 800183a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001832:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800183a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d066      	beq.n	800190e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001840:	0695      	lsls	r5, r2, #26
 8001842:	d504      	bpl.n	800184e <HAL_UART_IRQHandler+0x7a>
 8001844:	0688      	lsls	r0, r1, #26
 8001846:	d502      	bpl.n	800184e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff84 	bl	8001756 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800184e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001850:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001852:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001856:	0711      	lsls	r1, r2, #28
 8001858:	d402      	bmi.n	8001860 <HAL_UART_IRQHandler+0x8c>
 800185a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800185e:	d01a      	beq.n	8001896 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001860:	f7ff fdf2 	bl	8001448 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	0652      	lsls	r2, r2, #25
 800186a:	d510      	bpl.n	800188e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800186c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800186e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001874:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001876:	b150      	cbz	r0, 800188e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_UART_IRQHandler+0x13c>)
 800187a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800187c:	f7ff f86e 	bl	800095c <HAL_DMA_Abort_IT>
 8001880:	2800      	cmp	r0, #0
 8001882:	d044      	beq.n	800190e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001884:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800188a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800188c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ff9f 	bl	80017d2 <HAL_UART_ErrorCallback>
 8001894:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001896:	f7ff ff9c 	bl	80017d2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800189c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800189e:	0616      	lsls	r6, r2, #24
 80018a0:	d527      	bpl.n	80018f2 <HAL_UART_IRQHandler+0x11e>
 80018a2:	060d      	lsls	r5, r1, #24
 80018a4:	d525      	bpl.n	80018f2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80018a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80018aa:	2a21      	cmp	r2, #33	; 0x21
 80018ac:	d12f      	bne.n	800190e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018ae:	68a2      	ldr	r2, [r4, #8]
 80018b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018b4:	6a22      	ldr	r2, [r4, #32]
 80018b6:	d117      	bne.n	80018e8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018b8:	8811      	ldrh	r1, [r2, #0]
 80018ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018be:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80018c0:	6921      	ldr	r1, [r4, #16]
 80018c2:	b979      	cbnz	r1, 80018e4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80018c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80018c6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80018c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018ca:	3a01      	subs	r2, #1
 80018cc:	b292      	uxth	r2, r2
 80018ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018d0:	b9ea      	cbnz	r2, 800190e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80018e4:	3201      	adds	r2, #1
 80018e6:	e7ee      	b.n	80018c6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80018e8:	1c51      	adds	r1, r2, #1
 80018ea:	6221      	str	r1, [r4, #32]
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	e7ea      	b.n	80018c8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018f2:	0650      	lsls	r0, r2, #25
 80018f4:	d50b      	bpl.n	800190e <HAL_UART_IRQHandler+0x13a>
 80018f6:	064a      	lsls	r2, r1, #25
 80018f8:	d509      	bpl.n	800190e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018fa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80018fc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001902:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001904:	2320      	movs	r3, #32
 8001906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800190a:	f7ff ff22 	bl	8001752 <HAL_UART_TxCpltCallback>
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	08001915 	.word	0x08001915

08001914 <UART_DMAAbortOnError>:
{
 8001914:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001916:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001918:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800191a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800191c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800191e:	f7ff ff58 	bl	80017d2 <HAL_UART_ErrorCallback>
 8001922:	bd08      	pop	{r3, pc}

08001924 <Gsm_ReturnString.part.1>:
	}
	// timeout
	return false;	
}
//#########################################################################################################
bool	Gsm_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4605      	mov	r5, r0
 8001928:	460c      	mov	r4, r1
		return false;

	char *str = (char*)Gsm.RxBuffer;
	

	str = strtok (str,SplitterChars);
 800192a:	480f      	ldr	r0, [pc, #60]	; (8001968 <Gsm_ReturnString.part.1+0x44>)
 800192c:	4611      	mov	r1, r2
bool	Gsm_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
 800192e:	4616      	mov	r6, r2
	str = strtok (str,SplitterChars);
 8001930:	f002 fb80 	bl	8004034 <strtok>
	if(str == NULL)
 8001934:	b928      	cbnz	r0, 8001942 <Gsm_ReturnString.part.1+0x1e>
	{
		strcpy(result,"");
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <Gsm_ReturnString.part.1+0x48>)
 8001938:	4628      	mov	r0, r5
 800193a:	f002 fb58 	bl	8003fee <strcpy>
		return false;
 800193e:	2000      	movs	r0, #0
 8001940:	bd70      	pop	{r4, r5, r6, pc}
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8001942:	4631      	mov	r1, r6
 8001944:	2000      	movs	r0, #0
 8001946:	f002 fb75 	bl	8004034 <strtok>
		if(str != NULL)
 800194a:	4601      	mov	r1, r0
 800194c:	b140      	cbz	r0, 8001960 <Gsm_ReturnString.part.1+0x3c>
			WantWhichOne--;
 800194e:	3c01      	subs	r4, #1
		if(WantWhichOne==0)
 8001950:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001954:	d1f5      	bne.n	8001942 <Gsm_ReturnString.part.1+0x1e>
		{
			strcpy(result,str);
 8001956:	4628      	mov	r0, r5
 8001958:	f002 fb49 	bl	8003fee <strcpy>
			return true;
 800195c:	2001      	movs	r0, #1
 800195e:	bd70      	pop	{r4, r5, r6, pc}
		if(WantWhichOne==0)
 8001960:	2c00      	cmp	r4, #0
 8001962:	d0f8      	beq.n	8001956 <Gsm_ReturnString.part.1+0x32>
 8001964:	e7e7      	b.n	8001936 <Gsm_ReturnString.part.1+0x12>
 8001966:	bf00      	nop
 8001968:	200026b0 	.word	0x200026b0
 800196c:	080051fc 	.word	0x080051fc

08001970 <malloc>:
    if(size > 0)
 8001970:	b108      	cbz	r0, 8001976 <malloc+0x6>
        ptr = pvPortMalloc(size);
 8001972:	f000 bd23 	b.w	80023bc <pvPortMalloc>
}
 8001976:	4770      	bx	lr

08001978 <Gsm_SendRaw>:
	if(len <= _GSM_TX_SIZE)
 8001978:	2980      	cmp	r1, #128	; 0x80
{
 800197a:	b538      	push	{r3, r4, r5, lr}
 800197c:	4605      	mov	r5, r0
 800197e:	460c      	mov	r4, r1
	if(len <= _GSM_TX_SIZE)
 8001980:	d80e      	bhi.n	80019a0 <Gsm_SendRaw+0x28>
		memcpy(Gsm.TxBuffer,data,len);
 8001982:	460a      	mov	r2, r1
 8001984:	4601      	mov	r1, r0
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <Gsm_SendRaw+0x2c>)
 8001988:	f002 fa52 	bl	8003e30 <memcpy>
		if(HAL_UART_Transmit(&_GSM_USART,data,len,100) == HAL_OK)
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	4622      	mov	r2, r4
 8001990:	4629      	mov	r1, r5
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <Gsm_SendRaw+0x30>)
 8001994:	f7ff fe5a 	bl	800164c <HAL_UART_Transmit>
 8001998:	fab0 f080 	clz	r0, r0
 800199c:	0940      	lsrs	r0, r0, #5
 800199e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 80019a0:	2000      	movs	r0, #0
}
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	200027b0 	.word	0x200027b0
 80019a8:	20002350 	.word	0x20002350

080019ac <Gsm_SendString>:
{
 80019ac:	b510      	push	{r4, lr}
 80019ae:	4604      	mov	r4, r0
	return Gsm_SendRaw((uint8_t*)data,strlen(data));
 80019b0:	f7fe fbce 	bl	8000150 <strlen>
 80019b4:	b281      	uxth	r1, r0
 80019b6:	4620      	mov	r0, r4
}
 80019b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Gsm_SendRaw((uint8_t*)data,strlen(data));
 80019bc:	f7ff bfdc 	b.w	8001978 <Gsm_SendRaw>

080019c0 <Gsm_SendStringAndWait>:
{
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4604      	mov	r4, r0
 80019c4:	460d      	mov	r5, r1
	if(Gsm_SendRaw((uint8_t*)data,strlen(data))==false)
 80019c6:	f7fe fbc3 	bl	8000150 <strlen>
 80019ca:	b281      	uxth	r1, r0
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff ffd3 	bl	8001978 <Gsm_SendRaw>
 80019d2:	4604      	mov	r4, r0
 80019d4:	b110      	cbz	r0, 80019dc <Gsm_SendStringAndWait+0x1c>
	osDelay(DelayMs);
 80019d6:	4628      	mov	r0, r5
 80019d8:	f000 fbd6 	bl	8002188 <osDelay>
}
 80019dc:	4620      	mov	r0, r4
 80019de:	bd38      	pop	{r3, r4, r5, pc}

080019e0 <Gsm_WaitForString>:
{
 80019e0:	b40c      	push	{r2, r3}
 80019e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4605      	mov	r5, r0
 80019ec:	f897 6030 	ldrb.w	r6, [r7, #48]	; 0x30
	if(result == NULL)
 80019f0:	4688      	mov	r8, r1
 80019f2:	b931      	cbnz	r1, 8001a02 <Gsm_WaitForString+0x22>
		return false;
 80019f4:	2000      	movs	r0, #0
}
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fe:	b002      	add	sp, #8
 8001a00:	4770      	bx	lr
	if(CountOfParameter == 0)
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d0f6      	beq.n	80019f4 <Gsm_WaitForString+0x14>
	char *arg[CountOfParameter];
 8001a06:	00b2      	lsls	r2, r6, #2
 8001a08:	320a      	adds	r2, #10
	*result=0;
 8001a0a:	2300      	movs	r3, #0
	char *arg[CountOfParameter];
 8001a0c:	f022 0207 	bic.w	r2, r2, #7
 8001a10:	ebad 0d02 	sub.w	sp, sp, r2
 8001a14:	46e9      	mov	r9, sp
	*result=0;
 8001a16:	700b      	strb	r3, [r1, #0]
	va_start (tag,CountOfParameter);
 8001a18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a1c:	6079      	str	r1, [r7, #4]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4296      	cmp	r6, r2
 8001a22:	d815      	bhi.n	8001a50 <Gsm_WaitForString+0x70>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8001a24:	f04f 0a00 	mov.w	sl, #0
 8001a28:	45aa      	cmp	sl, r5
 8001a2a:	d2e3      	bcs.n	80019f4 <Gsm_WaitForString+0x14>
		osDelay(50);
 8001a2c:	2032      	movs	r0, #50	; 0x32
 8001a2e:	f000 fbab 	bl	8002188 <osDelay>
 8001a32:	2400      	movs	r4, #0
			if(strstr((char*)Gsm.RxBuffer,arg[mx])!=NULL)
 8001a34:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <Gsm_WaitForString+0x8c>)
 8001a3a:	fa5f fb84 	uxtb.w	fp, r4
 8001a3e:	f002 fade 	bl	8003ffe <strstr>
 8001a42:	b158      	cbz	r0, 8001a5c <Gsm_WaitForString+0x7c>
				*result = mx+1;
 8001a44:	f10b 0301 	add.w	r3, fp, #1
 8001a48:	f888 3000 	strb.w	r3, [r8]
				return true;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e7d2      	b.n	80019f6 <Gsm_WaitForString+0x16>
		arg[i] = va_arg (tag, char *);	
 8001a50:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001a54:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	e7e0      	b.n	8001a1e <Gsm_WaitForString+0x3e>
 8001a5c:	3401      	adds	r4, #1
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8001a5e:	b2e3      	uxtb	r3, r4
 8001a60:	429e      	cmp	r6, r3
 8001a62:	d8e7      	bhi.n	8001a34 <Gsm_WaitForString+0x54>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8001a64:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001a68:	e7de      	b.n	8001a28 <Gsm_WaitForString+0x48>
 8001a6a:	bf00      	nop
 8001a6c:	200026b0 	.word	0x200026b0

08001a70 <Gsm_ReturnString>:
	if(result == NULL) 
 8001a70:	b110      	cbz	r0, 8001a78 <Gsm_ReturnString+0x8>
	if(WantWhichOne==0)
 8001a72:	b109      	cbz	r1, 8001a78 <Gsm_ReturnString+0x8>
 8001a74:	f7ff bf56 	b.w	8001924 <Gsm_ReturnString.part.1>
		}
  }
	strcpy(result,"");
	return false;	
}
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4770      	bx	lr

08001a7c <Gsm_ReturnInteger>:
  }
	return false;		
}
//#########################################################################################################
bool	Gsm_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4605      	mov	r5, r0
	if((char*)Gsm.RxBuffer == NULL)
		return false;
	if(Gsm_ReturnString((char*)Gsm.RxBuffer,WantWhichOne,SplitterChars)==false)
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <Gsm_ReturnInteger+0x1c>)
 8001a82:	f7ff fff5 	bl	8001a70 <Gsm_ReturnString>
 8001a86:	4604      	mov	r4, r0
 8001a88:	b118      	cbz	r0, 8001a92 <Gsm_ReturnInteger+0x16>
		return false;
	*result = atoi((char*)Gsm.RxBuffer);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <Gsm_ReturnInteger+0x1c>)
 8001a8c:	f002 f9a1 	bl	8003dd2 <atoi>
 8001a90:	6028      	str	r0, [r5, #0]
	return true;
}
 8001a92:	4620      	mov	r0, r4
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
 8001a96:	bf00      	nop
 8001a98:	200026b0 	.word	0x200026b0

08001a9c <Gsm_RemoveChar>:
	*result = atof((char*)Gsm.RxBuffer);
	return true;
}
//#########################################################################################################
void Gsm_RemoveChar(char *str, char garbage)
{
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	1e42      	subs	r2, r0, #1
 8001aa0:	f100 04ff 	add.w	r4, r0, #255	; 0xff
	uint16_t	MaxBuffCounter=_GSM_RX_SIZE;
	char *src, *dst;
  for (src = dst = str; *src != '\0'; src++)
 8001aa4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001aa8:	b12b      	cbz	r3, 8001ab6 <Gsm_RemoveChar+0x1a>
	{
		*dst = *src;
		if (*dst != garbage)
 8001aaa:	428b      	cmp	r3, r1
		*dst = *src;
 8001aac:	7003      	strb	r3, [r0, #0]
			dst++;
 8001aae:	bf18      	it	ne
 8001ab0:	3001      	addne	r0, #1
		MaxBuffCounter--;
		if(MaxBuffCounter==0)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d1f6      	bne.n	8001aa4 <Gsm_RemoveChar+0x8>
			break;
  }
  *dst = '\0';
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	7003      	strb	r3, [r0, #0]
 8001aba:	bd10      	pop	{r4, pc}

08001abc <Gsm_RxClear>:
}
//#########################################################################################################
void	Gsm_RxClear(void)
{
 8001abc:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001abe:	4c08      	ldr	r4, [pc, #32]	; (8001ae0 <Gsm_RxClear+0x24>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <Gsm_RxClear+0x28>)
 8001ac6:	f7ff fe1d 	bl	8001704 <HAL_UART_Receive_IT>
	memset(Gsm.RxBuffer,0,_GSM_RX_SIZE);
 8001aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ace:	2100      	movs	r1, #0
 8001ad0:	1d20      	adds	r0, r4, #4
 8001ad2:	f002 f9b8 	bl	8003e46 <memset>
	Gsm.RxIndex=0;	
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	bf00      	nop
 8001ae0:	200026ac 	.word	0x200026ac
 8001ae4:	20002350 	.word	0x20002350

08001ae8 <Gsm_TxClear>:
}
//#########################################################################################################
void	Gsm_TxClear(void)
{
	memset(Gsm.TxBuffer,0,_GSM_TX_SIZE);
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	2100      	movs	r1, #0
 8001aec:	4801      	ldr	r0, [pc, #4]	; (8001af4 <Gsm_TxClear+0xc>)
 8001aee:	f002 b9aa 	b.w	8003e46 <memset>
 8001af2:	bf00      	nop
 8001af4:	200027b0 	.word	0x200027b0

08001af8 <Gsm_RxCallBack>:
}
//#########################################################################################################
void	Gsm_RxCallBack(void)
{
 8001af8:	b510      	push	{r4, lr}
	Gsm.RxBuffer[Gsm.RxIndex] = Gsm.usartBuff;
 8001afa:	4c0e      	ldr	r4, [pc, #56]	; (8001b34 <Gsm_RxCallBack+0x3c>)
	RINGBUF_Put(&RxUart3RingBuff, Gsm.usartBuff);
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <Gsm_RxCallBack+0x40>)
	Gsm.RxBuffer[Gsm.RxIndex] = Gsm.usartBuff;
 8001afe:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
 8001b02:	7921      	ldrb	r1, [r4, #4]
 8001b04:	4423      	add	r3, r4
 8001b06:	7219      	strb	r1, [r3, #8]
	RINGBUF_Put(&RxUart3RingBuff, Gsm.usartBuff);
 8001b08:	f000 fae8 	bl	80020dc <RINGBUF_Put>
	if(Gsm.RxIndex < _GSM_RX_SIZE)
 8001b0c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
		Gsm.RxIndex++;
	else
		Gsm.usartRxError=true;
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001b10:	2201      	movs	r2, #1
	if(Gsm.RxIndex < _GSM_RX_SIZE)
 8001b12:	2bff      	cmp	r3, #255	; 0xff
		Gsm.usartRxError=true;
 8001b14:	bf8d      	iteet	hi
 8001b16:	2301      	movhi	r3, #1
		Gsm.RxIndex++;
 8001b18:	3301      	addls	r3, #1
 8001b1a:	f8a4 3188 	strhls.w	r3, [r4, #392]	; 0x188
		Gsm.usartRxError=true;
 8001b1e:	71a3      	strbhi	r3, [r4, #6]
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001b20:	4c06      	ldr	r4, [pc, #24]	; (8001b3c <Gsm_RxCallBack+0x44>)
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <Gsm_RxCallBack+0x48>)
 8001b24:	4621      	mov	r1, r4
 8001b26:	f7ff fded 	bl	8001704 <HAL_UART_Receive_IT>
	Gsm.LastTimeRecieved = HAL_GetTick();
 8001b2a:	f7fe fead 	bl	8000888 <HAL_GetTick>
 8001b2e:	f844 0c04 	str.w	r0, [r4, #-4]
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	200026a8 	.word	0x200026a8
 8001b38:	20002634 	.word	0x20002634
 8001b3c:	200026ac 	.word	0x200026ac
 8001b40:	20002350 	.word	0x20002350

08001b44 <uart1_RxCallBack>:
}
void	uart1_RxCallBack(void)
{
 8001b44:	b510      	push	{r4, lr}
	RINGBUF_Put(&RxUart1RingBuff, Gsm.usart1Buff);
 8001b46:	4c06      	ldr	r4, [pc, #24]	; (8001b60 <uart1_RxCallBack+0x1c>)
 8001b48:	4806      	ldr	r0, [pc, #24]	; (8001b64 <uart1_RxCallBack+0x20>)
 8001b4a:	f814 1f05 	ldrb.w	r1, [r4, #5]!
 8001b4e:	f000 fac5 	bl	80020dc <RINGBUF_Put>
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8001b52:	4621      	mov	r1, r4
}
 8001b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <uart1_RxCallBack+0x24>)
 8001b5c:	f7ff bdd2 	b.w	8001704 <HAL_UART_Receive_IT>
 8001b60:	200026a8 	.word	0x200026a8
 8001b64:	2000264c 	.word	0x2000264c
 8001b68:	20002390 	.word	0x20002390

08001b6c <Gsm_SetPower>:
		printf("gsmtask init fail \r\n");
	}
}
//#########################################################################################################
bool	Gsm_SetPower(bool ON_or_OFF)
{
 8001b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b6e:	4604      	mov	r4, r0
	Gsm_RxClear();
 8001b70:	f7ff ffa4 	bl	8001abc <Gsm_RxClear>
	Gsm_TxClear();
 8001b74:	f7ff ffb8 	bl	8001ae8 <Gsm_TxClear>
	if(ON_or_OFF==false)	// Need Power OFF
	{
		if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_SET)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4838      	ldr	r0, [pc, #224]	; (8001c5c <Gsm_SetPower+0xf0>)
	if(ON_or_OFF==false)	// Need Power OFF
 8001b7c:	bb2c      	cbnz	r4, 8001bca <Gsm_SetPower+0x5e>
		if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_SET)
 8001b7e:	f7ff f815 	bl	8000bac <HAL_GPIO_ReadPin>
 8001b82:	2801      	cmp	r0, #1
 8001b84:	4d36      	ldr	r5, [pc, #216]	; (8001c60 <Gsm_SetPower+0xf4>)
 8001b86:	d105      	bne.n	8001b94 <Gsm_SetPower+0x28>
		{ //POWER ALREADY OFF
			Gsm.PowerState = true;
 8001b88:	2401      	movs	r4, #1
				Gsm.PowerState = true;
				return true;
			}
			else
			{
				Gsm.PowerState = false;
 8001b8a:	f885 418a 	strb.w	r4, [r5, #394]	; 0x18a
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
			Gsm.PowerState = true;
			return true;			
		}
	}
}
 8001b8e:	4620      	mov	r0, r4
 8001b90:	b003      	add	sp, #12
 8001b92:	bd30      	pop	{r4, r5, pc}
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9a:	4830      	ldr	r0, [pc, #192]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001b9c:	f7ff f80c 	bl	8000bb8 <HAL_GPIO_WritePin>
			osDelay(1200);
 8001ba0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001ba4:	f000 faf0 	bl	8002188 <osDelay>
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
 8001ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bac:	4622      	mov	r2, r4
 8001bae:	482b      	ldr	r0, [pc, #172]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001bb0:	f7ff f802 	bl	8000bb8 <HAL_GPIO_WritePin>
			osDelay(3000);
 8001bb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001bb8:	f000 fae6 	bl	8002188 <osDelay>
			if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_RESET)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4827      	ldr	r0, [pc, #156]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001bc0:	f7fe fff4 	bl	8000bac <HAL_GPIO_ReadPin>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d0df      	beq.n	8001b88 <Gsm_SetPower+0x1c>
 8001bc8:	e7df      	b.n	8001b8a <Gsm_SetPower+0x1e>
		if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_SET)
 8001bca:	f7fe ffef 	bl	8000bac <HAL_GPIO_ReadPin>
 8001bce:	2801      	cmp	r0, #1
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	d138      	bne.n	8001c46 <Gsm_SetPower+0xda>
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_SET);
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bda:	4820      	ldr	r0, [pc, #128]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001bdc:	f7fe ffec 	bl	8000bb8 <HAL_GPIO_WritePin>
			osDelay(1200);
 8001be0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001be4:	f000 fad0 	bl	8002188 <osDelay>
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bee:	481b      	ldr	r0, [pc, #108]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001bf0:	f7fe ffe2 	bl	8000bb8 <HAL_GPIO_WritePin>
			osDelay(3000);
 8001bf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001bf8:	f000 fac6 	bl	8002188 <osDelay>
			if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)== GPIO_PIN_SET)
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4817      	ldr	r0, [pc, #92]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001c00:	f7fe ffd4 	bl	8000bac <HAL_GPIO_ReadPin>
 8001c04:	2801      	cmp	r0, #1
 8001c06:	d104      	bne.n	8001c12 <Gsm_SetPower+0xa6>
				Gsm.PowerState = false;
 8001c08:	2400      	movs	r4, #0
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <Gsm_SetPower+0xf4>)
 8001c0c:	f883 418a 	strb.w	r4, [r3, #394]	; 0x18a
 8001c10:	e7bd      	b.n	8001b8e <Gsm_SetPower+0x22>
			osDelay(3000);
 8001c12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c16:	f000 fab7 	bl	8002188 <osDelay>
			Gsm_SendStringAndWait("AT\r\n",500);
 8001c1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <Gsm_SetPower+0xf8>)
 8001c20:	f7ff fece 	bl	80019c0 <Gsm_SendStringAndWait>
			Gsm_SendStringAndWait("AT\r\n",500);
 8001c24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c28:	480e      	ldr	r0, [pc, #56]	; (8001c64 <Gsm_SetPower+0xf8>)
 8001c2a:	f7ff fec9 	bl	80019c0 <Gsm_SendStringAndWait>
			if(Gsm_WaitForString(_GSM_WAIT_TIME_LOW,&result,1,"OK") == false){
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <Gsm_SetPower+0xfc>)
 8001c30:	462a      	mov	r2, r5
 8001c32:	f10d 0107 	add.w	r1, sp, #7
 8001c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3a:	f7ff fed1 	bl	80019e0 <Gsm_WaitForString>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0e1      	beq.n	8001c08 <Gsm_SetPower+0x9c>
 8001c44:	e7a3      	b.n	8001b8e <Gsm_SetPower+0x22>
			HAL_GPIO_WritePin(WISMO_ON_GPIO_Port,WISMO_ON_Pin,GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <Gsm_SetPower+0xf0>)
 8001c4e:	f7fe ffb3 	bl	8000bb8 <HAL_GPIO_WritePin>
			Gsm.PowerState = true;
 8001c52:	2201      	movs	r2, #1
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <Gsm_SetPower+0xf4>)
 8001c56:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8001c5a:	e798      	b.n	8001b8e <Gsm_SetPower+0x22>
 8001c5c:	40010c00 	.word	0x40010c00
 8001c60:	200026a8 	.word	0x200026a8
 8001c64:	08005213 	.word	0x08005213
 8001c68:	0800529d 	.word	0x0800529d

08001c6c <gsmCheckPower>:

bool gsmCheckPower(void){
 8001c6c:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(WISMO_RDY_GPIO_Port,WISMO_RDY_Pin)==GPIO_PIN_SET)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <gsmCheckPower+0x14>)
 8001c72:	f7fe ff9b 	bl	8000bac <HAL_GPIO_ReadPin>
		return false;
	else return true;
}
 8001c76:	f110 30ff 	adds.w	r0, r0, #4294967295
 8001c7a:	bf18      	it	ne
 8001c7c:	2001      	movne	r0, #1
 8001c7e:	bd08      	pop	{r3, pc}
 8001c80:	40010c00 	.word	0x40010c00

08001c84 <sttCheckRoutineTask>:
void sttCheckRoutineTask(void const * argument){
 8001c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	osDelay(2000);
 8001c88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c8c:	f000 fa7c 	bl	8002188 <osDelay>
	result = Gsm_SetPower(true);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff ff6b 	bl	8001b6c <Gsm_SetPower>
	if (result == false){
 8001c96:	4604      	mov	r4, r0
 8001c98:	4f1f      	ldr	r7, [pc, #124]	; (8001d18 <sttCheckRoutineTask+0x94>)
		osThreadSuspend(gsmTaskNameHandle);
 8001c9a:	6838      	ldr	r0, [r7, #0]
	if (result == false){
 8001c9c:	bb84      	cbnz	r4, 8001d00 <sttCheckRoutineTask+0x7c>
		osThreadSuspend(gsmTaskNameHandle);
 8001c9e:	f000 fb41 	bl	8002324 <osThreadSuspend>
	osMessagePut(ledQueueHandle, data, 100);
 8001ca2:	4e1e      	ldr	r6, [pc, #120]	; (8001d1c <sttCheckRoutineTask+0x98>)
 8001ca4:	2264      	movs	r2, #100	; 0x64
 8001ca6:	f044 0106 	orr.w	r1, r4, #6
 8001caa:	6830      	ldr	r0, [r6, #0]
 8001cac:	f000 fad8 	bl	8002260 <osMessagePut>
		printf("POWER CHECK \r\n");
 8001cb0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001d20 <sttCheckRoutineTask+0x9c>
				printf("UC15 POWER FAIL\r\n");
 8001cb4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8001d24 <sttCheckRoutineTask+0xa0>
if(osMessageAvailableSpace(datQueueHandle))
 8001cb8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001d28 <sttCheckRoutineTask+0xa4>
		osDelay(2000);
 8001cbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cc0:	f000 fa62 	bl	8002188 <osDelay>
		printf("POWER CHECK \r\n");
 8001cc4:	4648      	mov	r0, r9
 8001cc6:	f002 f923 	bl	8003f10 <puts>
		result = gsmCheckPower();
 8001cca:	f7ff ffcf 	bl	8001c6c <gsmCheckPower>
		if (result == false){
 8001cce:	4605      	mov	r5, r0
 8001cd0:	b9d0      	cbnz	r0, 8001d08 <sttCheckRoutineTask+0x84>
			result = Gsm_SetPower(true);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff ff4a 	bl	8001b6c <Gsm_SetPower>
			if (result == false){
 8001cd8:	4604      	mov	r4, r0
 8001cda:	b9c8      	cbnz	r0, 8001d10 <sttCheckRoutineTask+0x8c>
				osThreadSuspend(gsmTaskNameHandle);
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f000 fb21 	bl	8002324 <osThreadSuspend>
				printf("UC15 POWER FAIL\r\n");
 8001ce2:	4650      	mov	r0, sl
 8001ce4:	f002 f914 	bl	8003f10 <puts>
if(osMessageAvailableSpace(datQueueHandle))
 8001ce8:	f8d8 0000 	ldr.w	r0, [r8]
 8001cec:	f000 fb3f 	bl	800236e <osMessageAvailableSpace>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d0e3      	beq.n	8001cbc <sttCheckRoutineTask+0x38>
		osMessagePut(ledQueueHandle, data, 100);
 8001cf4:	2264      	movs	r2, #100	; 0x64
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	6830      	ldr	r0, [r6, #0]
 8001cfa:	f000 fab1 	bl	8002260 <osMessagePut>
 8001cfe:	e7dd      	b.n	8001cbc <sttCheckRoutineTask+0x38>
		osThreadResume(gsmTaskNameHandle);
 8001d00:	f000 fb16 	bl	8002330 <osThreadResume>
		data |= POW_FLAG;
 8001d04:	2401      	movs	r4, #1
 8001d06:	e7cc      	b.n	8001ca2 <sttCheckRoutineTask+0x1e>
			osThreadResume(gsmTaskNameHandle);
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f000 fb11 	bl	8002330 <osThreadResume>
			data |= POW_FLAG;
 8001d0e:	2501      	movs	r5, #1
		data |= INTERNET_FLAG;
 8001d10:	f045 0406 	orr.w	r4, r5, #6
 8001d14:	e7e8      	b.n	8001ce8 <sttCheckRoutineTask+0x64>
 8001d16:	bf00      	nop
 8001d18:	20002528 	.word	0x20002528
 8001d1c:	20002630 	.word	0x20002630
 8001d20:	080052a0 	.word	0x080052a0
 8001d24:	080052ae 	.word	0x080052ae
 8001d28:	2000252c 	.word	0x2000252c

08001d2c <Gsm_SocketGetStatus>:

/*
 * current state of socket
 */
int Gsm_SocketGetStatus(uint8_t connectID)
{
 8001d2c:	b530      	push	{r4, r5, lr}
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001d2e:	4c22      	ldr	r4, [pc, #136]	; (8001db8 <Gsm_SocketGetStatus+0x8c>)
{
 8001d30:	b085      	sub	sp, #20
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
{
 8001d36:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001d38:	6820      	ldr	r0, [r4, #0]
 8001d3a:	f000 fa41 	bl	80021c0 <osSemaphoreWait>
	uint8_t result;
	int state = STATE_INITIAL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9303      	str	r3, [sp, #12]
	Gsm_RxClear();
 8001d42:	f7ff febb 	bl	8001abc <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QISTATE=1,%d\r\n", connectID);
 8001d46:	462a      	mov	r2, r5
 8001d48:	491c      	ldr	r1, [pc, #112]	; (8001dbc <Gsm_SocketGetStatus+0x90>)
 8001d4a:	481d      	ldr	r0, [pc, #116]	; (8001dc0 <Gsm_SocketGetStatus+0x94>)
 8001d4c:	f002 f8e8 	bl	8003f20 <siprintf>
#if DETAILED_DEBUG		
		printf("command: %s ", Gsm.TxBuffer);
#endif
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001d50:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <Gsm_SocketGetStatus+0x94>)
 8001d52:	f7ff fe2b 	bl	80019ac <Gsm_SendString>
 8001d56:	b180      	cbz	r0, 8001d7a <Gsm_SocketGetStatus+0x4e>
			break;
		if (Gsm_WaitForString(_GSM_WAIT_TIME_LOW, &result, 2, "OK", "ERROR") == false)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <Gsm_SocketGetStatus+0x98>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f10d 010b 	add.w	r1, sp, #11
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <Gsm_SocketGetStatus+0x9c>)
 8001d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d68:	f7ff fe3a 	bl	80019e0 <Gsm_WaitForString>
 8001d6c:	b128      	cbz	r0, 8001d7a <Gsm_SocketGetStatus+0x4e>
			break;
		if (result == 2)
 8001d6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <Gsm_SocketGetStatus+0x5a>
		{
			state = STATE_ERROR;
 8001d76:	2304      	movs	r3, #4
 8001d78:	9303      	str	r3, [sp, #12]
	}
	while(0);
#if DETAILED_DEBUG
	printf(" state: %d\n\r", state);
#endif
	osSemaphoreRelease(myBinarySem01Handle);
 8001d7a:	6820      	ldr	r0, [r4, #0]
 8001d7c:	f000 fa48 	bl	8002210 <osSemaphoreRelease>
	return state;
}
 8001d80:	9803      	ldr	r0, [sp, #12]
 8001d82:	b005      	add	sp, #20
 8001d84:	bd30      	pop	{r4, r5, pc}
		if (strstr((char *) Gsm.RxBuffer, "+QISTATE") == NULL)
 8001d86:	4911      	ldr	r1, [pc, #68]	; (8001dcc <Gsm_SocketGetStatus+0xa0>)
 8001d88:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <Gsm_SocketGetStatus+0xa4>)
 8001d8a:	f002 f938 	bl	8003ffe <strstr>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0f3      	beq.n	8001d7a <Gsm_SocketGetStatus+0x4e>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, '"');
 8001d92:	2122      	movs	r1, #34	; 0x22
 8001d94:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <Gsm_SocketGetStatus+0xa4>)
 8001d96:	f7ff fe81 	bl	8001a9c <Gsm_RemoveChar>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, ' ');
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <Gsm_SocketGetStatus+0xa4>)
 8001d9e:	f7ff fe7d 	bl	8001a9c <Gsm_RemoveChar>
		Gsm_RemoveChar((char *) Gsm.RxBuffer, '\n');
 8001da2:	210a      	movs	r1, #10
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <Gsm_SocketGetStatus+0xa4>)
 8001da6:	f7ff fe79 	bl	8001a9c <Gsm_RemoveChar>
		Gsm_ReturnInteger((int32_t*)&state, 5, ",");
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <Gsm_SocketGetStatus+0xa8>)
 8001dac:	2105      	movs	r1, #5
 8001dae:	a803      	add	r0, sp, #12
 8001db0:	f7ff fe64 	bl	8001a7c <Gsm_ReturnInteger>
 8001db4:	e7e1      	b.n	8001d7a <Gsm_SocketGetStatus+0x4e>
 8001db6:	bf00      	nop
 8001db8:	20002648 	.word	0x20002648
 8001dbc:	08005228 	.word	0x08005228
 8001dc0:	200027b0 	.word	0x200027b0
 8001dc4:	0800520d 	.word	0x0800520d
 8001dc8:	0800529d 	.word	0x0800529d
 8001dcc:	0800523a 	.word	0x0800523a
 8001dd0:	200026b0 	.word	0x200026b0
 8001dd4:	080051ec 	.word	0x080051ec

08001dd8 <Gsm_SocketOpen>:

/*
 * This function open a socket tcp on server
 */
bool Gsm_SocketOpen(uint8_t connectID)
{
 8001dd8:	b530      	push	{r4, r5, lr}
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001dda:	4c1e      	ldr	r4, [pc, #120]	; (8001e54 <Gsm_SocketOpen+0x7c>)
{
 8001ddc:	b089      	sub	sp, #36	; 0x24
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001dde:	f04f 31ff 	mov.w	r1, #4294967295
{
 8001de2:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001de4:	6820      	ldr	r0, [r4, #0]
 8001de6:	f000 f9eb 	bl	80021c0 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	uint8_t result_command[15];
	do
	{
		Gsm_RxClear();
 8001dea:	f7ff fe67 	bl	8001abc <Gsm_RxClear>
		sprintf((char *) Gsm.TxBuffer, "AT+QIOPEN=1,%d,\"TCP\",%s,%d,0,0\r\n", connectID, HOSTNAME_TCP, PORT_TCP);
 8001dee:	f240 735b 	movw	r3, #1883	; 0x75b
 8001df2:	462a      	mov	r2, r5
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4918      	ldr	r1, [pc, #96]	; (8001e58 <Gsm_SocketOpen+0x80>)
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <Gsm_SocketOpen+0x84>)
 8001dfa:	4819      	ldr	r0, [pc, #100]	; (8001e60 <Gsm_SocketOpen+0x88>)
 8001dfc:	f002 f890 	bl	8003f20 <siprintf>
#if DETAILED_DEBUG
		printf("command: %s\n\r",Gsm.TxBuffer);
#endif
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001e00:	4817      	ldr	r0, [pc, #92]	; (8001e60 <Gsm_SocketOpen+0x88>)
 8001e02:	f7ff fdd3 	bl	80019ac <Gsm_SendString>
 8001e06:	b930      	cbnz	r0, 8001e16 <Gsm_SocketOpen+0x3e>
	bool	returnVal=false;
 8001e08:	2500      	movs	r5, #0
			if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 1, result_command) == false)
				break;
			returnVal = true;
		}
	}	while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	f000 fa00 	bl	8002210 <osSemaphoreRelease>
	return returnVal;

}
 8001e10:	4628      	mov	r0, r5
 8001e12:	b009      	add	sp, #36	; 0x24
 8001e14:	bd30      	pop	{r4, r5, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_MED, &result, 2, "OK", "ERROR") == false)
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <Gsm_SocketOpen+0x8c>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f10d 010f 	add.w	r1, sp, #15
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <Gsm_SocketOpen+0x90>)
 8001e22:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e26:	f7ff fddb 	bl	80019e0 <Gsm_WaitForString>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d0ec      	beq.n	8001e08 <Gsm_SocketOpen+0x30>
		if (result == SECOND_PARAMETER)
 8001e2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d0e8      	beq.n	8001e08 <Gsm_SocketOpen+0x30>
			sprintf((char *) result_command, "+QIOPEN: %d,0", connectID);
 8001e36:	462a      	mov	r2, r5
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <Gsm_SocketOpen+0x94>)
 8001e3a:	a804      	add	r0, sp, #16
 8001e3c:	f002 f870 	bl	8003f20 <siprintf>
			if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 1, result_command) == false)
 8001e40:	ab04      	add	r3, sp, #16
 8001e42:	2201      	movs	r2, #1
 8001e44:	f10d 010f 	add.w	r1, sp, #15
 8001e48:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001e4c:	f7ff fdc8 	bl	80019e0 <Gsm_WaitForString>
 8001e50:	4605      	mov	r5, r0
 8001e52:	e7da      	b.n	8001e0a <Gsm_SocketOpen+0x32>
 8001e54:	20002648 	.word	0x20002648
 8001e58:	08005257 	.word	0x08005257
 8001e5c:	08005243 	.word	0x08005243
 8001e60:	200027b0 	.word	0x200027b0
 8001e64:	0800520d 	.word	0x0800520d
 8001e68:	0800529d 	.word	0x0800529d
 8001e6c:	08005278 	.word	0x08005278

08001e70 <Gsm_SocketSendData>:
/*
 * This function will send data
 */
bool Gsm_SocketSendData(uint8_t connectID, uint8_t * buf, uint8_t len)
{
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	4616      	mov	r6, r2
 8001e74:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001e76:	4c21      	ldr	r4, [pc, #132]	; (8001efc <Gsm_SocketSendData+0x8c>)
{
 8001e78:	b085      	sub	sp, #20
 8001e7a:	460f      	mov	r7, r1
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	f000 f99d 	bl	80021c0 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	Gsm_RxClear();
 8001e86:	f7ff fe19 	bl	8001abc <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QISEND=%d,%d\r\n", connectID, len);
 8001e8a:	462a      	mov	r2, r5
 8001e8c:	4633      	mov	r3, r6
 8001e8e:	491c      	ldr	r1, [pc, #112]	; (8001f00 <Gsm_SocketSendData+0x90>)
 8001e90:	481c      	ldr	r0, [pc, #112]	; (8001f04 <Gsm_SocketSendData+0x94>)
 8001e92:	f002 f845 	bl	8003f20 <siprintf>
#if DETAILED_DEBUG
		printf("command: %s\n\r",Gsm.TxBuffer);
#endif
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001e96:	481b      	ldr	r0, [pc, #108]	; (8001f04 <Gsm_SocketSendData+0x94>)
 8001e98:	f7ff fd88 	bl	80019ac <Gsm_SendString>
 8001e9c:	4625      	mov	r5, r4
 8001e9e:	b930      	cbnz	r0, 8001eae <Gsm_SocketSendData+0x3e>
	bool	returnVal=false;
 8001ea0:	2400      	movs	r4, #0
		if (result == SECOND_PARAMETER)
			break;
		returnVal = true;
	}
	while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001ea2:	6828      	ldr	r0, [r5, #0]
 8001ea4:	f000 f9b4 	bl	8002210 <osSemaphoreRelease>
	return returnVal;
}
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	b005      	add	sp, #20
 8001eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, ">", "ERROR") == false)
 8001eae:	4c16      	ldr	r4, [pc, #88]	; (8001f08 <Gsm_SocketSendData+0x98>)
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <Gsm_SocketSendData+0x9c>)
 8001eb2:	9400      	str	r4, [sp, #0]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f10d 010f 	add.w	r1, sp, #15
 8001eba:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001ebe:	f7ff fd8f 	bl	80019e0 <Gsm_WaitForString>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d0ec      	beq.n	8001ea0 <Gsm_SocketSendData+0x30>
		if (result == SECOND_PARAMETER)
 8001ec6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d0e8      	beq.n	8001ea0 <Gsm_SocketSendData+0x30>
		if (Gsm_SendRaw(buf, len) == false)
 8001ece:	4631      	mov	r1, r6
 8001ed0:	4638      	mov	r0, r7
 8001ed2:	f7ff fd51 	bl	8001978 <Gsm_SendRaw>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d0e2      	beq.n	8001ea0 <Gsm_SocketSendData+0x30>
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, "SEND OK", "ERROR") == false)
 8001eda:	9400      	str	r4, [sp, #0]
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <Gsm_SocketSendData+0xa0>)
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f10d 010f 	add.w	r1, sp, #15
 8001ee4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001ee8:	f7ff fd7a 	bl	80019e0 <Gsm_WaitForString>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0d7      	beq.n	8001ea0 <Gsm_SocketSendData+0x30>
		if (result == SECOND_PARAMETER)
 8001ef0:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8001ef4:	3c02      	subs	r4, #2
 8001ef6:	bf18      	it	ne
 8001ef8:	2401      	movne	r4, #1
 8001efa:	e7d2      	b.n	8001ea2 <Gsm_SocketSendData+0x32>
 8001efc:	20002648 	.word	0x20002648
 8001f00:	08005286 	.word	0x08005286
 8001f04:	200027b0 	.word	0x200027b0
 8001f08:	0800520d 	.word	0x0800520d
 8001f0c:	080051fd 	.word	0x080051fd
 8001f10:	08005298 	.word	0x08005298

08001f14 <Gsm_SocketClose>:

/*
 * This function close a socket connection with given connectID
 */
bool Gsm_SocketClose(uint8_t connectID)
{
 8001f14:	b530      	push	{r4, r5, lr}
 8001f16:	4605      	mov	r5, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001f18:	4c15      	ldr	r4, [pc, #84]	; (8001f70 <Gsm_SocketClose+0x5c>)
{
 8001f1a:	b085      	sub	sp, #20
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f000 f94d 	bl	80021c0 <osSemaphoreWait>
	uint8_t result;
	bool	returnVal=false;
	Gsm_RxClear();
 8001f26:	f7ff fdc9 	bl	8001abc <Gsm_RxClear>
	do
	{
		sprintf((char *) Gsm.TxBuffer, "AT+QICLOSE=%d\r\n", connectID);
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	4911      	ldr	r1, [pc, #68]	; (8001f74 <Gsm_SocketClose+0x60>)
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <Gsm_SocketClose+0x64>)
 8001f30:	f001 fff6 	bl	8003f20 <siprintf>
#if DETAILED_DEBUG		
		printf("command: %s", Gsm.TxBuffer);
#endif
		if (Gsm_SendString((char *) Gsm.TxBuffer) == false)
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <Gsm_SocketClose+0x64>)
 8001f36:	f7ff fd39 	bl	80019ac <Gsm_SendString>
 8001f3a:	4625      	mov	r5, r4
 8001f3c:	b930      	cbnz	r0, 8001f4c <Gsm_SocketClose+0x38>
	bool	returnVal=false;
 8001f3e:	2400      	movs	r4, #0
			break;
		if (result == SECOND_PARAMETER)
			break;
		returnVal = true;
	} while(0);
	osSemaphoreRelease(myBinarySem01Handle);
 8001f40:	6828      	ldr	r0, [r5, #0]
 8001f42:	f000 f965 	bl	8002210 <osSemaphoreRelease>
	return returnVal;
}
 8001f46:	4620      	mov	r0, r4
 8001f48:	b005      	add	sp, #20
 8001f4a:	bd30      	pop	{r4, r5, pc}
		if (Gsm_WaitForString(_GSM_WAIT_TIME_HIGH, &result, 2, "OK", "ERROR") == false)
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <Gsm_SocketClose+0x68>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	f10d 010f 	add.w	r1, sp, #15
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <Gsm_SocketClose+0x6c>)
 8001f58:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001f5c:	f7ff fd40 	bl	80019e0 <Gsm_WaitForString>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d0ec      	beq.n	8001f3e <Gsm_SocketClose+0x2a>
		if (result == SECOND_PARAMETER)
 8001f64:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8001f68:	3c02      	subs	r4, #2
 8001f6a:	bf18      	it	ne
 8001f6c:	2401      	movne	r4, #1
 8001f6e:	e7e7      	b.n	8001f40 <Gsm_SocketClose+0x2c>
 8001f70:	20002648 	.word	0x20002648
 8001f74:	08005218 	.word	0x08005218
 8001f78:	200027b0 	.word	0x200027b0
 8001f7c:	0800520d 	.word	0x0800520d
 8001f80:	0800529d 	.word	0x0800529d

08001f84 <Gsm_MqttConnect>:
/*
 * This function send a CONNECT MQTT packet to  a socket with given connectID
 */
bool Gsm_MqttConnect(uint8_t connectID, MQTTPacket_connectData *data)
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	b0b2      	sub	sp, #200	; 0xc8
 8001f88:	4604      	mov	r4, r0
	/* //no need to check connection status
	result = Gsm_SocketGetStatus(connectID);
	if(result != STATE_CONNECTED)
		Gsm_SocketOpen(connectID); */
	/*generate connect packet*/
	len = MQTTSerialize_connect(buf, buflen, data);
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	4668      	mov	r0, sp
 8001f8e:	21c8      	movs	r1, #200	; 0xc8
 8001f90:	f001 fdbc 	bl	8003b0c <MQTTSerialize_connect>
	/*send data*/
	result = Gsm_SocketSendData(connectID, buf, len);
 8001f94:	4669      	mov	r1, sp
 8001f96:	b2c2      	uxtb	r2, r0
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff ff69 	bl	8001e70 <Gsm_SocketSendData>
	return result;
}
 8001f9e:	b032      	add	sp, #200	; 0xc8
 8001fa0:	bd10      	pop	{r4, pc}

08001fa2 <Gsm_MqttPublish>:
/*
 * This function send a publish packet to  a socket with given connectID
 */
bool Gsm_MqttPublish(uint8_t connectID,char * payload, MQTTPacket_connectData *data,MQTTString topicString)
{
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	b0ba      	sub	sp, #232	; 0xe8
 8001fa8:	4606      	mov	r6, r0
 8001faa:	ac3e      	add	r4, sp, #248	; 0xf8
#if DETAILED_DEBUG
	printf("Gsm_MqttPublish\n\r");
#endif
	int payloadlen = strlen(payload);
 8001fac:	4608      	mov	r0, r1
{
 8001fae:	460d      	mov	r5, r1
 8001fb0:	f844 3f04 	str.w	r3, [r4, #4]!
	int payloadlen = strlen(payload);
 8001fb4:	f7fe f8cc 	bl	8000150 <strlen>
	{
		Gsm_SocketOpen(connectID);
		Gsm_MqttConnect(connectID, data);
	} */
	/*generate connect packet*/
	len = MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char *) payload, payloadlen);
 8001fb8:	9505      	str	r5, [sp, #20]
 8001fba:	9006      	str	r0, [sp, #24]
 8001fbc:	ab02      	add	r3, sp, #8
 8001fbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	21c8      	movs	r1, #200	; 0xc8
 8001fca:	461a      	mov	r2, r3
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	a808      	add	r0, sp, #32
 8001fd2:	f001 feb6 	bl	8003d42 <MQTTSerialize_publish>
	/*send data*/
	result = Gsm_SocketSendData(connectID, buf, len);
 8001fd6:	a908      	add	r1, sp, #32
 8001fd8:	b2c2      	uxtb	r2, r0
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f7ff ff48 	bl	8001e70 <Gsm_SocketSendData>
	return result;
}
 8001fe0:	b03a      	add	sp, #232	; 0xe8
 8001fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fe6:	b002      	add	sp, #8
 8001fe8:	4770      	bx	lr
	...

08001fec <GsmTask>:
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
	MQTTString topicString = MQTTString_initializer;
 8001fee:	2400      	movs	r4, #0
{
 8001ff0:	b0a0      	sub	sp, #128	; 0x80
	HAL_UART_Receive_IT(&_GSM_USART,&Gsm.usartBuff,1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4928      	ldr	r1, [pc, #160]	; (8002098 <GsmTask+0xac>)
 8001ff6:	4829      	ldr	r0, [pc, #164]	; (800209c <GsmTask+0xb0>)
 8001ff8:	f7ff fb84 	bl	8001704 <HAL_UART_Receive_IT>
	Gsm_RxClear();
 8001ffc:	f7ff fd5e 	bl	8001abc <Gsm_RxClear>
	Gsm_TxClear();
 8002000:	f7ff fd72 	bl	8001ae8 <Gsm_TxClear>
	HAL_UART_Receive_IT(&_SR_USART,&Gsm.usart1Buff,1);
 8002004:	2201      	movs	r2, #1
 8002006:	4926      	ldr	r1, [pc, #152]	; (80020a0 <GsmTask+0xb4>)
 8002008:	4826      	ldr	r0, [pc, #152]	; (80020a4 <GsmTask+0xb8>)
 800200a:	f7ff fb7b 	bl	8001704 <HAL_UART_Receive_IT>
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800200e:	2258      	movs	r2, #88	; 0x58
 8002010:	4925      	ldr	r1, [pc, #148]	; (80020a8 <GsmTask+0xbc>)
 8002012:	a80a      	add	r0, sp, #40	; 0x28
	MQTTString topicString = MQTTString_initializer;
 8002014:	9403      	str	r4, [sp, #12]
 8002016:	9404      	str	r4, [sp, #16]
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8002018:	f001 ff0a 	bl	8003e30 <memcpy>
	data.clientID.cstring = "lampl";
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <GsmTask+0xc0>)
		printf("SEND MESSAGE\r\n");
 800201e:	4d24      	ldr	r5, [pc, #144]	; (80020b0 <GsmTask+0xc4>)
	data.clientID.cstring = "lampl";
 8002020:	930d      	str	r3, [sp, #52]	; 0x34
	topicString.cstring = "vpt";
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <GsmTask+0xc8>)
		sprintf(payload,"count: %d\n",count_payload);
 8002024:	4e24      	ldr	r6, [pc, #144]	; (80020b8 <GsmTask+0xcc>)
	topicString.cstring = "vpt";
 8002026:	9302      	str	r3, [sp, #8]
	osThreadSuspend(gsmTaskNameHandle);
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <GsmTask+0xd0>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f000 f97a 	bl	8002324 <osThreadSuspend>
		printf("SEND MESSAGE\r\n");
 8002030:	4628      	mov	r0, r5
 8002032:	f001 ff6d 	bl	8003f10 <puts>
		sprintf(payload,"count: %d\n",count_payload);
 8002036:	4622      	mov	r2, r4
 8002038:	4631      	mov	r1, r6
 800203a:	a805      	add	r0, sp, #20
 800203c:	f001 ff70 	bl	8003f20 <siprintf>
			GsmResult = Gsm_SocketGetStatus(CONNECT_ID);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fe73 	bl	8001d2c <Gsm_SocketGetStatus>
 8002046:	b2c0      	uxtb	r0, r0
			if (GsmResult == STATE_CONNECTED)
 8002048:	2802      	cmp	r0, #2
 800204a:	d113      	bne.n	8002074 <GsmTask+0x88>
			if(Gsm_MqttConnect(CONNECT_ID, &data) == false)
 800204c:	a90a      	add	r1, sp, #40	; 0x28
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff ff98 	bl	8001f84 <Gsm_MqttConnect>
 8002054:	b1a0      	cbz	r0, 8002080 <GsmTask+0x94>
			if(Gsm_MqttPublish(CONNECT_ID,payload, &data, topicString) == false)
 8002056:	ab03      	add	r3, sp, #12
 8002058:	e893 0003 	ldmia.w	r3, {r0, r1}
 800205c:	aa0a      	add	r2, sp, #40	; 0x28
 800205e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002062:	9b02      	ldr	r3, [sp, #8]
 8002064:	a905      	add	r1, sp, #20
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ff9b 	bl	8001fa2 <Gsm_MqttPublish>
				Gsm_SocketClose(CONNECT_ID);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff ff51 	bl	8001f14 <Gsm_SocketClose>
 8002072:	e005      	b.n	8002080 <GsmTask+0x94>
			if (GsmResult != STATE_INITIAL)
 8002074:	b950      	cbnz	r0, 800208c <GsmTask+0xa0>
			if(Gsm_SocketOpen(CONNECT_ID) == false)
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff feae 	bl	8001dd8 <Gsm_SocketOpen>
 800207c:	2800      	cmp	r0, #0
 800207e:	d1e5      	bne.n	800204c <GsmTask+0x60>
		HAL_Delay(_GSM_WAIT_TIME_LOW*3);
 8002080:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002084:	f7fe fc06 	bl	8000894 <HAL_Delay>
		count_payload++;
 8002088:	3401      	adds	r4, #1
		printf("SEND MESSAGE\r\n");
 800208a:	e7d1      	b.n	8002030 <GsmTask+0x44>
				if(Gsm_SocketClose(CONNECT_ID) == false)
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff41 	bl	8001f14 <Gsm_SocketClose>
 8002092:	2800      	cmp	r0, #0
 8002094:	d1ef      	bne.n	8002076 <GsmTask+0x8a>
 8002096:	e7f3      	b.n	8002080 <GsmTask+0x94>
 8002098:	200026ac 	.word	0x200026ac
 800209c:	20002350 	.word	0x20002350
 80020a0:	200026ad 	.word	0x200026ad
 80020a4:	20002390 	.word	0x20002390
 80020a8:	080050f4 	.word	0x080050f4
 80020ac:	080051b8 	.word	0x080051b8
 80020b0:	080051c2 	.word	0x080051c2
 80020b4:	080051be 	.word	0x080051be
 80020b8:	080051d0 	.word	0x080051d0
 80020bc:	20002528 	.word	0x20002528

080020c0 <RINGBUF_Init>:
* \param size size of buf
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Init(RINGBUF *r, uint8_t* buf, uint32_t size)
{
	if(r == NULL || buf == NULL || size < 2) return -1;
 80020c0:	b148      	cbz	r0, 80020d6 <RINGBUF_Init+0x16>
 80020c2:	b141      	cbz	r1, 80020d6 <RINGBUF_Init+0x16>
 80020c4:	2a01      	cmp	r2, #1
 80020c6:	d906      	bls.n	80020d6 <RINGBUF_Init+0x16>

	r->pt = buf;
	r->head = 0;
 80020c8:	2300      	movs	r3, #0
	r->pt = buf;
 80020ca:	60c1      	str	r1, [r0, #12]
	r->head = 0;
 80020cc:	6003      	str	r3, [r0, #0]
	r->tail = 0;
 80020ce:	6043      	str	r3, [r0, #4]
	r->size = size;
 80020d0:	6082      	str	r2, [r0, #8]

	return 0;
 80020d2:	4618      	mov	r0, r3
 80020d4:	4770      	bx	lr
	if(r == NULL || buf == NULL || size < 2) return -1;
 80020d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020da:	4770      	bx	lr

080020dc <RINGBUF_Put>:
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Put(RINGBUF *r, uint8_t c)
{
	uint32_t temp;
	temp = r->head;
 80020dc:	6803      	ldr	r3, [r0, #0]
	temp++;
	if(temp >= r->size)
 80020de:	6882      	ldr	r2, [r0, #8]
	temp++;
 80020e0:	3301      	adds	r3, #1
	{
		temp = 0;
 80020e2:	4293      	cmp	r3, r2
 80020e4:	bf28      	it	cs
 80020e6:	2300      	movcs	r3, #0
	}
	if(temp == r->tail)
 80020e8:	6842      	ldr	r2, [r0, #4]
{
 80020ea:	b510      	push	{r4, lr}
	if(temp == r->tail)
 80020ec:	4293      	cmp	r3, r2
	{
	 	return -1;		// ring buffer is full
	}

	r->pt[r->head] = c;
 80020ee:	bf1f      	itttt	ne
 80020f0:	6802      	ldrne	r2, [r0, #0]
 80020f2:	68c4      	ldrne	r4, [r0, #12]
 80020f4:	54a1      	strbne	r1, [r4, r2]
	r->head = temp;
 80020f6:	6003      	strne	r3, [r0, #0]

	return 0;
 80020f8:	bf14      	ite	ne
 80020fa:	2000      	movne	r0, #0
	 	return -1;		// ring buffer is full
 80020fc:	f04f 30ff 	moveq.w	r0, #4294967295
}
 8002100:	bd10      	pop	{r4, pc}

08002102 <RINGBUF_Get>:
* \param c read character
* \return 0 if successfull, otherwise failed
*/
int32_t RINGBUF_Get(RINGBUF *r, uint8_t* c)
{
	if(r->tail == r->head)
 8002102:	6842      	ldr	r2, [r0, #4]
 8002104:	6803      	ldr	r3, [r0, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d00f      	beq.n	800212a <RINGBUF_Get+0x28>
	{
		return -1;				// ring buffer is empty, this should be atomic operation
	}
	*c = r->pt[r->tail];
 800210a:	6843      	ldr	r3, [r0, #4]
 800210c:	68c2      	ldr	r2, [r0, #12]
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	700b      	strb	r3, [r1, #0]
	r->tail++;
 8002112:	6843      	ldr	r3, [r0, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	6043      	str	r3, [r0, #4]
	if(r->tail >= r->size)
 8002118:	6842      	ldr	r2, [r0, #4]
 800211a:	6883      	ldr	r3, [r0, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	d300      	bcc.n	8002126 <RINGBUF_Get+0x24>
	{
		r->tail = 0;
 8002124:	6043      	str	r3, [r0, #4]
	}
	return 0;
 8002126:	4618      	mov	r0, r3
}
 8002128:	4770      	bx	lr
		return -1;				// ring buffer is empty, this should be atomic operation
 800212a:	f04f 30ff 	mov.w	r0, #4294967295
 800212e:	4770      	bx	lr

08002130 <RINGBUF_GetFill>:

int32_t RINGBUF_GetFill(RINGBUF *r)
{
   if(r->head >= r->tail)
 8002130:	6802      	ldr	r2, [r0, #0]
 8002132:	6843      	ldr	r3, [r0, #4]
 8002134:	429a      	cmp	r2, r3
	{
		return (r->head - r->tail);
 8002136:	bf25      	ittet	cs
 8002138:	6803      	ldrcs	r3, [r0, #0]
 800213a:	6840      	ldrcs	r0, [r0, #4]
	}
	else
	{
	   return( r->size - r->tail + r->head);
 800213c:	6883      	ldrcc	r3, [r0, #8]
		return (r->head - r->tail);
 800213e:	1a18      	subcs	r0, r3, r0
	   return( r->size - r->tail + r->head);
 8002140:	bf3f      	itttt	cc
 8002142:	6842      	ldrcc	r2, [r0, #4]
 8002144:	6800      	ldrcc	r0, [r0, #0]
 8002146:	18c0      	addcc	r0, r0, r3
 8002148:	1a80      	subcc	r0, r0, r2
	}
}
 800214a:	4770      	bx	lr

0800214c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800214c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800214e:	f001 f8f3 	bl	8003338 <vTaskStartScheduler>
  
  return osOK;
}
 8002152:	2000      	movs	r0, #0
 8002154:	bd08      	pop	{r3, pc}

08002156 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002156:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002158:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800215c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800215e:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002160:	bf08      	it	eq
 8002162:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002164:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8002166:	bf18      	it	ne
 8002168:	3403      	addne	r4, #3
{
 800216a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800216c:	e890 0022 	ldmia.w	r0, {r1, r5}
 8002170:	a803      	add	r0, sp, #12
 8002172:	9001      	str	r0, [sp, #4]
 8002174:	9400      	str	r4, [sp, #0]
 8002176:	4628      	mov	r0, r5
 8002178:	f000 ff7c 	bl	8003074 <xTaskCreate>
 800217c:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800217e:	bf14      	ite	ne
 8002180:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8002182:	9803      	ldreq	r0, [sp, #12]
}
 8002184:	b005      	add	sp, #20
 8002186:	bd30      	pop	{r4, r5, pc}

08002188 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002188:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800218a:	2800      	cmp	r0, #0
 800218c:	bf08      	it	eq
 800218e:	2001      	moveq	r0, #1
 8002190:	f001 fa20 	bl	80035d4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002194:	2000      	movs	r0, #0
 8002196:	bd08      	pop	{r3, pc}

08002198 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002198:	2901      	cmp	r1, #1
{ 
 800219a:	b510      	push	{r4, lr}
 800219c:	4608      	mov	r0, r1
  if (count == 1) {
 800219e:	d10c      	bne.n	80021ba <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80021a0:	2203      	movs	r2, #3
 80021a2:	2100      	movs	r1, #0
 80021a4:	f000 fc18 	bl	80029d8 <xQueueGenericCreate>
 80021a8:	4604      	mov	r4, r0
 80021aa:	b120      	cbz	r0, 80021b6 <osSemaphoreCreate+0x1e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	f000 fc33 	bl	8002a1c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80021b6:	4620      	mov	r0, r4
 80021b8:	bd10      	pop	{r4, pc}
    return NULL;
 80021ba:	2400      	movs	r4, #0
 80021bc:	e7fb      	b.n	80021b6 <osSemaphoreCreate+0x1e>
	...

080021c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80021c0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80021c2:	2400      	movs	r4, #0
{
 80021c4:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80021c6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80021c8:	b1e8      	cbz	r0, 8002206 <osSemaphoreWait+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ca:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80021ce:	b1a3      	cbz	r3, 80021fa <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021d0:	aa01      	add	r2, sp, #4
 80021d2:	4621      	mov	r1, r4
 80021d4:	f000 fe52 	bl	8002e7c <xQueueReceiveFromISR>
 80021d8:	2801      	cmp	r0, #1
 80021da:	d002      	beq.n	80021e2 <osSemaphoreWait+0x22>
      return osErrorOS;
 80021dc:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80021de:	b002      	add	sp, #8
 80021e0:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80021e2:	9b01      	ldr	r3, [sp, #4]
 80021e4:	b13b      	cbz	r3, 80021f6 <osSemaphoreWait+0x36>
 80021e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <osSemaphoreWait+0x4c>)
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	f3bf 8f6f 	isb	sy
  return osOK;
 80021f6:	2000      	movs	r0, #0
 80021f8:	e7f1      	b.n	80021de <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021fa:	4619      	mov	r1, r3
 80021fc:	f000 fd7a 	bl	8002cf4 <xQueueGenericReceive>
 8002200:	2801      	cmp	r0, #1
 8002202:	d1eb      	bne.n	80021dc <osSemaphoreWait+0x1c>
 8002204:	e7f7      	b.n	80021f6 <osSemaphoreWait+0x36>
    return osErrorParameter;
 8002206:	2080      	movs	r0, #128	; 0x80
 8002208:	e7e9      	b.n	80021de <osSemaphoreWait+0x1e>
 800220a:	bf00      	nop
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002210:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002212:	2400      	movs	r4, #0
 8002214:	9401      	str	r4, [sp, #4]
 8002216:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800221a:	b193      	cbz	r3, 8002242 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800221c:	a901      	add	r1, sp, #4
 800221e:	f000 fd15 	bl	8002c4c <xQueueGiveFromISR>
 8002222:	2801      	cmp	r0, #1
 8002224:	d113      	bne.n	800224e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	b913      	cbnz	r3, 8002230 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800222a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800222c:	b002      	add	sp, #8
 800222e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <osSemaphoreRelease+0x44>)
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	e7f3      	b.n	800222a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002242:	461a      	mov	r2, r3
 8002244:	4619      	mov	r1, r3
 8002246:	f000 fbe9 	bl	8002a1c <xQueueGenericSend>
 800224a:	2801      	cmp	r0, #1
 800224c:	d0ed      	beq.n	800222a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800224e:	20ff      	movs	r0, #255	; 0xff
 8002250:	e7ec      	b.n	800222c <osSemaphoreRelease+0x1c>
 8002252:	bf00      	nop
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002258:	2200      	movs	r2, #0
 800225a:	c803      	ldmia	r0, {r0, r1}
 800225c:	f000 bbbc 	b.w	80029d8 <xQueueGenericCreate>

08002260 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8002262:	2400      	movs	r4, #0
{
 8002264:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002266:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8002268:	42a2      	cmp	r2, r4
 800226a:	bf08      	it	eq
 800226c:	2201      	moveq	r2, #1
 800226e:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8002272:	b1ab      	cbz	r3, 80022a0 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002274:	4623      	mov	r3, r4
 8002276:	aa03      	add	r2, sp, #12
 8002278:	a901      	add	r1, sp, #4
 800227a:	f000 fc85 	bl	8002b88 <xQueueGenericSendFromISR>
 800227e:	2801      	cmp	r0, #1
 8002280:	d002      	beq.n	8002288 <osMessagePut+0x28>
      return osErrorOS;
 8002282:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002284:	b004      	add	sp, #16
 8002286:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002288:	9b03      	ldr	r3, [sp, #12]
 800228a:	b13b      	cbz	r3, 800229c <osMessagePut+0x3c>
 800228c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <osMessagePut+0x4c>)
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	f3bf 8f6f 	isb	sy
  return osOK;
 800229c:	2000      	movs	r0, #0
 800229e:	e7f1      	b.n	8002284 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80022a0:	a901      	add	r1, sp, #4
 80022a2:	f000 fbbb 	bl	8002a1c <xQueueGenericSend>
 80022a6:	2801      	cmp	r0, #1
 80022a8:	d1eb      	bne.n	8002282 <osMessagePut+0x22>
 80022aa:	e7f7      	b.n	800229c <osMessagePut+0x3c>
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80022b2:	2600      	movs	r6, #0
{
 80022b4:	b085      	sub	sp, #20
 80022b6:	4604      	mov	r4, r0
 80022b8:	4617      	mov	r7, r2
 80022ba:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80022bc:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80022be:	9602      	str	r6, [sp, #8]
 80022c0:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80022c2:	b911      	cbnz	r1, 80022ca <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80022c4:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	e017      	b.n	80022fa <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80022ca:	9600      	str	r6, [sp, #0]
 80022cc:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80022d0:	b1d3      	cbz	r3, 8002308 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80022d2:	466a      	mov	r2, sp
 80022d4:	a902      	add	r1, sp, #8
 80022d6:	f000 fdd1 	bl	8002e7c <xQueueReceiveFromISR>
 80022da:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80022dc:	bf04      	itt	eq
 80022de:	2310      	moveq	r3, #16
 80022e0:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80022e2:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80022e4:	bf18      	it	ne
 80022e6:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80022e8:	b13b      	cbz	r3, 80022fa <osMessageGet+0x4a>
 80022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <osMessageGet+0x70>)
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80022fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002302:	4620      	mov	r0, r4
 8002304:	b005      	add	sp, #20
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002308:	a902      	add	r1, sp, #8
 800230a:	f000 fcf3 	bl	8002cf4 <xQueueGenericReceive>
 800230e:	2801      	cmp	r0, #1
 8002310:	d101      	bne.n	8002316 <osMessageGet+0x66>
      event.status = osEventMessage;
 8002312:	2310      	movs	r3, #16
 8002314:	e7d7      	b.n	80022c6 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002316:	2f00      	cmp	r7, #0
 8002318:	bf0c      	ite	eq
 800231a:	2300      	moveq	r3, #0
 800231c:	2340      	movne	r3, #64	; 0x40
 800231e:	e7d2      	b.n	80022c6 <osMessageGet+0x16>
 8002320:	e000ed04 	.word	0xe000ed04

08002324 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002324:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8002326:	f001 f9ed 	bl	8003704 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 800232a:	2000      	movs	r0, #0
 800232c:	bd08      	pop	{r3, pc}
	...

08002330 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8002330:	b508      	push	{r3, lr}
 8002332:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8002336:	b16b      	cbz	r3, 8002354 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8002338:	f000 ffae 	bl	8003298 <xTaskResumeFromISR>
 800233c:	2801      	cmp	r0, #1
 800233e:	d107      	bne.n	8002350 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8002340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <osThreadResume+0x2c>)
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8002350:	2000      	movs	r0, #0
 8002352:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8002354:	f000 ff5e 	bl	8003214 <vTaskResume>
 8002358:	e7fa      	b.n	8002350 <osThreadResume+0x20>
 800235a:	bf00      	nop
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <osMessageWaiting>:
 8002360:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8002364:	b10b      	cbz	r3, 800236a <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8002366:	f000 be01 	b.w	8002f6c <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800236a:	f000 bdd7 	b.w	8002f1c <uxQueueMessagesWaiting>

0800236e <osMessageAvailableSpace>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
  return uxQueueSpacesAvailable(queue_id);
 800236e:	f000 bde8 	b.w	8002f42 <uxQueueSpacesAvailable>
	...

08002374 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002374:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <prvInsertBlockIntoFreeList+0x40>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4282      	cmp	r2, r0
 800237c:	d318      	bcc.n	80023b0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800237e:	685c      	ldr	r4, [r3, #4]
 8002380:	1919      	adds	r1, r3, r4
 8002382:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002384:	bf01      	itttt	eq
 8002386:	6841      	ldreq	r1, [r0, #4]
 8002388:	4618      	moveq	r0, r3
 800238a:	1909      	addeq	r1, r1, r4
 800238c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800238e:	6844      	ldr	r4, [r0, #4]
 8002390:	1901      	adds	r1, r0, r4
 8002392:	428a      	cmp	r2, r1
 8002394:	d107      	bne.n	80023a6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <prvInsertBlockIntoFreeList+0x44>)
 8002398:	6809      	ldr	r1, [r1, #0]
 800239a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800239c:	bf1f      	itttt	ne
 800239e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023a0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023a2:	1909      	addne	r1, r1, r4
 80023a4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023a6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023a8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023aa:	bf18      	it	ne
 80023ac:	6018      	strne	r0, [r3, #0]
 80023ae:	bd10      	pop	{r4, pc}
 80023b0:	4613      	mov	r3, r2
 80023b2:	e7e1      	b.n	8002378 <prvInsertBlockIntoFreeList+0x4>
 80023b4:	2000220c 	.word	0x2000220c
 80023b8:	200001fc 	.word	0x200001fc

080023bc <pvPortMalloc>:
{
 80023bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023c0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80023c2:	f000 fff5 	bl	80033b0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80023c6:	493e      	ldr	r1, [pc, #248]	; (80024c0 <pvPortMalloc+0x104>)
 80023c8:	4d3e      	ldr	r5, [pc, #248]	; (80024c4 <pvPortMalloc+0x108>)
 80023ca:	680b      	ldr	r3, [r1, #0]
 80023cc:	bb0b      	cbnz	r3, 8002412 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80023ce:	4a3e      	ldr	r2, [pc, #248]	; (80024c8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80023d0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023d2:	bf1d      	ittte	ne
 80023d4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023d6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023da:	f502 5300 	addne.w	r3, r2, #8192	; 0x2000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023de:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023e2:	bf1c      	itt	ne
 80023e4:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023e6:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80023e8:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023ea:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023ec:	4e37      	ldr	r6, [pc, #220]	; (80024cc <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80023ee:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023f0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80023f4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023f6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80023f8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023fa:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80023fc:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023fe:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002400:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002404:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002406:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <pvPortMalloc+0x118>)
 800240a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800240c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002410:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002412:	682f      	ldr	r7, [r5, #0]
 8002414:	4227      	tst	r7, r4
 8002416:	d116      	bne.n	8002446 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002418:	2c00      	cmp	r4, #0
 800241a:	d040      	beq.n	800249e <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800241c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002420:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002422:	bf1c      	itt	ne
 8002424:	f023 0307 	bicne.w	r3, r3, #7
 8002428:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800242a:	b163      	cbz	r3, 8002446 <pvPortMalloc+0x8a>
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <pvPortMalloc+0x118>)
 800242e:	6816      	ldr	r6, [r2, #0]
 8002430:	4690      	mov	r8, r2
 8002432:	42b3      	cmp	r3, r6
 8002434:	d807      	bhi.n	8002446 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <pvPortMalloc+0x110>)
 8002438:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	4283      	cmp	r3, r0
 800243e:	d804      	bhi.n	800244a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002440:	6809      	ldr	r1, [r1, #0]
 8002442:	428d      	cmp	r5, r1
 8002444:	d107      	bne.n	8002456 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002446:	2400      	movs	r4, #0
 8002448:	e029      	b.n	800249e <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800244a:	682c      	ldr	r4, [r5, #0]
 800244c:	2c00      	cmp	r4, #0
 800244e:	d0f7      	beq.n	8002440 <pvPortMalloc+0x84>
 8002450:	462a      	mov	r2, r5
 8002452:	4625      	mov	r5, r4
 8002454:	e7f1      	b.n	800243a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002456:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002458:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800245a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800245c:	1ac2      	subs	r2, r0, r3
 800245e:	2a10      	cmp	r2, #16
 8002460:	d90f      	bls.n	8002482 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002462:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002464:	0741      	lsls	r1, r0, #29
 8002466:	d008      	beq.n	800247a <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	e7fe      	b.n	8002478 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800247a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800247c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800247e:	f7ff ff79 	bl	8002374 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002482:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002484:	4912      	ldr	r1, [pc, #72]	; (80024d0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002486:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002488:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800248a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800248c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800248e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002492:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002494:	bf38      	it	cc
 8002496:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002498:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800249a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800249c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800249e:	f001 f821 	bl	80034e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024a2:	0763      	lsls	r3, r4, #29
 80024a4:	d008      	beq.n	80024b8 <pvPortMalloc+0xfc>
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	e7fe      	b.n	80024b6 <pvPortMalloc+0xfa>
}
 80024b8:	4620      	mov	r0, r4
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024be:	bf00      	nop
 80024c0:	200001fc 	.word	0x200001fc
 80024c4:	20002200 	.word	0x20002200
 80024c8:	20000200 	.word	0x20000200
 80024cc:	2000220c 	.word	0x2000220c
 80024d0:	20002208 	.word	0x20002208
 80024d4:	20002204 	.word	0x20002204

080024d8 <vPortFree>:
{
 80024d8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80024da:	4604      	mov	r4, r0
 80024dc:	b370      	cbz	r0, 800253c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <vPortFree+0x68>)
 80024e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	4213      	tst	r3, r2
 80024e8:	d108      	bne.n	80024fc <vPortFree+0x24>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	e7fe      	b.n	80024fa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024fc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002500:	b141      	cbz	r1, 8002514 <vPortFree+0x3c>
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	e7fe      	b.n	8002512 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002514:	ea23 0302 	bic.w	r3, r3, r2
 8002518:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800251c:	f000 ff48 	bl	80033b0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <vPortFree+0x6c>)
 8002522:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002526:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002528:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800252c:	440b      	add	r3, r1
 800252e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002530:	f7ff ff20 	bl	8002374 <prvInsertBlockIntoFreeList>
}
 8002534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002538:	f000 bfd4 	b.w	80034e4 <xTaskResumeAll>
 800253c:	bd10      	pop	{r4, pc}
 800253e:	bf00      	nop
 8002540:	20002200 	.word	0x20002200
 8002544:	20002204 	.word	0x20002204

08002548 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002548:	f100 0308 	add.w	r3, r0, #8
 800254c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800254e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002552:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002554:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002556:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002558:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800255a:	6003      	str	r3, [r0, #0]
 800255c:	4770      	bx	lr

0800255e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	6103      	str	r3, [r0, #16]
 8002562:	4770      	bx	lr

08002564 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002564:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002566:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002568:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800256a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002570:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002572:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002574:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002576:	3301      	adds	r3, #1
 8002578:	6003      	str	r3, [r0, #0]
 800257a:	4770      	bx	lr

0800257c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800257c:	680a      	ldr	r2, [r1, #0]
{
 800257e:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002580:	1c53      	adds	r3, r2, #1
 8002582:	d10a      	bne.n	800259a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002584:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800258a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800258c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800258e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002590:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002592:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002594:	3301      	adds	r3, #1
 8002596:	6003      	str	r3, [r0, #0]
 8002598:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259a:	f100 0308 	add.w	r3, r0, #8
 800259e:	685c      	ldr	r4, [r3, #4]
 80025a0:	6825      	ldr	r5, [r4, #0]
 80025a2:	42aa      	cmp	r2, r5
 80025a4:	d3ef      	bcc.n	8002586 <vListInsert+0xa>
 80025a6:	4623      	mov	r3, r4
 80025a8:	e7f9      	b.n	800259e <vListInsert+0x22>

080025aa <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025aa:	6841      	ldr	r1, [r0, #4]
 80025ac:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025ae:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025b2:	6882      	ldr	r2, [r0, #8]
 80025b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025ba:	bf08      	it	eq
 80025bc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80025be:	2200      	movs	r2, #0
 80025c0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	3801      	subs	r0, #1
 80025c6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80025c8:	4770      	bx	lr
	...

080025cc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <prvTaskExitError+0x2c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	d008      	beq.n	80025e6 <prvTaskExitError+0x1a>
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	e7fe      	b.n	80025e4 <prvTaskExitError+0x18>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	e7fe      	b.n	80025f6 <prvTaskExitError+0x2a>
 80025f8:	20000008 	.word	0x20000008

080025fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80025fc:	4806      	ldr	r0, [pc, #24]	; (8002618 <prvPortStartFirstTask+0x1c>)
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	6800      	ldr	r0, [r0, #0]
 8002602:	f380 8808 	msr	MSP, r0
 8002606:	b662      	cpsie	i
 8002608:	b661      	cpsie	f
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	df00      	svc	0
 8002614:	bf00      	nop
 8002616:	0000      	.short	0x0000
 8002618:	e000ed08 	.word	0xe000ed08

0800261c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800261c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002620:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002626:	f021 0101 	bic.w	r1, r1, #1
 800262a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800262e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002632:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002636:	3840      	subs	r0, #64	; 0x40
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	080025cd 	.word	0x080025cd

08002640 <SVC_Handler>:
	__asm volatile (
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <pxCurrentTCBConst2>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	6808      	ldr	r0, [r1, #0]
 8002646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800264a:	f380 8809 	msr	PSP, r0
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f380 8811 	msr	BASEPRI, r0
 800265a:	f04e 0e0d 	orr.w	lr, lr, #13
 800265e:	4770      	bx	lr

08002660 <pxCurrentTCBConst2>:
 8002660:	2000221c 	.word	0x2000221c

08002664 <vPortEnterCritical>:
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <vPortEnterCritical+0x3c>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800267a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800267c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800267e:	d10d      	bne.n	800269c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <vPortEnterCritical+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002688:	d008      	beq.n	800269c <vPortEnterCritical+0x38>
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	e7fe      	b.n	800269a <vPortEnterCritical+0x36>
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80026a8:	4a08      	ldr	r2, [pc, #32]	; (80026cc <vPortExitCritical+0x24>)
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	b943      	cbnz	r3, 80026c0 <vPortExitCritical+0x18>
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	e7fe      	b.n	80026be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80026c0:	3b01      	subs	r3, #1
 80026c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026c4:	b90b      	cbnz	r3, 80026ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	4770      	bx	lr
 80026cc:	20000008 	.word	0x20000008

080026d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80026d0:	f3ef 8009 	mrs	r0, PSP
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <pxCurrentTCBConst>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026e0:	6010      	str	r0, [r2, #0]
 80026e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80026e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026ea:	f380 8811 	msr	BASEPRI, r0
 80026ee:	f000 ffcf 	bl	8003690 <vTaskSwitchContext>
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f380 8811 	msr	BASEPRI, r0
 80026fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	6808      	ldr	r0, [r1, #0]
 8002702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002706:	f380 8809 	msr	PSP, r0
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	4770      	bx	lr

08002710 <pxCurrentTCBConst>:
 8002710:	2000221c 	.word	0x2000221c

08002714 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002714:	b508      	push	{r3, lr}
	__asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002726:	f000 fe4b 	bl	80033c0 <xTaskIncrementTick>
 800272a:	b118      	cbz	r0, 8002734 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800272c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <SysTick_Handler+0x28>)
 8002732:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002734:	2300      	movs	r3, #0
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	bd08      	pop	{r3, pc}
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <vPortSetupTimerInterrupt+0x1c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fbb3 f3f2 	udiv	r3, r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <vPortSetupTimerInterrupt+0x20>)
 800274e:	3b01      	subs	r3, #1
 8002750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002752:	2207      	movs	r2, #7
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <vPortSetupTimerInterrupt+0x24>)
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000
 8002760:	e000e014 	.word	0xe000e014
 8002764:	e000e010 	.word	0xe000e010

08002768 <xPortStartScheduler>:
{
 8002768:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800276c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002774:	22ff      	movs	r2, #255	; 0xff
 8002776:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002778:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002782:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800278a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800278c:	2207      	movs	r2, #7
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <xPortStartScheduler+0x88>)
 8002790:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002792:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002796:	1e54      	subs	r4, r2, #1
 8002798:	0600      	lsls	r0, r0, #24
 800279a:	d41c      	bmi.n	80027d6 <xPortStartScheduler+0x6e>
 800279c:	b101      	cbz	r1, 80027a0 <xPortStartScheduler+0x38>
 800279e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80027a8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027aa:	9b01      	ldr	r3, [sp, #4]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <xPortStartScheduler+0x80>)
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <xPortStartScheduler+0x8c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80027ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80027c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80027c4:	f7ff ffbc 	bl	8002740 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80027c8:	2200      	movs	r2, #0
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <xPortStartScheduler+0x90>)
 80027cc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80027ce:	f7ff ff15 	bl	80025fc <prvPortStartFirstTask>
	prvTaskExitError();
 80027d2:	f7ff fefb 	bl	80025cc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80027da:	2101      	movs	r1, #1
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f88d 2003 	strb.w	r2, [sp, #3]
 80027e4:	4622      	mov	r2, r4
 80027e6:	e7d4      	b.n	8002792 <xPortStartScheduler+0x2a>
 80027e8:	e000e400 	.word	0xe000e400
 80027ec:	20002214 	.word	0x20002214
 80027f0:	20002218 	.word	0x20002218
 80027f4:	e000ed20 	.word	0xe000ed20
 80027f8:	20000008 	.word	0x20000008

080027fc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80027fc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d90e      	bls.n	8002822 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <vPortValidateInterruptPriority+0x4c>)
 8002806:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002808:	4a10      	ldr	r2, [pc, #64]	; (800284c <vPortValidateInterruptPriority+0x50>)
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d908      	bls.n	8002822 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	e7fe      	b.n	8002820 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <vPortValidateInterruptPriority+0x54>)
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <vPortValidateInterruptPriority+0x58>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800282e:	4293      	cmp	r3, r2
 8002830:	d908      	bls.n	8002844 <vPortValidateInterruptPriority+0x48>
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	e7fe      	b.n	8002842 <vPortValidateInterruptPriority+0x46>
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e3f0 	.word	0xe000e3f0
 800284c:	20002214 	.word	0x20002214
 8002850:	e000ed0c 	.word	0xe000ed0c
 8002854:	20002218 	.word	0x20002218

08002858 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800285c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800285e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002860:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002862:	b942      	cbnz	r2, 8002876 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002864:	6805      	ldr	r5, [r0, #0]
 8002866:	b99d      	cbnz	r5, 8002890 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002868:	6840      	ldr	r0, [r0, #4]
 800286a:	f001 f8b5 	bl	80039d8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800286e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002870:	3601      	adds	r6, #1
 8002872:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002876:	b96d      	cbnz	r5, 8002894 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002878:	6880      	ldr	r0, [r0, #8]
 800287a:	f001 fad9 	bl	8003e30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800287e:	68a3      	ldr	r3, [r4, #8]
 8002880:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002882:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002884:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002886:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002888:	4293      	cmp	r3, r2
 800288a:	d301      	bcc.n	8002890 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002890:	2000      	movs	r0, #0
 8002892:	e7ed      	b.n	8002870 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002894:	68c0      	ldr	r0, [r0, #12]
 8002896:	f001 facb 	bl	8003e30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800289a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800289c:	68e2      	ldr	r2, [r4, #12]
 800289e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028a2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028a6:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028a8:	bf3e      	ittt	cc
 80028aa:	6862      	ldrcc	r2, [r4, #4]
 80028ac:	189b      	addcc	r3, r3, r2
 80028ae:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80028b0:	2d02      	cmp	r5, #2
 80028b2:	d1ed      	bne.n	8002890 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b4:	b10e      	cbz	r6, 80028ba <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80028b6:	3e01      	subs	r6, #1
 80028b8:	e7ea      	b.n	8002890 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80028ba:	4630      	mov	r0, r6
 80028bc:	e7d8      	b.n	8002870 <prvCopyDataToQueue+0x18>

080028be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028be:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80028c2:	b410      	push	{r4}
 80028c4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028c6:	b162      	cbz	r2, 80028e2 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028c8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ca:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028cc:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ce:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028d0:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028d2:	bf28      	it	cs
 80028d4:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80028d6:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028d8:	bf28      	it	cs
 80028da:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	f001 baa7 	b.w	8003e30 <memcpy>
}
 80028e2:	bc10      	pop	{r4}
 80028e4:	4770      	bx	lr

080028e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028e6:	b570      	push	{r4, r5, r6, lr}
 80028e8:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028ea:	f7ff febb 	bl	8002664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80028f6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	dc14      	bgt.n	8002926 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028fc:	23ff      	movs	r3, #255	; 0xff
 80028fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002902:	f7ff fed1 	bl	80026a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002906:	f7ff fead 	bl	8002664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800290a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800290e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002912:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002914:	2d00      	cmp	r5, #0
 8002916:	dc12      	bgt.n	800293e <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002918:	23ff      	movs	r3, #255	; 0xff
 800291a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800291e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002922:	f7ff bec1 	b.w	80026a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0e7      	beq.n	80028fc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292c:	4630      	mov	r0, r6
 800292e:	f000 ff69 	bl	8003804 <xTaskRemoveFromEventList>
 8002932:	b108      	cbz	r0, 8002938 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002934:	f000 fff2 	bl	800391c <vTaskMissedYield>
 8002938:	3d01      	subs	r5, #1
 800293a:	b26d      	sxtb	r5, r5
 800293c:	e7dc      	b.n	80028f8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0e9      	beq.n	8002918 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002944:	4630      	mov	r0, r6
 8002946:	f000 ff5d 	bl	8003804 <xTaskRemoveFromEventList>
 800294a:	b108      	cbz	r0, 8002950 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800294c:	f000 ffe6 	bl	800391c <vTaskMissedYield>
 8002950:	3d01      	subs	r5, #1
 8002952:	b26d      	sxtb	r5, r5
 8002954:	e7de      	b.n	8002914 <prvUnlockQueue+0x2e>
	...

08002958 <xQueueGenericReset>:
{
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800295c:	4604      	mov	r4, r0
 800295e:	b940      	cbnz	r0, 8002972 <xQueueGenericReset+0x1a>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	e7fe      	b.n	8002970 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002972:	f7ff fe77 	bl	8002664 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002976:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	4343      	muls	r3, r0
 800297e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002980:	1a1b      	subs	r3, r3, r0
 8002982:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002984:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002986:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002988:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800298a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800298c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800298e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002998:	b995      	cbnz	r5, 80029c0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	b163      	cbz	r3, 80029b8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800299e:	f104 0010 	add.w	r0, r4, #16
 80029a2:	f000 ff2f 	bl	8003804 <xTaskRemoveFromEventList>
 80029a6:	b138      	cbz	r0, 80029b8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <xQueueGenericReset+0x7c>)
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80029b8:	f7ff fe76 	bl	80026a8 <vPortExitCritical>
}
 80029bc:	2001      	movs	r0, #1
 80029be:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c0:	f104 0010 	add.w	r0, r4, #16
 80029c4:	f7ff fdc0 	bl	8002548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029cc:	f7ff fdbc 	bl	8002548 <vListInitialise>
 80029d0:	e7f2      	b.n	80029b8 <xQueueGenericReset+0x60>
 80029d2:	bf00      	nop
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <xQueueGenericCreate>:
	{
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029dc:	4606      	mov	r6, r0
 80029de:	b940      	cbnz	r0, 80029f2 <xQueueGenericCreate+0x1a>
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	e7fe      	b.n	80029f0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80029f4:	3048      	adds	r0, #72	; 0x48
 80029f6:	f7ff fce1 	bl	80023bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80029fa:	4604      	mov	r4, r0
 80029fc:	b138      	cbz	r0, 8002a0e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80029fe:	b945      	cbnz	r5, 8002a12 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a00:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002a02:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a04:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a06:	2101      	movs	r1, #1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7ff ffa5 	bl	8002958 <xQueueGenericReset>
	}
 8002a0e:	4620      	mov	r0, r4
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a12:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a16:	6003      	str	r3, [r0, #0]
 8002a18:	e7f3      	b.n	8002a02 <xQueueGenericCreate+0x2a>
	...

08002a1c <xQueueGenericSend>:
{
 8002a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	4689      	mov	r9, r1
 8002a22:	9201      	str	r2, [sp, #4]
 8002a24:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a26:	4604      	mov	r4, r0
 8002a28:	b940      	cbnz	r0, 8002a3c <xQueueGenericSend+0x20>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	e7fe      	b.n	8002a3a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a3c:	2900      	cmp	r1, #0
 8002a3e:	f040 8088 	bne.w	8002b52 <xQueueGenericSend+0x136>
 8002a42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8084 	beq.w	8002b52 <xQueueGenericSend+0x136>
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a5c:	9e01      	ldr	r6, [sp, #4]
 8002a5e:	2e00      	cmp	r6, #0
 8002a60:	f000 8082 	beq.w	8002b68 <xQueueGenericSend+0x14c>
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a76:	9d01      	ldr	r5, [sp, #4]
 8002a78:	b91d      	cbnz	r5, 8002a82 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002a7a:	f7ff fe15 	bl	80026a8 <vPortExitCritical>
			return errQUEUE_FULL;
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e058      	b.n	8002b34 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002a82:	b916      	cbnz	r6, 8002a8a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002a84:	a802      	add	r0, sp, #8
 8002a86:	f000 feff 	bl	8003888 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002a8a:	f7ff fe0d 	bl	80026a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002a8e:	f000 fc8f 	bl	80033b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a92:	f7ff fde7 	bl	8002664 <vPortEnterCritical>
 8002a96:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a9a:	2bff      	cmp	r3, #255	; 0xff
 8002a9c:	bf08      	it	eq
 8002a9e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002aa2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	bf08      	it	eq
 8002aaa:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002aae:	f7ff fdfb 	bl	80026a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ab2:	a901      	add	r1, sp, #4
 8002ab4:	a802      	add	r0, sp, #8
 8002ab6:	f000 fef7 	bl	80038a8 <xTaskCheckForTimeOut>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d143      	bne.n	8002b46 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002abe:	f7ff fdd1 	bl	8002664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002ac4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002ac6:	f7ff fdef 	bl	80026a8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002aca:	42ae      	cmp	r6, r5
 8002acc:	d135      	bne.n	8002b3a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ace:	9901      	ldr	r1, [sp, #4]
 8002ad0:	f104 0010 	add.w	r0, r4, #16
 8002ad4:	f000 fe7c 	bl	80037d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff ff04 	bl	80028e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ade:	f000 fd01 	bl	80034e4 <xTaskResumeAll>
 8002ae2:	b938      	cbnz	r0, 8002af4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002ae4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ae8:	f8ca 3000 	str.w	r3, [sl]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002af6:	f7ff fdb5 	bl	8002664 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002afa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d301      	bcc.n	8002b06 <xQueueGenericSend+0xea>
 8002b02:	2f02      	cmp	r7, #2
 8002b04:	d1b7      	bne.n	8002a76 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b06:	463a      	mov	r2, r7
 8002b08:	4649      	mov	r1, r9
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7ff fea4 	bl	8002858 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b12:	b11b      	cbz	r3, 8002b1c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b18:	f000 fe74 	bl	8003804 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002b1c:	b138      	cbz	r0, 8002b2e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <xQueueGenericSend+0x168>)
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002b2e:	f7ff fdbb 	bl	80026a8 <vPortExitCritical>
				return pdPASS;
 8002b32:	2001      	movs	r0, #1
}
 8002b34:	b004      	add	sp, #16
 8002b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff fed3 	bl	80028e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b40:	f000 fcd0 	bl	80034e4 <xTaskResumeAll>
 8002b44:	e7d6      	b.n	8002af4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fecd 	bl	80028e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b4c:	f000 fcca 	bl	80034e4 <xTaskResumeAll>
 8002b50:	e795      	b.n	8002a7e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b52:	2f02      	cmp	r7, #2
 8002b54:	d102      	bne.n	8002b5c <xQueueGenericSend+0x140>
 8002b56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b5c:	f000 fee4 	bl	8003928 <xTaskGetSchedulerState>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	f43f af7b 	beq.w	8002a5c <xQueueGenericSend+0x40>
 8002b66:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002b68:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002b6c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002b84 <xQueueGenericSend+0x168>
 8002b70:	e7c1      	b.n	8002af6 <xQueueGenericSend+0xda>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericSend+0x166>
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <xQueueGenericSendFromISR>:
{
 8002b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4691      	mov	r9, r2
 8002b90:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002b92:	4604      	mov	r4, r0
 8002b94:	b940      	cbnz	r0, 8002ba8 <xQueueGenericSendFromISR+0x20>
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	e7fe      	b.n	8002ba6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba8:	bb09      	cbnz	r1, 8002bee <xQueueGenericSendFromISR+0x66>
 8002baa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bac:	b1fb      	cbz	r3, 8002bee <xQueueGenericSendFromISR+0x66>
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	e7fe      	b.n	8002bbe <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bc4:	f000 fe1e 	bl	8003804 <xTaskRemoveFromEventList>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d034      	beq.n	8002c36 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002bcc:	f1b9 0f00 	cmp.w	r9, #0
 8002bd0:	d031      	beq.n	8002c36 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002bd8:	f386 8811 	msr	BASEPRI, r6
}
 8002bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002be0:	3501      	adds	r5, #1
 8002be2:	b26d      	sxtb	r5, r5
 8002be4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002be8:	e025      	b.n	8002c36 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002bea:	2000      	movs	r0, #0
 8002bec:	e7f4      	b.n	8002bd8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bee:	2f02      	cmp	r7, #2
 8002bf0:	d102      	bne.n	8002bf8 <xQueueGenericSendFromISR+0x70>
 8002bf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d120      	bne.n	8002c3a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf8:	f7ff fe00 	bl	80027fc <vPortValidateInterruptPriority>
	__asm volatile
 8002bfc:	f3ef 8611 	mrs	r6, BASEPRI
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d301      	bcc.n	8002c1c <xQueueGenericSendFromISR+0x94>
 8002c18:	2f02      	cmp	r7, #2
 8002c1a:	d1e6      	bne.n	8002bea <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c1c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c20:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c22:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c24:	4641      	mov	r1, r8
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fe16 	bl	8002858 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002c2c:	1c6b      	adds	r3, r5, #1
 8002c2e:	d1d7      	bne.n	8002be0 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1c4      	bne.n	8002bc0 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002c36:	2001      	movs	r0, #1
 8002c38:	e7ce      	b.n	8002bd8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	e7fe      	b.n	8002c4a <xQueueGenericSendFromISR+0xc2>

08002c4c <xQueueGiveFromISR>:
{
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002c50:	4604      	mov	r4, r0
 8002c52:	b940      	cbnz	r0, 8002c66 <xQueueGiveFromISR+0x1a>
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	e7fe      	b.n	8002c64 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c68:	b143      	cbz	r3, 8002c7c <xQueueGiveFromISR+0x30>
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	e7fe      	b.n	8002c7a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002c7c:	6803      	ldr	r3, [r0, #0]
 8002c7e:	b90b      	cbnz	r3, 8002c84 <xQueueGiveFromISR+0x38>
 8002c80:	6843      	ldr	r3, [r0, #4]
 8002c82:	bb73      	cbnz	r3, 8002ce2 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c84:	f7ff fdba 	bl	80027fc <vPortValidateInterruptPriority>
	__asm volatile
 8002c88:	f3ef 8611 	mrs	r6, BASEPRI
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002c9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d301      	bcc.n	8002ca8 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e014      	b.n	8002cd2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ca8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002cac:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cae:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002cb0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	d110      	bne.n	8002cd8 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cb8:	b90b      	cbnz	r3, 8002cbe <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e009      	b.n	8002cd2 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cc2:	f000 fd9f 	bl	8003804 <xTaskRemoveFromEventList>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d0f7      	beq.n	8002cba <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	d0f5      	beq.n	8002cba <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cce:	2001      	movs	r0, #1
 8002cd0:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002cd2:	f386 8811 	msr	BASEPRI, r6
}
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce0:	e7eb      	b.n	8002cba <xQueueGiveFromISR+0x6e>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	e7fe      	b.n	8002cf2 <xQueueGiveFromISR+0xa6>

08002cf4 <xQueueGenericReceive>:
{
 8002cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf8:	4688      	mov	r8, r1
 8002cfa:	9201      	str	r2, [sp, #4]
 8002cfc:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002cfe:	4604      	mov	r4, r0
 8002d00:	b940      	cbnz	r0, 8002d14 <xQueueGenericReceive+0x20>
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	e7fe      	b.n	8002d12 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d14:	2900      	cmp	r1, #0
 8002d16:	f040 80a5 	bne.w	8002e64 <xQueueGenericReceive+0x170>
 8002d1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80a1 	beq.w	8002e64 <xQueueGenericReceive+0x170>
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d34:	9e01      	ldr	r6, [sp, #4]
 8002d36:	2e00      	cmp	r6, #0
 8002d38:	f000 809a 	beq.w	8002e70 <xQueueGenericReceive+0x17c>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002d50:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06d      	beq.n	8002e32 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d5a:	e05f      	b.n	8002e1c <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d5c:	9d01      	ldr	r5, [sp, #4]
 8002d5e:	b91d      	cbnz	r5, 8002d68 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8002d60:	f7ff fca2 	bl	80026a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002d64:	4628      	mov	r0, r5
 8002d66:	e067      	b.n	8002e38 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8002d68:	b916      	cbnz	r6, 8002d70 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8002d6a:	a802      	add	r0, sp, #8
 8002d6c:	f000 fd8c 	bl	8003888 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d70:	f7ff fc9a 	bl	80026a8 <vPortExitCritical>
		vTaskSuspendAll();
 8002d74:	f000 fb1c 	bl	80033b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d78:	f7ff fc74 	bl	8002664 <vPortEnterCritical>
 8002d7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d80:	2bff      	cmp	r3, #255	; 0xff
 8002d82:	bf08      	it	eq
 8002d84:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002d88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d8c:	2bff      	cmp	r3, #255	; 0xff
 8002d8e:	bf08      	it	eq
 8002d90:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002d94:	f7ff fc88 	bl	80026a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d98:	a901      	add	r1, sp, #4
 8002d9a:	a802      	add	r0, sp, #8
 8002d9c:	f000 fd84 	bl	80038a8 <xTaskCheckForTimeOut>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d152      	bne.n	8002e4a <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8002da4:	f7ff fc5e 	bl	8002664 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002da8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002daa:	f7ff fc7d 	bl	80026a8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	d145      	bne.n	8002e3e <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	b933      	cbnz	r3, 8002dc4 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8002db6:	f7ff fc55 	bl	8002664 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002dba:	6860      	ldr	r0, [r4, #4]
 8002dbc:	f000 fdc4 	bl	8003948 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002dc0:	f7ff fc72 	bl	80026a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc4:	9901      	ldr	r1, [sp, #4]
 8002dc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002dca:	f000 fd01 	bl	80037d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff fd89 	bl	80028e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dd4:	f000 fb86 	bl	80034e4 <xTaskResumeAll>
 8002dd8:	b938      	cbnz	r0, 8002dea <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8002dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dde:	f8ca 3000 	str.w	r3, [sl]
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002dec:	f7ff fc3a 	bl	8002664 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002df0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df2:	2d00      	cmp	r5, #0
 8002df4:	d0b2      	beq.n	8002d5c <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002df6:	4641      	mov	r1, r8
 8002df8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002dfa:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dfc:	f7ff fd5f 	bl	80028be <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002e00:	f1b9 0f00 	cmp.w	r9, #0
 8002e04:	d1a3      	bne.n	8002d4e <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e06:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002e08:	3d01      	subs	r5, #1
 8002e0a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e0c:	b913      	cbnz	r3, 8002e14 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002e0e:	f000 fe33 	bl	8003a78 <pvTaskIncrementMutexHeldCount>
 8002e12:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	b163      	cbz	r3, 8002e32 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e18:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1c:	f000 fcf2 	bl	8003804 <xTaskRemoveFromEventList>
 8002e20:	b138      	cbz	r0, 8002e32 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8002e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <xQueueGenericReceive+0x184>)
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002e32:	f7ff fc39 	bl	80026a8 <vPortExitCritical>
				return pdPASS;
 8002e36:	2001      	movs	r0, #1
}
 8002e38:	b004      	add	sp, #16
 8002e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff fd51 	bl	80028e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e44:	f000 fb4e 	bl	80034e4 <xTaskResumeAll>
 8002e48:	e7cf      	b.n	8002dea <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff fd4b 	bl	80028e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e50:	f000 fb48 	bl	80034e4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002e54:	f7ff fc06 	bl	8002664 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002e5a:	f7ff fc25 	bl	80026a8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	d1c3      	bne.n	8002dea <xQueueGenericReceive+0xf6>
 8002e62:	e77f      	b.n	8002d64 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e64:	f000 fd60 	bl	8003928 <xTaskGetSchedulerState>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f43f af63 	beq.w	8002d34 <xQueueGenericReceive+0x40>
 8002e6e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002e70:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002e72:	f8df a004 	ldr.w	sl, [pc, #4]	; 8002e78 <xQueueGenericReceive+0x184>
 8002e76:	e7b9      	b.n	8002dec <xQueueGenericReceive+0xf8>
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <xQueueReceiveFromISR>:
{
 8002e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e80:	4689      	mov	r9, r1
 8002e82:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002e84:	4605      	mov	r5, r0
 8002e86:	b940      	cbnz	r0, 8002e9a <xQueueReceiveFromISR+0x1e>
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	e7fe      	b.n	8002e98 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9a:	bb71      	cbnz	r1, 8002efa <xQueueReceiveFromISR+0x7e>
 8002e9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e9e:	b363      	cbz	r3, 8002efa <xQueueReceiveFromISR+0x7e>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002eb2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002eb8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7ff fcff 	bl	80028be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002ec0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002ec2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002ec4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002ec6:	d113      	bne.n	8002ef0 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec8:	692b      	ldr	r3, [r5, #16]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002ecc:	2001      	movs	r0, #1
 8002ece:	e00b      	b.n	8002ee8 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed0:	f105 0010 	add.w	r0, r5, #16
 8002ed4:	f000 fc96 	bl	8003804 <xTaskRemoveFromEventList>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d0f7      	beq.n	8002ecc <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002edc:	f1b8 0f00 	cmp.w	r8, #0
 8002ee0:	d0f4      	beq.n	8002ecc <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002ee8:	f387 8811 	msr	BASEPRI, r7
}
 8002eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	b276      	sxtb	r6, r6
 8002ef4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002ef8:	e7e8      	b.n	8002ecc <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002efa:	f7ff fc7f 	bl	80027fc <vPortValidateInterruptPriority>
	__asm volatile
 8002efe:	f3ef 8711 	mrs	r7, BASEPRI
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f12:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f14:	2c00      	cmp	r4, #0
 8002f16:	d1cc      	bne.n	8002eb2 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002f18:	4620      	mov	r0, r4
 8002f1a:	e7e5      	b.n	8002ee8 <xQueueReceiveFromISR+0x6c>

08002f1c <uxQueueMessagesWaiting>:
{
 8002f1c:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8002f1e:	4604      	mov	r4, r0
 8002f20:	b940      	cbnz	r0, 8002f34 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	e7fe      	b.n	8002f32 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8002f34:	f7ff fb96 	bl	8002664 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002f38:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002f3a:	f7ff fbb5 	bl	80026a8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002f3e:	4620      	mov	r0, r4
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <uxQueueSpacesAvailable>:
{
 8002f42:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002f44:	4605      	mov	r5, r0
 8002f46:	b940      	cbnz	r0, 8002f5a <uxQueueSpacesAvailable+0x18>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	e7fe      	b.n	8002f58 <uxQueueSpacesAvailable+0x16>
	taskENTER_CRITICAL();
 8002f5a:	f7ff fb83 	bl	8002664 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002f5e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002f60:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 8002f62:	1a24      	subs	r4, r4, r0
	taskEXIT_CRITICAL();
 8002f64:	f7ff fba0 	bl	80026a8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002f68:	4620      	mov	r0, r4
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}

08002f6c <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8002f6c:	b940      	cbnz	r0, 8002f80 <uxQueueMessagesWaitingFromISR+0x14>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	e7fe      	b.n	8002f7e <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002f80:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002f82:	4770      	bx	lr

08002f84 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <prvResetNextTaskUnblockTime+0x1c>)
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <prvResetNextTaskUnblockTime+0x20>)
 8002f8c:	b919      	cbnz	r1, 8002f96 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f9a:	68d2      	ldr	r2, [r2, #12]
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	e7f8      	b.n	8002f92 <prvResetNextTaskUnblockTime+0xe>
 8002fa0:	20002220 	.word	0x20002220
 8002fa4:	200022f8 	.word	0x200022f8

08002fa8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fac:	4e1b      	ldr	r6, [pc, #108]	; (800301c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002fae:	681d      	ldr	r5, [r3, #0]
{
 8002fb0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb2:	6830      	ldr	r0, [r6, #0]
{
 8002fb4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb6:	3004      	adds	r0, #4
 8002fb8:	f7ff faf7 	bl	80025aa <uxListRemove>
 8002fbc:	4633      	mov	r3, r6
 8002fbe:	b940      	cbnz	r0, 8002fd2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	6831      	ldr	r1, [r6, #0]
 8002fc4:	4e16      	ldr	r6, [pc, #88]	; (8003020 <prvAddCurrentTaskToDelayedList+0x78>)
 8002fc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002fc8:	6832      	ldr	r2, [r6, #0]
 8002fca:	4088      	lsls	r0, r1
 8002fcc:	ea22 0200 	bic.w	r2, r2, r0
 8002fd0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fd2:	1c62      	adds	r2, r4, #1
 8002fd4:	d107      	bne.n	8002fe6 <prvAddCurrentTaskToDelayedList+0x3e>
 8002fd6:	b137      	cbz	r7, 8002fe6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	4812      	ldr	r0, [pc, #72]	; (8003024 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002fdc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fe2:	f7ff babf 	b.w	8002564 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fe6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fe8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002fea:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fec:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002fee:	d907      	bls.n	8003000 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <prvAddCurrentTaskToDelayedList+0x80>)
 8002ff2:	6810      	ldr	r0, [r2, #0]
 8002ff4:	6819      	ldr	r1, [r3, #0]
}
 8002ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffa:	3104      	adds	r1, #4
 8002ffc:	f7ff babe 	b.w	800257c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <prvAddCurrentTaskToDelayedList+0x84>)
 8003002:	6810      	ldr	r0, [r2, #0]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	3104      	adds	r1, #4
 8003008:	f7ff fab8 	bl	800257c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <prvAddCurrentTaskToDelayedList+0x88>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003012:	bf38      	it	cc
 8003014:	601c      	strcc	r4, [r3, #0]
 8003016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003018:	20002340 	.word	0x20002340
 800301c:	2000221c 	.word	0x2000221c
 8003020:	200022c8 	.word	0x200022c8
 8003024:	20002318 	.word	0x20002318
 8003028:	20002224 	.word	0x20002224
 800302c:	20002220 	.word	0x20002220
 8003030:	200022f8 	.word	0x200022f8

08003034 <prvTaskIsTaskSuspended.part.0>:
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	e7fe      	b.n	8003044 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08003048 <prvTaskIsTaskSuspended>:
	{
 8003048:	b508      	push	{r3, lr}
		configASSERT( xTask );
 800304a:	b908      	cbnz	r0, 8003050 <prvTaskIsTaskSuspended+0x8>
 800304c:	f7ff fff2 	bl	8003034 <prvTaskIsTaskSuspended.part.0>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003050:	6942      	ldr	r2, [r0, #20]
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <prvTaskIsTaskSuspended+0x24>)
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <prvTaskIsTaskSuspended+0x14>
	BaseType_t xReturn = pdFALSE;
 8003058:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800305a:	bd08      	pop	{r3, pc}
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800305c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <prvTaskIsTaskSuspended+0x28>)
 8003060:	4298      	cmp	r0, r3
 8003062:	d0f9      	beq.n	8003058 <prvTaskIsTaskSuspended+0x10>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8003064:	fab0 f080 	clz	r0, r0
 8003068:	0940      	lsrs	r0, r0, #5
		return xReturn;
 800306a:	bd08      	pop	{r3, pc}
 800306c:	20002318 	.word	0x20002318
 8003070:	20002300 	.word	0x20002300

08003074 <xTaskCreate>:
	{
 8003074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003078:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800307c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800307e:	4650      	mov	r0, sl
	{
 8003080:	460f      	mov	r7, r1
 8003082:	4699      	mov	r9, r3
 8003084:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003086:	f7ff f999 	bl	80023bc <pvPortMalloc>
			if( pxStack != NULL )
 800308a:	4605      	mov	r5, r0
 800308c:	2800      	cmp	r0, #0
 800308e:	f000 8096 	beq.w	80031be <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003092:	2054      	movs	r0, #84	; 0x54
 8003094:	f7ff f992 	bl	80023bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003098:	4604      	mov	r4, r0
 800309a:	2800      	cmp	r0, #0
 800309c:	f000 808c 	beq.w	80031b8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030a0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80030a4:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030a6:	4455      	add	r5, sl
 80030a8:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030aa:	f025 0a07 	bic.w	sl, r5, #7
 80030ae:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80030b2:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b4:	7859      	ldrb	r1, [r3, #1]
 80030b6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80030ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80030be:	b109      	cbz	r1, 80030c4 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030c0:	42bb      	cmp	r3, r7
 80030c2:	d1f7      	bne.n	80030b4 <xTaskCreate+0x40>
 80030c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030c6:	f04f 0b00 	mov.w	fp, #0
 80030ca:	2d06      	cmp	r5, #6
 80030cc:	bf28      	it	cs
 80030ce:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030d0:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80030d2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80030d4:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030d6:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030d8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80030dc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030e0:	f7ff fa3d 	bl	800255e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e8:	f104 0018 	add.w	r0, r4, #24
 80030ec:	f7ff fa37 	bl	800255e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80030f0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030f4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030f8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030fa:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030fe:	464a      	mov	r2, r9
 8003100:	4641      	mov	r1, r8
 8003102:	4650      	mov	r0, sl
 8003104:	f7ff fa8a 	bl	800261c <pxPortInitialiseStack>
 8003108:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800310a:	b106      	cbz	r6, 800310e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800310c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800310e:	f7ff faa9 	bl	8002664 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003112:	4b32      	ldr	r3, [pc, #200]	; (80031dc <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003114:	4e32      	ldr	r6, [pc, #200]	; (80031e0 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800320c <xTaskCreate+0x198>
 800311c:	3201      	adds	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003120:	6835      	ldr	r5, [r6, #0]
 8003122:	2d00      	cmp	r5, #0
 8003124:	d14e      	bne.n	80031c4 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8003126:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d11d      	bne.n	800316a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800312e:	eb08 0005 	add.w	r0, r8, r5
 8003132:	3514      	adds	r5, #20
 8003134:	f7ff fa08 	bl	8002548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003138:	2d8c      	cmp	r5, #140	; 0x8c
 800313a:	d1f8      	bne.n	800312e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800313c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003210 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003140:	4d28      	ldr	r5, [pc, #160]	; (80031e4 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003142:	4648      	mov	r0, r9
 8003144:	f7ff fa00 	bl	8002548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003148:	4628      	mov	r0, r5
 800314a:	f7ff f9fd 	bl	8002548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800314e:	4826      	ldr	r0, [pc, #152]	; (80031e8 <xTaskCreate+0x174>)
 8003150:	f7ff f9fa 	bl	8002548 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003154:	4825      	ldr	r0, [pc, #148]	; (80031ec <xTaskCreate+0x178>)
 8003156:	f7ff f9f7 	bl	8002548 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800315a:	4825      	ldr	r0, [pc, #148]	; (80031f0 <xTaskCreate+0x17c>)
 800315c:	f7ff f9f4 	bl	8002548 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <xTaskCreate+0x180>)
 8003162:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <xTaskCreate+0x184>)
 8003168:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800316a:	2501      	movs	r5, #1
		uxTaskNumber++;
 800316c:	4a23      	ldr	r2, [pc, #140]	; (80031fc <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800316e:	4924      	ldr	r1, [pc, #144]	; (8003200 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003170:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003172:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003174:	3301      	adds	r3, #1
 8003176:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003178:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800317a:	fa05 f302 	lsl.w	r3, r5, r2
 800317e:	4303      	orrs	r3, r0
 8003180:	2014      	movs	r0, #20
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	fb00 8002 	mla	r0, r0, r2, r8
 8003188:	4639      	mov	r1, r7
 800318a:	f7ff f9eb 	bl	8002564 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800318e:	f7ff fa8b 	bl	80026a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <xTaskCreate+0x190>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b163      	cbz	r3, 80031b2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003198:	6833      	ldr	r3, [r6, #0]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800319e:	429a      	cmp	r2, r3
 80031a0:	d207      	bcs.n	80031b2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80031a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <xTaskCreate+0x194>)
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
	}
 80031b2:	4628      	mov	r0, r5
 80031b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80031b8:	4628      	mov	r0, r5
 80031ba:	f7ff f98d 	bl	80024d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031be:	f04f 35ff 	mov.w	r5, #4294967295
 80031c2:	e7f6      	b.n	80031b2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <xTaskCreate+0x190>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ce      	bne.n	800316a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031cc:	6833      	ldr	r3, [r6, #0]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031d2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80031d4:	bf98      	it	ls
 80031d6:	6034      	strls	r4, [r6, #0]
 80031d8:	e7c7      	b.n	800316a <xTaskCreate+0xf6>
 80031da:	bf00      	nop
 80031dc:	200022b4 	.word	0x200022b4
 80031e0:	2000221c 	.word	0x2000221c
 80031e4:	200022e0 	.word	0x200022e0
 80031e8:	20002300 	.word	0x20002300
 80031ec:	2000232c 	.word	0x2000232c
 80031f0:	20002318 	.word	0x20002318
 80031f4:	20002220 	.word	0x20002220
 80031f8:	20002224 	.word	0x20002224
 80031fc:	200022c4 	.word	0x200022c4
 8003200:	200022c8 	.word	0x200022c8
 8003204:	20002314 	.word	0x20002314
 8003208:	e000ed04 	.word	0xe000ed04
 800320c:	20002228 	.word	0x20002228
 8003210:	200022cc 	.word	0x200022cc

08003214 <vTaskResume>:
	{
 8003214:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8003216:	4604      	mov	r4, r0
 8003218:	b940      	cbnz	r0, 800322c <vTaskResume+0x18>
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	e7fe      	b.n	800322a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800322c:	4d16      	ldr	r5, [pc, #88]	; (8003288 <vTaskResume+0x74>)
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	4298      	cmp	r0, r3
 8003232:	d028      	beq.n	8003286 <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8003234:	f7ff fa16 	bl	8002664 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ff05 	bl	8003048 <prvTaskIsTaskSuspended>
 800323e:	b1f0      	cbz	r0, 800327e <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003240:	1d26      	adds	r6, r4, #4
 8003242:	4630      	mov	r0, r6
 8003244:	f7ff f9b1 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003248:	2301      	movs	r3, #1
 800324a:	4910      	ldr	r1, [pc, #64]	; (800328c <vTaskResume+0x78>)
 800324c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800324e:	6808      	ldr	r0, [r1, #0]
 8003250:	4093      	lsls	r3, r2
 8003252:	4303      	orrs	r3, r0
 8003254:	2014      	movs	r0, #20
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <vTaskResume+0x7c>)
 800325a:	4631      	mov	r1, r6
 800325c:	fb00 3002 	mla	r0, r0, r2, r3
 8003260:	f7ff f980 	bl	8002564 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d307      	bcc.n	800327e <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <vTaskResume+0x80>)
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	f3bf 8f6f 	isb	sy
	}
 800327e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8003282:	f7ff ba11 	b.w	80026a8 <vPortExitCritical>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	2000221c 	.word	0x2000221c
 800328c:	200022c8 	.word	0x200022c8
 8003290:	20002228 	.word	0x20002228
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <xTaskResumeFromISR>:
	{
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800329a:	4605      	mov	r5, r0
 800329c:	b940      	cbnz	r0, 80032b0 <xTaskResumeFromISR+0x18>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	e7fe      	b.n	80032ae <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032b0:	f7ff faa4 	bl	80027fc <vPortValidateInterruptPriority>
	__asm volatile
 80032b4:	f3ef 8611 	mrs	r6, BASEPRI
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80032c8:	4628      	mov	r0, r5
 80032ca:	f7ff febd 	bl	8003048 <prvTaskIsTaskSuspended>
 80032ce:	b338      	cbz	r0, 8003320 <xTaskResumeFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <xTaskResumeFromISR+0x8c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b9eb      	cbnz	r3, 8003312 <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <xTaskResumeFromISR+0x90>)
 80032d8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80032da:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032dc:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032e0:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e2:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e4:	bf34      	ite	cc
 80032e6:	2400      	movcc	r4, #0
 80032e8:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ea:	f7ff f95e 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032ee:	2301      	movs	r3, #1
 80032f0:	490e      	ldr	r1, [pc, #56]	; (800332c <xTaskResumeFromISR+0x94>)
 80032f2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80032f4:	6808      	ldr	r0, [r1, #0]
 80032f6:	4093      	lsls	r3, r2
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2014      	movs	r0, #20
 80032fc:	600b      	str	r3, [r1, #0]
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <xTaskResumeFromISR+0x98>)
 8003300:	4639      	mov	r1, r7
 8003302:	fb00 3002 	mla	r0, r0, r2, r3
 8003306:	f7ff f92d 	bl	8002564 <vListInsertEnd>
	__asm volatile
 800330a:	f386 8811 	msr	BASEPRI, r6
	}
 800330e:	4620      	mov	r0, r4
 8003310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003312:	f105 0118 	add.w	r1, r5, #24
 8003316:	4807      	ldr	r0, [pc, #28]	; (8003334 <xTaskResumeFromISR+0x9c>)
 8003318:	f7ff f924 	bl	8002564 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 800331c:	2400      	movs	r4, #0
 800331e:	e7f4      	b.n	800330a <xTaskResumeFromISR+0x72>
 8003320:	4604      	mov	r4, r0
 8003322:	e7f2      	b.n	800330a <xTaskResumeFromISR+0x72>
 8003324:	200022c0 	.word	0x200022c0
 8003328:	2000221c 	.word	0x2000221c
 800332c:	200022c8 	.word	0x200022c8
 8003330:	20002228 	.word	0x20002228
 8003334:	20002300 	.word	0x20002300

08003338 <vTaskStartScheduler>:
{
 8003338:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800333a:	2400      	movs	r4, #0
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <vTaskStartScheduler+0x60>)
 800333e:	9400      	str	r4, [sp, #0]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	4623      	mov	r3, r4
 8003346:	4915      	ldr	r1, [pc, #84]	; (800339c <vTaskStartScheduler+0x64>)
 8003348:	4815      	ldr	r0, [pc, #84]	; (80033a0 <vTaskStartScheduler+0x68>)
 800334a:	f7ff fe93 	bl	8003074 <xTaskCreate>
	if( xReturn == pdPASS )
 800334e:	2801      	cmp	r0, #1
 8003350:	d114      	bne.n	800337c <vTaskStartScheduler+0x44>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <vTaskStartScheduler+0x6c>)
 8003368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <vTaskStartScheduler+0x70>)
 800336c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <vTaskStartScheduler+0x74>)
 8003370:	601c      	str	r4, [r3, #0]
}
 8003372:	b002      	add	sp, #8
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003378:	f7ff b9f6 	b.w	8002768 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800337c:	3001      	adds	r0, #1
 800337e:	d108      	bne.n	8003392 <vTaskStartScheduler+0x5a>
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	e7fe      	b.n	8003390 <vTaskStartScheduler+0x58>
}
 8003392:	b002      	add	sp, #8
 8003394:	bd10      	pop	{r4, pc}
 8003396:	bf00      	nop
 8003398:	200022f4 	.word	0x200022f4
 800339c:	080052bf 	.word	0x080052bf
 80033a0:	0800361d 	.word	0x0800361d
 80033a4:	200022f8 	.word	0x200022f8
 80033a8:	20002314 	.word	0x20002314
 80033ac:	20002340 	.word	0x20002340

080033b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80033b0:	4a02      	ldr	r2, [pc, #8]	; (80033bc <vTaskSuspendAll+0xc>)
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	200022c0 	.word	0x200022c0

080033c0 <xTaskIncrementTick>:
{
 80033c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <xTaskIncrementTick+0xf8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d153      	bne.n	8003474 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <xTaskIncrementTick+0xfc>)
 80033ce:	681c      	ldr	r4, [r3, #0]
 80033d0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80033d2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80033d4:	b9bc      	cbnz	r4, 8003406 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80033d6:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <xTaskIncrementTick+0x100>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	b142      	cbz	r2, 80033f0 <xTaskIncrementTick+0x30>
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	e7fe      	b.n	80033ee <xTaskIncrementTick+0x2e>
 80033f0:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <xTaskIncrementTick+0x104>)
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	6810      	ldr	r0, [r2, #0]
 80033f6:	6018      	str	r0, [r3, #0]
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	4a33      	ldr	r2, [pc, #204]	; (80034c8 <xTaskIncrementTick+0x108>)
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	f7ff fdbf 	bl	8002f84 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003406:	4d31      	ldr	r5, [pc, #196]	; (80034cc <xTaskIncrementTick+0x10c>)
 8003408:	f04f 0b00 	mov.w	fp, #0
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	4f30      	ldr	r7, [pc, #192]	; (80034d0 <xTaskIncrementTick+0x110>)
 8003410:	429c      	cmp	r4, r3
 8003412:	d33e      	bcc.n	8003492 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80034c0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003418:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80034e0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341c:	f8d8 2000 	ldr.w	r2, [r8]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	bb72      	cbnz	r2, 8003482 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	602a      	str	r2, [r5, #0]
					break;
 800342a:	e032      	b.n	8003492 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800342c:	f106 0a04 	add.w	sl, r6, #4
 8003430:	4650      	mov	r0, sl
 8003432:	f7ff f8ba 	bl	80025aa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003436:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003438:	b119      	cbz	r1, 8003442 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800343a:	f106 0018 	add.w	r0, r6, #24
 800343e:	f7ff f8b4 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003442:	2201      	movs	r2, #1
 8003444:	f04f 0e14 	mov.w	lr, #20
 8003448:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800344a:	f8d9 3000 	ldr.w	r3, [r9]
 800344e:	fa02 f100 	lsl.w	r1, r2, r0
 8003452:	4319      	orrs	r1, r3
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <xTaskIncrementTick+0x114>)
 8003456:	f8c9 1000 	str.w	r1, [r9]
 800345a:	fb0e 3000 	mla	r0, lr, r0, r3
 800345e:	4651      	mov	r1, sl
 8003460:	f7ff f880 	bl	8002564 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003464:	6838      	ldr	r0, [r7, #0]
 8003466:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003468:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800346a:	4291      	cmp	r1, r2
 800346c:	bf28      	it	cs
 800346e:	f04f 0b01 	movcs.w	fp, #1
 8003472:	e7d3      	b.n	800341c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003476:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e011      	b.n	80034a6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003482:	f8d8 2000 	ldr.w	r2, [r8]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800348a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800348c:	428c      	cmp	r4, r1
 800348e:	d2cd      	bcs.n	800342c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003490:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <xTaskIncrementTick+0x114>)
 8003496:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003498:	2214      	movs	r2, #20
 800349a:	434a      	muls	r2, r1
 800349c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800349e:	2a02      	cmp	r2, #2
 80034a0:	bf28      	it	cs
 80034a2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80034a6:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <xTaskIncrementTick+0x11c>)
 80034a8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	bf18      	it	ne
 80034ae:	f04f 0b01 	movne.w	fp, #1
}
 80034b2:	4658      	mov	r0, fp
 80034b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b8:	200022c0 	.word	0x200022c0
 80034bc:	20002340 	.word	0x20002340
 80034c0:	20002220 	.word	0x20002220
 80034c4:	20002224 	.word	0x20002224
 80034c8:	200022fc 	.word	0x200022fc
 80034cc:	200022f8 	.word	0x200022f8
 80034d0:	2000221c 	.word	0x2000221c
 80034d4:	20002228 	.word	0x20002228
 80034d8:	200022bc 	.word	0x200022bc
 80034dc:	20002344 	.word	0x20002344
 80034e0:	200022c8 	.word	0x200022c8

080034e4 <xTaskResumeAll>:
{
 80034e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80034e8:	4c31      	ldr	r4, [pc, #196]	; (80035b0 <xTaskResumeAll+0xcc>)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	b943      	cbnz	r3, 8003500 <xTaskResumeAll+0x1c>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	e7fe      	b.n	80034fe <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003500:	f7ff f8b0 	bl	8002664 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350a:	6824      	ldr	r4, [r4, #0]
 800350c:	b12c      	cbz	r4, 800351a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800350e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003510:	f7ff f8ca 	bl	80026a8 <vPortExitCritical>
}
 8003514:	4620      	mov	r0, r4
 8003516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <xTaskResumeAll+0xd0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f5      	beq.n	800350e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003522:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80035cc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003526:	4f24      	ldr	r7, [pc, #144]	; (80035b8 <xTaskResumeAll+0xd4>)
 8003528:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80035d0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800352c:	f8d9 3000 	ldr.w	r3, [r9]
 8003530:	b9e3      	cbnz	r3, 800356c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003532:	b10c      	cbz	r4, 8003538 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003534:	f7ff fd26 	bl	8002f84 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003538:	4d20      	ldr	r5, [pc, #128]	; (80035bc <xTaskResumeAll+0xd8>)
 800353a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800353c:	b144      	cbz	r4, 8003550 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800353e:	2701      	movs	r7, #1
 8003540:	4e1f      	ldr	r6, [pc, #124]	; (80035c0 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003542:	f7ff ff3d 	bl	80033c0 <xTaskIncrementTick>
 8003546:	b100      	cbz	r0, 800354a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003548:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800354a:	3c01      	subs	r4, #1
 800354c:	d1f9      	bne.n	8003542 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800354e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <xTaskResumeAll+0xdc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0da      	beq.n	800350e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <xTaskResumeAll+0xe0>)
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003568:	2401      	movs	r4, #1
 800356a:	e7d1      	b.n	8003510 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800356c:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003570:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003572:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003574:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003576:	f104 0018 	add.w	r0, r4, #24
 800357a:	f7ff f816 	bl	80025aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800357e:	4630      	mov	r0, r6
 8003580:	f7ff f813 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003584:	2014      	movs	r0, #20
 8003586:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	fa05 f302 	lsl.w	r3, r5, r2
 800358e:	430b      	orrs	r3, r1
 8003590:	fb00 8002 	mla	r0, r0, r2, r8
 8003594:	4631      	mov	r1, r6
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	f7fe ffe4 	bl	8002564 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <xTaskResumeAll+0xe4>)
 800359e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80035a6:	bf24      	itt	cs
 80035a8:	4b05      	ldrcs	r3, [pc, #20]	; (80035c0 <xTaskResumeAll+0xdc>)
 80035aa:	601d      	strcs	r5, [r3, #0]
 80035ac:	e7be      	b.n	800352c <xTaskResumeAll+0x48>
 80035ae:	bf00      	nop
 80035b0:	200022c0 	.word	0x200022c0
 80035b4:	200022b4 	.word	0x200022b4
 80035b8:	200022c8 	.word	0x200022c8
 80035bc:	200022bc 	.word	0x200022bc
 80035c0:	20002344 	.word	0x20002344
 80035c4:	e000ed04 	.word	0xe000ed04
 80035c8:	2000221c 	.word	0x2000221c
 80035cc:	20002300 	.word	0x20002300
 80035d0:	20002228 	.word	0x20002228

080035d4 <vTaskDelay>:
	{
 80035d4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035d6:	b940      	cbnz	r0, 80035ea <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80035d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <vTaskDelay+0x40>)
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <vTaskDelay+0x44>)
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	b141      	cbz	r1, 8003602 <vTaskDelay+0x2e>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	e7fe      	b.n	8003600 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003602:	f7ff fed5 	bl	80033b0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003606:	f7ff fccf 	bl	8002fa8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800360a:	f7ff ff6b 	bl	80034e4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800360e:	2800      	cmp	r0, #0
 8003610:	d0e2      	beq.n	80035d8 <vTaskDelay+0x4>
 8003612:	bd08      	pop	{r3, pc}
 8003614:	e000ed04 	.word	0xe000ed04
 8003618:	200022c0 	.word	0x200022c0

0800361c <prvIdleTask>:
{
 800361c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800361e:	4e17      	ldr	r6, [pc, #92]	; (800367c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003620:	4c17      	ldr	r4, [pc, #92]	; (8003680 <prvIdleTask+0x64>)
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	b963      	cbnz	r3, 8003640 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <prvIdleTask+0x68>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d9f8      	bls.n	8003620 <prvIdleTask+0x4>
				taskYIELD();
 800362e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <prvIdleTask+0x6c>)
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	e7ef      	b.n	8003620 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003640:	f7ff feb6 	bl	80033b0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003644:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003646:	f7ff ff4d 	bl	80034e4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800364a:	2d00      	cmp	r5, #0
 800364c:	d0e9      	beq.n	8003622 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800364e:	f7ff f809 	bl	8002664 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003652:	68f3      	ldr	r3, [r6, #12]
 8003654:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003656:	1d28      	adds	r0, r5, #4
 8003658:	f7fe ffa7 	bl	80025aa <uxListRemove>
					--uxCurrentNumberOfTasks;
 800365c:	4a0b      	ldr	r2, [pc, #44]	; (800368c <prvIdleTask+0x70>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	3b01      	subs	r3, #1
 8003668:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800366a:	f7ff f81d 	bl	80026a8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800366e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003670:	f7fe ff32 	bl	80024d8 <vPortFree>
			vPortFree( pxTCB );
 8003674:	4628      	mov	r0, r5
 8003676:	f7fe ff2f 	bl	80024d8 <vPortFree>
 800367a:	e7d2      	b.n	8003622 <prvIdleTask+0x6>
 800367c:	2000232c 	.word	0x2000232c
 8003680:	200022b8 	.word	0x200022b8
 8003684:	20002228 	.word	0x20002228
 8003688:	e000ed04 	.word	0xe000ed04
 800368c:	200022b4 	.word	0x200022b4

08003690 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <vTaskSwitchContext+0x60>)
{
 8003692:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <vTaskSwitchContext+0x64>)
 8003698:	b112      	cbz	r2, 80036a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800369a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80036a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <vTaskSwitchContext+0x68>)
 80036a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	2214      	movs	r2, #20
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f1c3 031f 	rsb	r3, r3, #31
 80036b2:	435a      	muls	r2, r3
 80036b4:	4911      	ldr	r1, [pc, #68]	; (80036fc <vTaskSwitchContext+0x6c>)
 80036b6:	588c      	ldr	r4, [r1, r2]
 80036b8:	1888      	adds	r0, r1, r2
 80036ba:	b944      	cbnz	r4, 80036ce <vTaskSwitchContext+0x3e>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	e7fe      	b.n	80036cc <vTaskSwitchContext+0x3c>
 80036ce:	6844      	ldr	r4, [r0, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	6864      	ldr	r4, [r4, #4]
 80036d4:	440a      	add	r2, r1
 80036d6:	4294      	cmp	r4, r2
 80036d8:	bf08      	it	eq
 80036da:	6862      	ldreq	r2, [r4, #4]
 80036dc:	6044      	str	r4, [r0, #4]
 80036de:	bf08      	it	eq
 80036e0:	6042      	streq	r2, [r0, #4]
 80036e2:	2214      	movs	r2, #20
 80036e4:	fb02 1303 	mla	r3, r2, r3, r1
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <vTaskSwitchContext+0x70>)
 80036ee:	e7d5      	b.n	800369c <vTaskSwitchContext+0xc>
 80036f0:	200022c0 	.word	0x200022c0
 80036f4:	20002344 	.word	0x20002344
 80036f8:	200022c8 	.word	0x200022c8
 80036fc:	20002228 	.word	0x20002228
 8003700:	2000221c 	.word	0x2000221c

08003704 <vTaskSuspend>:
	{
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4604      	mov	r4, r0
 8003708:	4e29      	ldr	r6, [pc, #164]	; (80037b0 <vTaskSuspend+0xac>)
		taskENTER_CRITICAL();
 800370a:	f7fe ffab 	bl	8002664 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800370e:	b904      	cbnz	r4, 8003712 <vTaskSuspend+0xe>
 8003710:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003712:	1d25      	adds	r5, r4, #4
 8003714:	4628      	mov	r0, r5
 8003716:	f7fe ff48 	bl	80025aa <uxListRemove>
 800371a:	b960      	cbnz	r0, 8003736 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800371c:	2114      	movs	r1, #20
 800371e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <vTaskSuspend+0xb0>)
 8003722:	4341      	muls	r1, r0
 8003724:	585b      	ldr	r3, [r3, r1]
 8003726:	b933      	cbnz	r3, 8003736 <vTaskSuspend+0x32>
 8003728:	2201      	movs	r2, #1
 800372a:	4923      	ldr	r1, [pc, #140]	; (80037b8 <vTaskSuspend+0xb4>)
 800372c:	4082      	lsls	r2, r0
 800372e:	680b      	ldr	r3, [r1, #0]
 8003730:	ea23 0302 	bic.w	r3, r3, r2
 8003734:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003738:	b11b      	cbz	r3, 8003742 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373a:	f104 0018 	add.w	r0, r4, #24
 800373e:	f7fe ff34 	bl	80025aa <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003742:	4629      	mov	r1, r5
		if( xSchedulerRunning != pdFALSE )
 8003744:	4d1d      	ldr	r5, [pc, #116]	; (80037bc <vTaskSuspend+0xb8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003746:	481e      	ldr	r0, [pc, #120]	; (80037c0 <vTaskSuspend+0xbc>)
 8003748:	f7fe ff0c 	bl	8002564 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800374c:	f7fe ffac 	bl	80026a8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003750:	682a      	ldr	r2, [r5, #0]
 8003752:	b12a      	cbz	r2, 8003760 <vTaskSuspend+0x5c>
			taskENTER_CRITICAL();
 8003754:	f7fe ff86 	bl	8002664 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8003758:	f7ff fc14 	bl	8002f84 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800375c:	f7fe ffa4 	bl	80026a8 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8003760:	6833      	ldr	r3, [r6, #0]
 8003762:	429c      	cmp	r4, r3
 8003764:	d122      	bne.n	80037ac <vTaskSuspend+0xa8>
			if( xSchedulerRunning != pdFALSE )
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	b1a3      	cbz	r3, 8003794 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <vTaskSuspend+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b143      	cbz	r3, 8003782 <vTaskSuspend+0x7e>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	e7fe      	b.n	8003780 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 8003782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <vTaskSuspend+0xc4>)
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <vTaskSuspend+0xc8>)
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <vTaskSuspend+0xbc>)
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	6809      	ldr	r1, [r1, #0]
 800379c:	4291      	cmp	r1, r2
 800379e:	d101      	bne.n	80037a4 <vTaskSuspend+0xa0>
					pxCurrentTCB = NULL;
 80037a0:	6033      	str	r3, [r6, #0]
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
	}
 80037a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80037a8:	f7ff bf72 	b.w	8003690 <vTaskSwitchContext>
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
 80037ae:	bf00      	nop
 80037b0:	2000221c 	.word	0x2000221c
 80037b4:	20002228 	.word	0x20002228
 80037b8:	200022c8 	.word	0x200022c8
 80037bc:	20002314 	.word	0x20002314
 80037c0:	20002318 	.word	0x20002318
 80037c4:	200022c0 	.word	0x200022c0
 80037c8:	e000ed04 	.word	0xe000ed04
 80037cc:	200022b4 	.word	0x200022b4

080037d0 <vTaskPlaceOnEventList>:
{
 80037d0:	b510      	push	{r4, lr}
 80037d2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80037d4:	b940      	cbnz	r0, 80037e8 <vTaskPlaceOnEventList+0x18>
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	e7fe      	b.n	80037e6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <vTaskPlaceOnEventList+0x30>)
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	3118      	adds	r1, #24
 80037ee:	f7fe fec5 	bl	800257c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037f2:	4620      	mov	r0, r4
}
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037f8:	2101      	movs	r1, #1
 80037fa:	f7ff bbd5 	b.w	8002fa8 <prvAddCurrentTaskToDelayedList>
 80037fe:	bf00      	nop
 8003800:	2000221c 	.word	0x2000221c

08003804 <xTaskRemoveFromEventList>:
{
 8003804:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003806:	68c3      	ldr	r3, [r0, #12]
 8003808:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800380a:	b944      	cbnz	r4, 800381e <xTaskRemoveFromEventList+0x1a>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	e7fe      	b.n	800381c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800381e:	f104 0518 	add.w	r5, r4, #24
 8003822:	4628      	mov	r0, r5
 8003824:	f7fe fec1 	bl	80025aa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <xTaskRemoveFromEventList+0x6c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b9e3      	cbnz	r3, 8003868 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800382e:	1d25      	adds	r5, r4, #4
 8003830:	4628      	mov	r0, r5
 8003832:	f7fe feba 	bl	80025aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003836:	2301      	movs	r3, #1
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <xTaskRemoveFromEventList+0x70>)
 800383a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800383c:	6808      	ldr	r0, [r1, #0]
 800383e:	4093      	lsls	r3, r2
 8003840:	4303      	orrs	r3, r0
 8003842:	2014      	movs	r0, #20
 8003844:	600b      	str	r3, [r1, #0]
 8003846:	4629      	mov	r1, r5
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <xTaskRemoveFromEventList+0x74>)
 800384a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800384e:	f7fe fe89 	bl	8002564 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <xTaskRemoveFromEventList+0x78>)
 8003854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800385c:	bf85      	ittet	hi
 800385e:	2001      	movhi	r0, #1
 8003860:	4b07      	ldrhi	r3, [pc, #28]	; (8003880 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8003862:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003864:	6018      	strhi	r0, [r3, #0]
}
 8003866:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003868:	4629      	mov	r1, r5
 800386a:	4806      	ldr	r0, [pc, #24]	; (8003884 <xTaskRemoveFromEventList+0x80>)
 800386c:	e7ef      	b.n	800384e <xTaskRemoveFromEventList+0x4a>
 800386e:	bf00      	nop
 8003870:	200022c0 	.word	0x200022c0
 8003874:	200022c8 	.word	0x200022c8
 8003878:	20002228 	.word	0x20002228
 800387c:	2000221c 	.word	0x2000221c
 8003880:	20002344 	.word	0x20002344
 8003884:	20002300 	.word	0x20002300

08003888 <vTaskSetTimeOutState>:
{
 8003888:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800388a:	b908      	cbnz	r0, 8003890 <vTaskSetTimeOutState+0x8>
 800388c:	f7ff fbd2 	bl	8003034 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <vTaskSetTimeOutState+0x18>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <vTaskSetTimeOutState+0x1c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6043      	str	r3, [r0, #4]
 800389c:	bd08      	pop	{r3, pc}
 800389e:	bf00      	nop
 80038a0:	200022fc 	.word	0x200022fc
 80038a4:	20002340 	.word	0x20002340

080038a8 <xTaskCheckForTimeOut>:
{
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80038ac:	4604      	mov	r4, r0
 80038ae:	b940      	cbnz	r0, 80038c2 <xTaskCheckForTimeOut+0x1a>
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	e7fe      	b.n	80038c0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80038c2:	b941      	cbnz	r1, 80038d6 <xTaskCheckForTimeOut+0x2e>
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	e7fe      	b.n	80038d4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80038d6:	f7fe fec5 	bl	8002664 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <xTaskCheckForTimeOut+0x6c>)
 80038dc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	d010      	beq.n	8003906 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038e4:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <xTaskCheckForTimeOut+0x70>)
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4290      	cmp	r0, r2
 80038ec:	6862      	ldr	r2, [r4, #4]
 80038ee:	d001      	beq.n	80038f4 <xTaskCheckForTimeOut+0x4c>
 80038f0:	4291      	cmp	r1, r2
 80038f2:	d20d      	bcs.n	8003910 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038f4:	1a88      	subs	r0, r1, r2
 80038f6:	4283      	cmp	r3, r0
 80038f8:	d90a      	bls.n	8003910 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80038fa:	1a5b      	subs	r3, r3, r1
 80038fc:	4413      	add	r3, r2
 80038fe:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ffc1 	bl	8003888 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003906:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003908:	f7fe fece 	bl	80026a8 <vPortExitCritical>
}
 800390c:	4620      	mov	r0, r4
 800390e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003910:	2401      	movs	r4, #1
 8003912:	e7f9      	b.n	8003908 <xTaskCheckForTimeOut+0x60>
 8003914:	20002340 	.word	0x20002340
 8003918:	200022fc 	.word	0x200022fc

0800391c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800391c:	2201      	movs	r2, #1
 800391e:	4b01      	ldr	r3, [pc, #4]	; (8003924 <vTaskMissedYield+0x8>)
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	4770      	bx	lr
 8003924:	20002344 	.word	0x20002344

08003928 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <xTaskGetSchedulerState+0x18>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b133      	cbz	r3, 800393c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <xTaskGetSchedulerState+0x1c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003934:	bf0c      	ite	eq
 8003936:	2002      	moveq	r0, #2
 8003938:	2000      	movne	r0, #0
 800393a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800393c:	2001      	movs	r0, #1
	}
 800393e:	4770      	bx	lr
 8003940:	20002314 	.word	0x20002314
 8003944:	200022c0 	.word	0x200022c0

08003948 <vTaskPriorityInherit>:
	{
 8003948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800394c:	4604      	mov	r4, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	d039      	beq.n	80039c6 <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003952:	4d1e      	ldr	r5, [pc, #120]	; (80039cc <vTaskPriorityInherit+0x84>)
 8003954:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003956:	682a      	ldr	r2, [r5, #0]
 8003958:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800395a:	4293      	cmp	r3, r2
 800395c:	d233      	bcs.n	80039c6 <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800395e:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003960:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003962:	4e1b      	ldr	r6, [pc, #108]	; (80039d0 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003964:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003966:	bfa8      	it	ge
 8003968:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800396a:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396e:	bfa2      	ittt	ge
 8003970:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003972:	f1c2 0207 	rsbge	r2, r2, #7
 8003976:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003978:	6942      	ldr	r2, [r0, #20]
 800397a:	429a      	cmp	r2, r3
 800397c:	d120      	bne.n	80039c0 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397e:	f100 0804 	add.w	r8, r0, #4
 8003982:	4640      	mov	r0, r8
 8003984:	f7fe fe11 	bl	80025aa <uxListRemove>
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <vTaskPriorityInherit+0x8c>)
 800398a:	b948      	cbnz	r0, 80039a0 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800398c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800398e:	4347      	muls	r7, r0
 8003990:	59f3      	ldr	r3, [r6, r7]
 8003992:	b92b      	cbnz	r3, 80039a0 <vTaskPriorityInherit+0x58>
 8003994:	2101      	movs	r1, #1
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	4081      	lsls	r1, r0
 800399a:	ea23 0301 	bic.w	r3, r3, r1
 800399e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039a0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80039a2:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80039a6:	2301      	movs	r3, #1
 80039a8:	4083      	lsls	r3, r0
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039b0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80039b2:	4641      	mov	r1, r8
 80039b4:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80039b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80039bc:	f7fe bdd2 	b.w	8002564 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80039c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ca:	bf00      	nop
 80039cc:	2000221c 	.word	0x2000221c
 80039d0:	20002228 	.word	0x20002228
 80039d4:	200022c8 	.word	0x200022c8

080039d8 <xTaskPriorityDisinherit>:
	{
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80039da:	4604      	mov	r4, r0
 80039dc:	b908      	cbnz	r0, 80039e2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80039de:	2000      	movs	r0, #0
 80039e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <xTaskPriorityDisinherit+0x94>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4298      	cmp	r0, r3
 80039e8:	d008      	beq.n	80039fc <xTaskPriorityDisinherit+0x24>
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	e7fe      	b.n	80039fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80039fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80039fe:	b943      	cbnz	r3, 8003a12 <xTaskPriorityDisinherit+0x3a>
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	e7fe      	b.n	8003a10 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a12:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003a14:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003a16:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a18:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003a1a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a1c:	d0df      	beq.n	80039de <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1dd      	bne.n	80039de <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a22:	1d05      	adds	r5, r0, #4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f7fe fdc0 	bl	80025aa <uxListRemove>
 8003a2a:	4e11      	ldr	r6, [pc, #68]	; (8003a70 <xTaskPriorityDisinherit+0x98>)
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <xTaskPriorityDisinherit+0x9c>)
 8003a2e:	b950      	cbnz	r0, 8003a46 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a30:	2114      	movs	r1, #20
 8003a32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a34:	4379      	muls	r1, r7
 8003a36:	5873      	ldr	r3, [r6, r1]
 8003a38:	b92b      	cbnz	r3, 8003a46 <xTaskPriorityDisinherit+0x6e>
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	40b8      	lsls	r0, r7
 8003a40:	ea23 0300 	bic.w	r3, r3, r0
 8003a44:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a48:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a50:	2401      	movs	r4, #1
 8003a52:	6811      	ldr	r1, [r2, #0]
 8003a54:	fa04 f003 	lsl.w	r0, r4, r3
 8003a58:	4308      	orrs	r0, r1
 8003a5a:	6010      	str	r0, [r2, #0]
 8003a5c:	2014      	movs	r0, #20
 8003a5e:	4629      	mov	r1, r5
 8003a60:	fb00 6003 	mla	r0, r0, r3, r6
 8003a64:	f7fe fd7e 	bl	8002564 <vListInsertEnd>
					xReturn = pdTRUE;
 8003a68:	4620      	mov	r0, r4
	}
 8003a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6c:	2000221c 	.word	0x2000221c
 8003a70:	20002228 	.word	0x20002228
 8003a74:	200022c8 	.word	0x200022c8

08003a78 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <pvTaskIncrementMutexHeldCount+0x14>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	b11a      	cbz	r2, 8003a86 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003a82:	3201      	adds	r2, #1
 8003a84:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003a86:	6818      	ldr	r0, [r3, #0]
	}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2000221c 	.word	0x2000221c

08003a90 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8003a90:	b570      	push	{r4, r5, r6, lr}
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8003a92:	7a03      	ldrb	r3, [r0, #8]
{
 8003a94:	4604      	mov	r4, r0
	if (options->MQTTVersion == 3)
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d036      	beq.n	8003b08 <MQTTSerialize_connectLength+0x78>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf14      	ite	ne
 8003a9e:	2500      	movne	r5, #0
 8003aa0:	250a      	moveq	r5, #10

	len += MQTTstrlen(options->clientID)+2;
 8003aa2:	f104 030c 	add.w	r3, r4, #12
 8003aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aaa:	f000 f92e 	bl	8003d0a <MQTTstrlen>
	if (options->willFlag)
 8003aae:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 8003ab0:	3002      	adds	r0, #2
 8003ab2:	4405      	add	r5, r0
	if (options->willFlag)
 8003ab4:	b17b      	cbz	r3, 8003ad6 <MQTTSerialize_connectLength+0x46>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8003ab6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003abe:	f000 f924 	bl	8003d0a <MQTTstrlen>
 8003ac2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003acc:	f000 f91d 	bl	8003d0a <MQTTstrlen>
 8003ad0:	4430      	add	r0, r6
 8003ad2:	3004      	adds	r0, #4
 8003ad4:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 8003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad8:	b90b      	cbnz	r3, 8003ade <MQTTSerialize_connectLength+0x4e>
 8003ada:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003adc:	b13b      	cbz	r3, 8003aee <MQTTSerialize_connectLength+0x5e>
		len += MQTTstrlen(options->username)+2;
 8003ade:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003ae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ae6:	f000 f910 	bl	8003d0a <MQTTstrlen>
 8003aea:	3002      	adds	r0, #2
 8003aec:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 8003aee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003af0:	b90b      	cbnz	r3, 8003af6 <MQTTSerialize_connectLength+0x66>
 8003af2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003af4:	b133      	cbz	r3, 8003b04 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->password)+2;
 8003af6:	344c      	adds	r4, #76	; 0x4c
 8003af8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003afc:	f000 f905 	bl	8003d0a <MQTTstrlen>
 8003b00:	3002      	adds	r0, #2
 8003b02:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
 8003b04:	4628      	mov	r0, r5
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 8003b08:	250c      	movs	r5, #12
 8003b0a:	e7ca      	b.n	8003aa2 <MQTTSerialize_connectLength+0x12>

08003b0c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8003b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b0e:	4606      	mov	r6, r0
	unsigned char *ptr = buf;
 8003b10:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8003b12:	4610      	mov	r0, r2
{
 8003b14:	460f      	mov	r7, r1
 8003b16:	4614      	mov	r4, r2
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8003b18:	f7ff ffba 	bl	8003a90 <MQTTSerialize_connectLength>
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	f000 f893 	bl	8003c48 <MQTTPacket_len>
 8003b22:	42b8      	cmp	r0, r7
 8003b24:	dc6e      	bgt.n	8003c04 <MQTTSerialize_connect+0xf8>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
 8003b26:	2110      	movs	r1, #16
 8003b28:	a801      	add	r0, sp, #4
 8003b2a:	f000 f89f 	bl	8003c6c <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003b2e:	4629      	mov	r1, r5
 8003b30:	9801      	ldr	r0, [sp, #4]
 8003b32:	f000 f86f 	bl	8003c14 <MQTTPacket_encode>
 8003b36:	9b01      	ldr	r3, [sp, #4]

	if (options->MQTTVersion == 4)
 8003b38:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003b3a:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 8003b3c:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8003b3e:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 8003b40:	d15a      	bne.n	8003bf8 <MQTTSerialize_connect+0xec>
	{
		writeCString(&ptr, "MQTT");
 8003b42:	4932      	ldr	r1, [pc, #200]	; (8003c0c <MQTTSerialize_connect+0x100>)
 8003b44:	a801      	add	r0, sp, #4
 8003b46:	f000 f8aa 	bl	8003c9e <writeCString>
		writeChar(&ptr, (char) 4);
 8003b4a:	4629      	mov	r1, r5
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
		writeChar(&ptr, (char) 3);
 8003b4c:	a801      	add	r0, sp, #4
 8003b4e:	f000 f88d 	bl	8003c6c <writeChar>
	}

	flags.all = 0;
 8003b52:	2100      	movs	r1, #0
	flags.bits.cleansession = options->cleansession;
 8003b54:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 8003b56:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 8003b5a:	f363 0141 	bfi	r1, r3, #1, #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8003b5e:	7ee3      	ldrb	r3, [r4, #27]
 8003b60:	3300      	adds	r3, #0
 8003b62:	bf18      	it	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	f363 0182 	bfi	r1, r3, #2, #1
	if (flags.bits.will)
 8003b6a:	0748      	lsls	r0, r1, #29
	{
		flags.bits.willQoS = options->will.qos;
 8003b6c:	bf41      	itttt	mi
 8003b6e:	f894 303d 	ldrbmi.w	r3, [r4, #61]	; 0x3d
 8003b72:	f363 01c4 	bfimi	r1, r3, #3, #2
		flags.bits.willRetain = options->will.retained;
 8003b76:	f894 303c 	ldrbmi.w	r3, [r4, #60]	; 0x3c
 8003b7a:	f363 1145 	bfimi	r1, r3, #5, #1
	}

	if (options->username.cstring || options->username.lenstring.data)
 8003b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b80:	b90b      	cbnz	r3, 8003b86 <MQTTSerialize_connect+0x7a>
 8003b82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b84:	b10b      	cbz	r3, 8003b8a <MQTTSerialize_connect+0x7e>
		flags.bits.username = 1;
 8003b86:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 8003b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b8c:	b90b      	cbnz	r3, 8003b92 <MQTTSerialize_connect+0x86>
 8003b8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b90:	b10b      	cbz	r3, 8003b96 <MQTTSerialize_connect+0x8a>
		flags.bits.password = 1;
 8003b92:	f041 0140 	orr.w	r1, r1, #64	; 0x40

	writeChar(&ptr, flags.all);
 8003b96:	b2cd      	uxtb	r5, r1
 8003b98:	4629      	mov	r1, r5
 8003b9a:	a801      	add	r0, sp, #4
 8003b9c:	f000 f866 	bl	8003c6c <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8003ba0:	8b21      	ldrh	r1, [r4, #24]
 8003ba2:	a801      	add	r0, sp, #4
 8003ba4:	f000 f868 	bl	8003c78 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8003ba8:	f104 030c 	add.w	r3, r4, #12
 8003bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bae:	a801      	add	r0, sp, #4
 8003bb0:	f000 f889 	bl	8003cc6 <writeMQTTString>
	if (options->willFlag)
 8003bb4:	7ee3      	ldrb	r3, [r4, #27]
 8003bb6:	b15b      	cbz	r3, 8003bd0 <MQTTSerialize_connect+0xc4>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8003bb8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bbe:	a801      	add	r0, sp, #4
 8003bc0:	f000 f881 	bl	8003cc6 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8003bc4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bca:	a801      	add	r0, sp, #4
 8003bcc:	f000 f87b 	bl	8003cc6 <writeMQTTString>
	}
	if (flags.bits.username)
 8003bd0:	062a      	lsls	r2, r5, #24
 8003bd2:	d505      	bpl.n	8003be0 <MQTTSerialize_connect+0xd4>
		writeMQTTString(&ptr, options->username);
 8003bd4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bda:	a801      	add	r0, sp, #4
 8003bdc:	f000 f873 	bl	8003cc6 <writeMQTTString>
	if (flags.bits.password)
 8003be0:	066b      	lsls	r3, r5, #25
 8003be2:	d505      	bpl.n	8003bf0 <MQTTSerialize_connect+0xe4>
		writeMQTTString(&ptr, options->password);
 8003be4:	344c      	adds	r4, #76	; 0x4c
 8003be6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003bea:	a801      	add	r0, sp, #4
 8003bec:	f000 f86b 	bl	8003cc6 <writeMQTTString>

	rc = ptr - buf;
 8003bf0:	9801      	ldr	r0, [sp, #4]
 8003bf2:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQIsdp");
 8003bf8:	4905      	ldr	r1, [pc, #20]	; (8003c10 <MQTTSerialize_connect+0x104>)
 8003bfa:	a801      	add	r0, sp, #4
 8003bfc:	f000 f84f 	bl	8003c9e <writeCString>
		writeChar(&ptr, (char) 3);
 8003c00:	2103      	movs	r1, #3
 8003c02:	e7a3      	b.n	8003b4c <MQTTSerialize_connect+0x40>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003c04:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8003c08:	e7f4      	b.n	8003bf4 <MQTTSerialize_connect+0xe8>
 8003c0a:	bf00      	nop
 8003c0c:	080052c4 	.word	0x080052c4
 8003c10:	080052c9 	.word	0x080052c9

08003c14 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8003c14:	b530      	push	{r4, r5, lr}
 8003c16:	1e44      	subs	r4, r0, #1

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
		length /= 128;
 8003c18:	2580      	movs	r5, #128	; 0x80
	int rc = 0;
 8003c1a:	2000      	movs	r0, #0
		char d = length % 128;
 8003c1c:	424a      	negs	r2, r1
 8003c1e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
		length /= 128;
 8003c22:	fb91 f1f5 	sdiv	r1, r1, r5
		char d = length % 128;
 8003c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2a:	bf58      	it	pl
 8003c2c:	4253      	negpl	r3, r2
 8003c2e:	b2db      	uxtb	r3, r3
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8003c30:	2900      	cmp	r1, #0
			d |= 0x80;
 8003c32:	bfc8      	it	gt
 8003c34:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
		buf[rc++] = d;
	} while (length > 0);
 8003c38:	2900      	cmp	r1, #0
		buf[rc++] = d;
 8003c3a:	f100 0001 	add.w	r0, r0, #1
 8003c3e:	f804 3f01 	strb.w	r3, [r4, #1]!
	} while (length > 0);
 8003c42:	dceb      	bgt.n	8003c1c <MQTTPacket_encode+0x8>
	FUNC_EXIT_RC(rc);
	return rc;
}
 8003c44:	bd30      	pop	{r4, r5, pc}
	...

08003c48 <MQTTPacket_len>:
}


int MQTTPacket_len(int rem_len)
{
	rem_len += 1; /* header byte */
 8003c48:	1c43      	adds	r3, r0, #1

	/* now remaining_length field */
	if (rem_len < 128)
 8003c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c4c:	dc01      	bgt.n	8003c52 <MQTTPacket_len+0xa>
		rem_len += 1;
 8003c4e:	3002      	adds	r0, #2
 8003c50:	4770      	bx	lr
	else if (rem_len < 16384)
 8003c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c56:	da01      	bge.n	8003c5c <MQTTPacket_len+0x14>
		rem_len += 2;
 8003c58:	3003      	adds	r0, #3
 8003c5a:	4770      	bx	lr
	else if (rem_len < 2097151)
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <MQTTPacket_len+0x20>)
 8003c5e:	4293      	cmp	r3, r2
		rem_len += 3;
 8003c60:	bfd4      	ite	le
 8003c62:	3004      	addle	r0, #4
	else
		rem_len += 4;
 8003c64:	3005      	addgt	r0, #5
	return rem_len;
}
 8003c66:	4770      	bx	lr
 8003c68:	001ffffe 	.word	0x001ffffe

08003c6c <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 8003c6c:	6803      	ldr	r3, [r0, #0]
 8003c6e:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	6003      	str	r3, [r0, #0]
 8003c76:	4770      	bx	lr

08003c78 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 8003c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7c:	fb91 f3f3 	sdiv	r3, r1, r3
 8003c80:	6802      	ldr	r2, [r0, #0]
 8003c82:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8003c84:	6802      	ldr	r2, [r0, #0]
 8003c86:	1c53      	adds	r3, r2, #1
 8003c88:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 8003c8a:	424b      	negs	r3, r1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	b2c9      	uxtb	r1, r1
 8003c90:	bf58      	it	pl
 8003c92:	4259      	negpl	r1, r3
 8003c94:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	6003      	str	r3, [r0, #0]
 8003c9c:	4770      	bx	lr

08003c9e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	4604      	mov	r4, r0
	int len = strlen(string);
 8003ca2:	4608      	mov	r0, r1
{
 8003ca4:	460e      	mov	r6, r1
	int len = strlen(string);
 8003ca6:	f7fc fa53 	bl	8000150 <strlen>
 8003caa:	4605      	mov	r5, r0
	writeInt(pptr, len);
 8003cac:	4601      	mov	r1, r0
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff ffe2 	bl	8003c78 <writeInt>
	memcpy(*pptr, string, len);
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	f000 f8b9 	bl	8003e30 <memcpy>
	*pptr += len;
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	4428      	add	r0, r5
 8003cc2:	6020      	str	r0, [r4, #0]
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}

08003cc6 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8003cc6:	b530      	push	{r4, r5, lr}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	ac04      	add	r4, sp, #16
 8003ccc:	e904 000e 	stmdb	r4, {r1, r2, r3}
 8003cd0:	9c02      	ldr	r4, [sp, #8]
 8003cd2:	4605      	mov	r5, r0
	if (mqttstring.lenstring.len > 0)
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	dd0c      	ble.n	8003cf2 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8003cd8:	4621      	mov	r1, r4
 8003cda:	f7ff ffcd 	bl	8003c78 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8003cde:	4622      	mov	r2, r4
 8003ce0:	9903      	ldr	r1, [sp, #12]
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	f000 f8a4 	bl	8003e30 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	441c      	add	r4, r3
 8003cec:	602c      	str	r4, [r5, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8003cee:	b005      	add	sp, #20
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 8003cf4:	b121      	cbz	r1, 8003d00 <writeMQTTString+0x3a>
}
 8003cf6:	b005      	add	sp, #20
 8003cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 8003cfc:	f7ff bfcf 	b.w	8003c9e <writeCString>
}
 8003d00:	b005      	add	sp, #20
 8003d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 8003d06:	f7ff bfb7 	b.w	8003c78 <writeInt>

08003d0a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	ab04      	add	r3, sp, #16
 8003d0e:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8003d12:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 8003d14:	b110      	cbz	r0, 8003d1c <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 8003d16:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 8003d18:	f7fc ba1a 	b.w	8000150 <strlen>
}
 8003d1c:	9802      	ldr	r0, [sp, #8]
 8003d1e:	b004      	add	sp, #16
 8003d20:	4770      	bx	lr

08003d22 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8003d22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	a801      	add	r0, sp, #4
 8003d28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8003d2c:	c807      	ldmia	r0, {r0, r1, r2}
 8003d2e:	f7ff ffec 	bl	8003d0a <MQTTstrlen>
 8003d32:	9b06      	ldr	r3, [sp, #24]
 8003d34:	3002      	adds	r0, #2
 8003d36:	4418      	add	r0, r3
	if (qos > 0)
 8003d38:	2c00      	cmp	r4, #0
		len += 2; /* packetid */
 8003d3a:	bfc8      	it	gt
 8003d3c:	3002      	addgt	r0, #2
	return len;
}
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8003d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d46:	461f      	mov	r7, r3
 8003d48:	b085      	sub	sp, #20
 8003d4a:	9e14      	ldr	r6, [sp, #80]	; 0x50
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8003d4c:	ac10      	add	r4, sp, #64	; 0x40
 8003d4e:	9600      	str	r6, [sp, #0]
{
 8003d50:	468b      	mov	fp, r1
	unsigned char *ptr = buf;
 8003d52:	9003      	str	r0, [sp, #12]
{
 8003d54:	4680      	mov	r8, r0
 8003d56:	4692      	mov	sl, r2
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8003d58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ffe0 	bl	8003d22 <MQTTSerialize_publishLength>
 8003d62:	4681      	mov	r9, r0
 8003d64:	f7ff ff70 	bl	8003c48 <MQTTPacket_len>
 8003d68:	4558      	cmp	r0, fp
	MQTTHeader header = {0};
 8003d6a:	f04f 0500 	mov.w	r5, #0
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8003d6e:	dc2d      	bgt.n	8003dcc <MQTTSerialize_publish+0x8a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	f363 1507 	bfi	r5, r3, #4, #4
	header.bits.dup = dup;
 8003d76:	f36a 05c3 	bfi	r5, sl, #3, #1
	header.bits.qos = qos;
	header.bits.retain = retained;
 8003d7a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	header.bits.qos = qos;
 8003d7e:	f367 0542 	bfi	r5, r7, #1, #2
	header.bits.retain = retained;
 8003d82:	f363 0500 	bfi	r5, r3, #0, #1
	writeChar(&ptr, header.byte); /* write header */
 8003d86:	b2e9      	uxtb	r1, r5
 8003d88:	a803      	add	r0, sp, #12
 8003d8a:	f7ff ff6f 	bl	8003c6c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8003d8e:	4649      	mov	r1, r9
 8003d90:	9803      	ldr	r0, [sp, #12]
 8003d92:	f7ff ff3f 	bl	8003c14 <MQTTPacket_encode>
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	4418      	add	r0, r3
 8003d9a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
 8003d9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003da0:	a803      	add	r0, sp, #12
 8003da2:	f7ff ff90 	bl	8003cc6 <writeMQTTString>

	if (qos > 0)
 8003da6:	2f00      	cmp	r7, #0
 8003da8:	dd04      	ble.n	8003db4 <MQTTSerialize_publish+0x72>
		writeInt(&ptr, packetid);
 8003daa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8003dae:	a803      	add	r0, sp, #12
 8003db0:	f7ff ff62 	bl	8003c78 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8003db4:	4632      	mov	r2, r6
 8003db6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003db8:	9803      	ldr	r0, [sp, #12]
 8003dba:	f000 f839 	bl	8003e30 <memcpy>
	ptr += payloadlen;
 8003dbe:	9803      	ldr	r0, [sp, #12]
 8003dc0:	4430      	add	r0, r6

	rc = ptr - buf;
 8003dc2:	eba0 0008 	sub.w	r0, r0, r8

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8003dc6:	b005      	add	sp, #20
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8003dcc:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8003dd0:	e7f9      	b.n	8003dc6 <MQTTSerialize_publish+0x84>

08003dd2 <atoi>:
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f000 ba01 	b.w	80041dc <strtol>
	...

08003ddc <__errno>:
 8003ddc:	4b01      	ldr	r3, [pc, #4]	; (8003de4 <__errno+0x8>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <__libc_init_array>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	2500      	movs	r5, #0
 8003dec:	4e0c      	ldr	r6, [pc, #48]	; (8003e20 <__libc_init_array+0x38>)
 8003dee:	4c0d      	ldr	r4, [pc, #52]	; (8003e24 <__libc_init_array+0x3c>)
 8003df0:	1ba4      	subs	r4, r4, r6
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	42a5      	cmp	r5, r4
 8003df6:	d109      	bne.n	8003e0c <__libc_init_array+0x24>
 8003df8:	f001 f92e 	bl	8005058 <_init>
 8003dfc:	2500      	movs	r5, #0
 8003dfe:	4e0a      	ldr	r6, [pc, #40]	; (8003e28 <__libc_init_array+0x40>)
 8003e00:	4c0a      	ldr	r4, [pc, #40]	; (8003e2c <__libc_init_array+0x44>)
 8003e02:	1ba4      	subs	r4, r4, r6
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	42a5      	cmp	r5, r4
 8003e08:	d105      	bne.n	8003e16 <__libc_init_array+0x2e>
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e10:	4798      	blx	r3
 8003e12:	3501      	adds	r5, #1
 8003e14:	e7ee      	b.n	8003df4 <__libc_init_array+0xc>
 8003e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1a:	4798      	blx	r3
 8003e1c:	3501      	adds	r5, #1
 8003e1e:	e7f2      	b.n	8003e06 <__libc_init_array+0x1e>
 8003e20:	08005474 	.word	0x08005474
 8003e24:	08005474 	.word	0x08005474
 8003e28:	08005474 	.word	0x08005474
 8003e2c:	08005478 	.word	0x08005478

08003e30 <memcpy>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	1e43      	subs	r3, r0, #1
 8003e34:	440a      	add	r2, r1
 8003e36:	4291      	cmp	r1, r2
 8003e38:	d100      	bne.n	8003e3c <memcpy+0xc>
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e44:	e7f7      	b.n	8003e36 <memcpy+0x6>

08003e46 <memset>:
 8003e46:	4603      	mov	r3, r0
 8003e48:	4402      	add	r2, r0
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d100      	bne.n	8003e50 <memset+0xa>
 8003e4e:	4770      	bx	lr
 8003e50:	f803 1b01 	strb.w	r1, [r3], #1
 8003e54:	e7f9      	b.n	8003e4a <memset+0x4>
	...

08003e58 <_puts_r>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	460e      	mov	r6, r1
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b118      	cbz	r0, 8003e68 <_puts_r+0x10>
 8003e60:	6983      	ldr	r3, [r0, #24]
 8003e62:	b90b      	cbnz	r3, 8003e68 <_puts_r+0x10>
 8003e64:	f000 fba4 	bl	80045b0 <__sinit>
 8003e68:	69ab      	ldr	r3, [r5, #24]
 8003e6a:	68ac      	ldr	r4, [r5, #8]
 8003e6c:	b913      	cbnz	r3, 8003e74 <_puts_r+0x1c>
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 fb9e 	bl	80045b0 <__sinit>
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <_puts_r+0xac>)
 8003e76:	429c      	cmp	r4, r3
 8003e78:	d117      	bne.n	8003eaa <_puts_r+0x52>
 8003e7a:	686c      	ldr	r4, [r5, #4]
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	071b      	lsls	r3, r3, #28
 8003e80:	d51d      	bpl.n	8003ebe <_puts_r+0x66>
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	b1db      	cbz	r3, 8003ebe <_puts_r+0x66>
 8003e86:	3e01      	subs	r6, #1
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	b9e9      	cbnz	r1, 8003ed0 <_puts_r+0x78>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da2e      	bge.n	8003ef6 <_puts_r+0x9e>
 8003e98:	4622      	mov	r2, r4
 8003e9a:	210a      	movs	r1, #10
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 f9b3 	bl	8004208 <__swbuf_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d011      	beq.n	8003eca <_puts_r+0x72>
 8003ea6:	200a      	movs	r0, #10
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <_puts_r+0xb0>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d101      	bne.n	8003eb4 <_puts_r+0x5c>
 8003eb0:	68ac      	ldr	r4, [r5, #8]
 8003eb2:	e7e3      	b.n	8003e7c <_puts_r+0x24>
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <_puts_r+0xb4>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	bf08      	it	eq
 8003eba:	68ec      	ldreq	r4, [r5, #12]
 8003ebc:	e7de      	b.n	8003e7c <_puts_r+0x24>
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 fa05 	bl	80042d0 <__swsetup_r>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d0dd      	beq.n	8003e86 <_puts_r+0x2e>
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da04      	bge.n	8003ede <_puts_r+0x86>
 8003ed4:	69a2      	ldr	r2, [r4, #24]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	db06      	blt.n	8003ee8 <_puts_r+0x90>
 8003eda:	290a      	cmp	r1, #10
 8003edc:	d004      	beq.n	8003ee8 <_puts_r+0x90>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	6022      	str	r2, [r4, #0]
 8003ee4:	7019      	strb	r1, [r3, #0]
 8003ee6:	e7cf      	b.n	8003e88 <_puts_r+0x30>
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	f000 f98c 	bl	8004208 <__swbuf_r>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d1c9      	bne.n	8003e88 <_puts_r+0x30>
 8003ef4:	e7e9      	b.n	8003eca <_puts_r+0x72>
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	7018      	strb	r0, [r3, #0]
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	bf00      	nop
 8003f04:	080052f4 	.word	0x080052f4
 8003f08:	08005314 	.word	0x08005314
 8003f0c:	080052d4 	.word	0x080052d4

08003f10 <puts>:
 8003f10:	4b02      	ldr	r3, [pc, #8]	; (8003f1c <puts+0xc>)
 8003f12:	4601      	mov	r1, r0
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	f7ff bf9f 	b.w	8003e58 <_puts_r>
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <siprintf>:
 8003f20:	b40e      	push	{r1, r2, r3}
 8003f22:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f26:	b500      	push	{lr}
 8003f28:	b09c      	sub	sp, #112	; 0x70
 8003f2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003f2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f32:	9104      	str	r1, [sp, #16]
 8003f34:	9107      	str	r1, [sp, #28]
 8003f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f3c:	9002      	str	r0, [sp, #8]
 8003f3e:	9006      	str	r0, [sp, #24]
 8003f40:	4808      	ldr	r0, [pc, #32]	; (8003f64 <siprintf+0x44>)
 8003f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f46:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	a902      	add	r1, sp, #8
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	f000 fd4a 	bl	80049e8 <_svfiprintf_r>
 8003f54:	2200      	movs	r2, #0
 8003f56:	9b02      	ldr	r3, [sp, #8]
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	b01c      	add	sp, #112	; 0x70
 8003f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f60:	b003      	add	sp, #12
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <__sread>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 ffc6 	bl	8004f00 <_read_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	bfab      	itete	ge
 8003f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f7c:	181b      	addge	r3, r3, r0
 8003f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f82:	bfac      	ite	ge
 8003f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f86:	81a3      	strhlt	r3, [r4, #12]
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <__swrite>:
 8003f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8e:	461f      	mov	r7, r3
 8003f90:	898b      	ldrh	r3, [r1, #12]
 8003f92:	4605      	mov	r5, r0
 8003f94:	05db      	lsls	r3, r3, #23
 8003f96:	460c      	mov	r4, r1
 8003f98:	4616      	mov	r6, r2
 8003f9a:	d505      	bpl.n	8003fa8 <__swrite+0x1e>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f000 fb92 	bl	80046cc <_lseek_r>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	4632      	mov	r2, r6
 8003fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4628      	mov	r0, r5
 8003fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	f000 b975 	b.w	80042ac <_write_r>

08003fc2 <__sseek>:
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fca:	f000 fb7f 	bl	80046cc <_lseek_r>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	bf15      	itete	ne
 8003fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fde:	81a3      	strheq	r3, [r4, #12]
 8003fe0:	bf18      	it	ne
 8003fe2:	81a3      	strhne	r3, [r4, #12]
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <__sclose>:
 8003fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fea:	f000 b9df 	b.w	80043ac <_close_r>

08003fee <strcpy>:
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff4:	f803 2b01 	strb.w	r2, [r3], #1
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	d1f9      	bne.n	8003ff0 <strcpy+0x2>
 8003ffc:	4770      	bx	lr

08003ffe <strstr>:
 8003ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004000:	7803      	ldrb	r3, [r0, #0]
 8004002:	b133      	cbz	r3, 8004012 <strstr+0x14>
 8004004:	4603      	mov	r3, r0
 8004006:	4618      	mov	r0, r3
 8004008:	1c5e      	adds	r6, r3, #1
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b933      	cbnz	r3, 800401c <strstr+0x1e>
 800400e:	4618      	mov	r0, r3
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004012:	780b      	ldrb	r3, [r1, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf18      	it	ne
 8004018:	2000      	movne	r0, #0
 800401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401c:	1e4d      	subs	r5, r1, #1
 800401e:	1e44      	subs	r4, r0, #1
 8004020:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004024:	2a00      	cmp	r2, #0
 8004026:	d0f3      	beq.n	8004010 <strstr+0x12>
 8004028:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800402c:	4633      	mov	r3, r6
 800402e:	4297      	cmp	r7, r2
 8004030:	d0f6      	beq.n	8004020 <strstr+0x22>
 8004032:	e7e8      	b.n	8004006 <strstr+0x8>

08004034 <strtok>:
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <strtok+0x50>)
 8004036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403a:	681d      	ldr	r5, [r3, #0]
 800403c:	4606      	mov	r6, r0
 800403e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004040:	460f      	mov	r7, r1
 8004042:	b9b4      	cbnz	r4, 8004072 <strtok+0x3e>
 8004044:	2050      	movs	r0, #80	; 0x50
 8004046:	f7fd fc93 	bl	8001970 <malloc>
 800404a:	65a8      	str	r0, [r5, #88]	; 0x58
 800404c:	6004      	str	r4, [r0, #0]
 800404e:	6044      	str	r4, [r0, #4]
 8004050:	6084      	str	r4, [r0, #8]
 8004052:	60c4      	str	r4, [r0, #12]
 8004054:	6104      	str	r4, [r0, #16]
 8004056:	6144      	str	r4, [r0, #20]
 8004058:	6184      	str	r4, [r0, #24]
 800405a:	6284      	str	r4, [r0, #40]	; 0x28
 800405c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800405e:	6304      	str	r4, [r0, #48]	; 0x30
 8004060:	6344      	str	r4, [r0, #52]	; 0x34
 8004062:	6384      	str	r4, [r0, #56]	; 0x38
 8004064:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004066:	6404      	str	r4, [r0, #64]	; 0x40
 8004068:	6444      	str	r4, [r0, #68]	; 0x44
 800406a:	6484      	str	r4, [r0, #72]	; 0x48
 800406c:	64c4      	str	r4, [r0, #76]	; 0x4c
 800406e:	7704      	strb	r4, [r0, #28]
 8004070:	6244      	str	r4, [r0, #36]	; 0x24
 8004072:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004074:	4639      	mov	r1, r7
 8004076:	4630      	mov	r0, r6
 8004078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407c:	2301      	movs	r3, #1
 800407e:	f000 b803 	b.w	8004088 <__strtok_r>
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c

08004088 <__strtok_r>:
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b918      	cbnz	r0, 8004094 <__strtok_r+0xc>
 800408c:	6810      	ldr	r0, [r2, #0]
 800408e:	b908      	cbnz	r0, 8004094 <__strtok_r+0xc>
 8004090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004092:	4620      	mov	r0, r4
 8004094:	4604      	mov	r4, r0
 8004096:	460f      	mov	r7, r1
 8004098:	f814 5b01 	ldrb.w	r5, [r4], #1
 800409c:	f817 6b01 	ldrb.w	r6, [r7], #1
 80040a0:	b91e      	cbnz	r6, 80040aa <__strtok_r+0x22>
 80040a2:	b965      	cbnz	r5, 80040be <__strtok_r+0x36>
 80040a4:	6015      	str	r5, [r2, #0]
 80040a6:	4628      	mov	r0, r5
 80040a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040aa:	42b5      	cmp	r5, r6
 80040ac:	d1f6      	bne.n	800409c <__strtok_r+0x14>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ef      	bne.n	8004092 <__strtok_r+0xa>
 80040b2:	6014      	str	r4, [r2, #0]
 80040b4:	7003      	strb	r3, [r0, #0]
 80040b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b8:	461c      	mov	r4, r3
 80040ba:	e00c      	b.n	80040d6 <__strtok_r+0x4e>
 80040bc:	b915      	cbnz	r5, 80040c4 <__strtok_r+0x3c>
 80040be:	460e      	mov	r6, r1
 80040c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80040c4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	d1f7      	bne.n	80040bc <__strtok_r+0x34>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f3      	beq.n	80040b8 <__strtok_r+0x30>
 80040d0:	2300      	movs	r3, #0
 80040d2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040da <_strtol_l.isra.0>:
 80040da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040de:	4680      	mov	r8, r0
 80040e0:	4689      	mov	r9, r1
 80040e2:	4692      	mov	sl, r2
 80040e4:	461f      	mov	r7, r3
 80040e6:	468b      	mov	fp, r1
 80040e8:	465d      	mov	r5, fp
 80040ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040f0:	f000 fae8 	bl	80046c4 <__locale_ctype_ptr_l>
 80040f4:	4420      	add	r0, r4
 80040f6:	7846      	ldrb	r6, [r0, #1]
 80040f8:	f016 0608 	ands.w	r6, r6, #8
 80040fc:	d10b      	bne.n	8004116 <_strtol_l.isra.0+0x3c>
 80040fe:	2c2d      	cmp	r4, #45	; 0x2d
 8004100:	d10b      	bne.n	800411a <_strtol_l.isra.0+0x40>
 8004102:	2601      	movs	r6, #1
 8004104:	782c      	ldrb	r4, [r5, #0]
 8004106:	f10b 0502 	add.w	r5, fp, #2
 800410a:	b167      	cbz	r7, 8004126 <_strtol_l.isra.0+0x4c>
 800410c:	2f10      	cmp	r7, #16
 800410e:	d114      	bne.n	800413a <_strtol_l.isra.0+0x60>
 8004110:	2c30      	cmp	r4, #48	; 0x30
 8004112:	d00a      	beq.n	800412a <_strtol_l.isra.0+0x50>
 8004114:	e011      	b.n	800413a <_strtol_l.isra.0+0x60>
 8004116:	46ab      	mov	fp, r5
 8004118:	e7e6      	b.n	80040e8 <_strtol_l.isra.0+0xe>
 800411a:	2c2b      	cmp	r4, #43	; 0x2b
 800411c:	bf04      	itt	eq
 800411e:	782c      	ldrbeq	r4, [r5, #0]
 8004120:	f10b 0502 	addeq.w	r5, fp, #2
 8004124:	e7f1      	b.n	800410a <_strtol_l.isra.0+0x30>
 8004126:	2c30      	cmp	r4, #48	; 0x30
 8004128:	d127      	bne.n	800417a <_strtol_l.isra.0+0xa0>
 800412a:	782b      	ldrb	r3, [r5, #0]
 800412c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004130:	2b58      	cmp	r3, #88	; 0x58
 8004132:	d14b      	bne.n	80041cc <_strtol_l.isra.0+0xf2>
 8004134:	2710      	movs	r7, #16
 8004136:	786c      	ldrb	r4, [r5, #1]
 8004138:	3502      	adds	r5, #2
 800413a:	2e00      	cmp	r6, #0
 800413c:	bf0c      	ite	eq
 800413e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004142:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004146:	2200      	movs	r2, #0
 8004148:	fbb1 fef7 	udiv	lr, r1, r7
 800414c:	4610      	mov	r0, r2
 800414e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004152:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004156:	2b09      	cmp	r3, #9
 8004158:	d811      	bhi.n	800417e <_strtol_l.isra.0+0xa4>
 800415a:	461c      	mov	r4, r3
 800415c:	42a7      	cmp	r7, r4
 800415e:	dd1d      	ble.n	800419c <_strtol_l.isra.0+0xc2>
 8004160:	1c53      	adds	r3, r2, #1
 8004162:	d007      	beq.n	8004174 <_strtol_l.isra.0+0x9a>
 8004164:	4586      	cmp	lr, r0
 8004166:	d316      	bcc.n	8004196 <_strtol_l.isra.0+0xbc>
 8004168:	d101      	bne.n	800416e <_strtol_l.isra.0+0x94>
 800416a:	45a4      	cmp	ip, r4
 800416c:	db13      	blt.n	8004196 <_strtol_l.isra.0+0xbc>
 800416e:	2201      	movs	r2, #1
 8004170:	fb00 4007 	mla	r0, r0, r7, r4
 8004174:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004178:	e7eb      	b.n	8004152 <_strtol_l.isra.0+0x78>
 800417a:	270a      	movs	r7, #10
 800417c:	e7dd      	b.n	800413a <_strtol_l.isra.0+0x60>
 800417e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004182:	2b19      	cmp	r3, #25
 8004184:	d801      	bhi.n	800418a <_strtol_l.isra.0+0xb0>
 8004186:	3c37      	subs	r4, #55	; 0x37
 8004188:	e7e8      	b.n	800415c <_strtol_l.isra.0+0x82>
 800418a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800418e:	2b19      	cmp	r3, #25
 8004190:	d804      	bhi.n	800419c <_strtol_l.isra.0+0xc2>
 8004192:	3c57      	subs	r4, #87	; 0x57
 8004194:	e7e2      	b.n	800415c <_strtol_l.isra.0+0x82>
 8004196:	f04f 32ff 	mov.w	r2, #4294967295
 800419a:	e7eb      	b.n	8004174 <_strtol_l.isra.0+0x9a>
 800419c:	1c53      	adds	r3, r2, #1
 800419e:	d108      	bne.n	80041b2 <_strtol_l.isra.0+0xd8>
 80041a0:	2322      	movs	r3, #34	; 0x22
 80041a2:	4608      	mov	r0, r1
 80041a4:	f8c8 3000 	str.w	r3, [r8]
 80041a8:	f1ba 0f00 	cmp.w	sl, #0
 80041ac:	d107      	bne.n	80041be <_strtol_l.isra.0+0xe4>
 80041ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b2:	b106      	cbz	r6, 80041b6 <_strtol_l.isra.0+0xdc>
 80041b4:	4240      	negs	r0, r0
 80041b6:	f1ba 0f00 	cmp.w	sl, #0
 80041ba:	d00c      	beq.n	80041d6 <_strtol_l.isra.0+0xfc>
 80041bc:	b122      	cbz	r2, 80041c8 <_strtol_l.isra.0+0xee>
 80041be:	3d01      	subs	r5, #1
 80041c0:	f8ca 5000 	str.w	r5, [sl]
 80041c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	464d      	mov	r5, r9
 80041ca:	e7f9      	b.n	80041c0 <_strtol_l.isra.0+0xe6>
 80041cc:	2430      	movs	r4, #48	; 0x30
 80041ce:	2f00      	cmp	r7, #0
 80041d0:	d1b3      	bne.n	800413a <_strtol_l.isra.0+0x60>
 80041d2:	2708      	movs	r7, #8
 80041d4:	e7b1      	b.n	800413a <_strtol_l.isra.0+0x60>
 80041d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080041dc <strtol>:
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <strtol+0x24>)
 80041de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041e0:	681c      	ldr	r4, [r3, #0]
 80041e2:	4d08      	ldr	r5, [pc, #32]	; (8004204 <strtol+0x28>)
 80041e4:	6a23      	ldr	r3, [r4, #32]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf08      	it	eq
 80041ea:	462b      	moveq	r3, r5
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	460a      	mov	r2, r1
 80041f2:	4601      	mov	r1, r0
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff ff70 	bl	80040da <_strtol_l.isra.0>
 80041fa:	b003      	add	sp, #12
 80041fc:	bd30      	pop	{r4, r5, pc}
 80041fe:	bf00      	nop
 8004200:	2000000c 	.word	0x2000000c
 8004204:	20000070 	.word	0x20000070

08004208 <__swbuf_r>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	460e      	mov	r6, r1
 800420c:	4614      	mov	r4, r2
 800420e:	4605      	mov	r5, r0
 8004210:	b118      	cbz	r0, 800421a <__swbuf_r+0x12>
 8004212:	6983      	ldr	r3, [r0, #24]
 8004214:	b90b      	cbnz	r3, 800421a <__swbuf_r+0x12>
 8004216:	f000 f9cb 	bl	80045b0 <__sinit>
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <__swbuf_r+0x98>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d12a      	bne.n	8004276 <__swbuf_r+0x6e>
 8004220:	686c      	ldr	r4, [r5, #4]
 8004222:	69a3      	ldr	r3, [r4, #24]
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	071a      	lsls	r2, r3, #28
 800422a:	d52e      	bpl.n	800428a <__swbuf_r+0x82>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	b363      	cbz	r3, 800428a <__swbuf_r+0x82>
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	b2f6      	uxtb	r6, r6
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	6963      	ldr	r3, [r4, #20]
 800423a:	4637      	mov	r7, r6
 800423c:	4298      	cmp	r0, r3
 800423e:	db04      	blt.n	800424a <__swbuf_r+0x42>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f94a 	bl	80044dc <_fflush_r>
 8004248:	bb28      	cbnz	r0, 8004296 <__swbuf_r+0x8e>
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	3001      	adds	r0, #1
 800424e:	3b01      	subs	r3, #1
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	6022      	str	r2, [r4, #0]
 8004258:	701e      	strb	r6, [r3, #0]
 800425a:	6963      	ldr	r3, [r4, #20]
 800425c:	4298      	cmp	r0, r3
 800425e:	d004      	beq.n	800426a <__swbuf_r+0x62>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	07db      	lsls	r3, r3, #31
 8004264:	d519      	bpl.n	800429a <__swbuf_r+0x92>
 8004266:	2e0a      	cmp	r6, #10
 8004268:	d117      	bne.n	800429a <__swbuf_r+0x92>
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f935 	bl	80044dc <_fflush_r>
 8004272:	b190      	cbz	r0, 800429a <__swbuf_r+0x92>
 8004274:	e00f      	b.n	8004296 <__swbuf_r+0x8e>
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <__swbuf_r+0x9c>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d101      	bne.n	8004280 <__swbuf_r+0x78>
 800427c:	68ac      	ldr	r4, [r5, #8]
 800427e:	e7d0      	b.n	8004222 <__swbuf_r+0x1a>
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <__swbuf_r+0xa0>)
 8004282:	429c      	cmp	r4, r3
 8004284:	bf08      	it	eq
 8004286:	68ec      	ldreq	r4, [r5, #12]
 8004288:	e7cb      	b.n	8004222 <__swbuf_r+0x1a>
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	f000 f81f 	bl	80042d0 <__swsetup_r>
 8004292:	2800      	cmp	r0, #0
 8004294:	d0cc      	beq.n	8004230 <__swbuf_r+0x28>
 8004296:	f04f 37ff 	mov.w	r7, #4294967295
 800429a:	4638      	mov	r0, r7
 800429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429e:	bf00      	nop
 80042a0:	080052f4 	.word	0x080052f4
 80042a4:	08005314 	.word	0x08005314
 80042a8:	080052d4 	.word	0x080052d4

080042ac <_write_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	2200      	movs	r2, #0
 80042b6:	4c05      	ldr	r4, [pc, #20]	; (80042cc <_write_r+0x20>)
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f7fb ff83 	bl	80001c6 <_write>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_write_r+0x1e>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_write_r+0x1e>
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	20002918 	.word	0x20002918

080042d0 <__swsetup_r>:
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <__swsetup_r+0xcc>)
 80042d2:	b570      	push	{r4, r5, r6, lr}
 80042d4:	681d      	ldr	r5, [r3, #0]
 80042d6:	4606      	mov	r6, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	b125      	cbz	r5, 80042e6 <__swsetup_r+0x16>
 80042dc:	69ab      	ldr	r3, [r5, #24]
 80042de:	b913      	cbnz	r3, 80042e6 <__swsetup_r+0x16>
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f965 	bl	80045b0 <__sinit>
 80042e6:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <__swsetup_r+0xd0>)
 80042e8:	429c      	cmp	r4, r3
 80042ea:	d10f      	bne.n	800430c <__swsetup_r+0x3c>
 80042ec:	686c      	ldr	r4, [r5, #4]
 80042ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	0715      	lsls	r5, r2, #28
 80042f6:	d42c      	bmi.n	8004352 <__swsetup_r+0x82>
 80042f8:	06d0      	lsls	r0, r2, #27
 80042fa:	d411      	bmi.n	8004320 <__swsetup_r+0x50>
 80042fc:	2209      	movs	r2, #9
 80042fe:	6032      	str	r2, [r6, #0]
 8004300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <__swsetup_r+0xd4>)
 800430e:	429c      	cmp	r4, r3
 8004310:	d101      	bne.n	8004316 <__swsetup_r+0x46>
 8004312:	68ac      	ldr	r4, [r5, #8]
 8004314:	e7eb      	b.n	80042ee <__swsetup_r+0x1e>
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <__swsetup_r+0xd8>)
 8004318:	429c      	cmp	r4, r3
 800431a:	bf08      	it	eq
 800431c:	68ec      	ldreq	r4, [r5, #12]
 800431e:	e7e6      	b.n	80042ee <__swsetup_r+0x1e>
 8004320:	0751      	lsls	r1, r2, #29
 8004322:	d512      	bpl.n	800434a <__swsetup_r+0x7a>
 8004324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004326:	b141      	cbz	r1, 800433a <__swsetup_r+0x6a>
 8004328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800432c:	4299      	cmp	r1, r3
 800432e:	d002      	beq.n	8004336 <__swsetup_r+0x66>
 8004330:	4630      	mov	r0, r6
 8004332:	f000 fa53 	bl	80047dc <_free_r>
 8004336:	2300      	movs	r3, #0
 8004338:	6363      	str	r3, [r4, #52]	; 0x34
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f043 0308 	orr.w	r3, r3, #8
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	b94b      	cbnz	r3, 800436a <__swsetup_r+0x9a>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d003      	beq.n	800436a <__swsetup_r+0x9a>
 8004362:	4621      	mov	r1, r4
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f9e7 	bl	8004738 <__smakebuf_r>
 800436a:	89a2      	ldrh	r2, [r4, #12]
 800436c:	f012 0301 	ands.w	r3, r2, #1
 8004370:	d00c      	beq.n	800438c <__swsetup_r+0xbc>
 8004372:	2300      	movs	r3, #0
 8004374:	60a3      	str	r3, [r4, #8]
 8004376:	6963      	ldr	r3, [r4, #20]
 8004378:	425b      	negs	r3, r3
 800437a:	61a3      	str	r3, [r4, #24]
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	b953      	cbnz	r3, 8004396 <__swsetup_r+0xc6>
 8004380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004384:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004388:	d1ba      	bne.n	8004300 <__swsetup_r+0x30>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	0792      	lsls	r2, r2, #30
 800438e:	bf58      	it	pl
 8004390:	6963      	ldrpl	r3, [r4, #20]
 8004392:	60a3      	str	r3, [r4, #8]
 8004394:	e7f2      	b.n	800437c <__swsetup_r+0xac>
 8004396:	2000      	movs	r0, #0
 8004398:	e7f7      	b.n	800438a <__swsetup_r+0xba>
 800439a:	bf00      	nop
 800439c:	2000000c 	.word	0x2000000c
 80043a0:	080052f4 	.word	0x080052f4
 80043a4:	08005314 	.word	0x08005314
 80043a8:	080052d4 	.word	0x080052d4

080043ac <_close_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	2300      	movs	r3, #0
 80043b0:	4c05      	ldr	r4, [pc, #20]	; (80043c8 <_close_r+0x1c>)
 80043b2:	4605      	mov	r5, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	f7fb ff2e 	bl	8000218 <_close>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_close_r+0x1a>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_close_r+0x1a>
 80043c4:	602b      	str	r3, [r5, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	20002918 	.word	0x20002918

080043cc <__sflush_r>:
 80043cc:	898a      	ldrh	r2, [r1, #12]
 80043ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	4605      	mov	r5, r0
 80043d4:	0710      	lsls	r0, r2, #28
 80043d6:	460c      	mov	r4, r1
 80043d8:	d45a      	bmi.n	8004490 <__sflush_r+0xc4>
 80043da:	684b      	ldr	r3, [r1, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dc05      	bgt.n	80043ec <__sflush_r+0x20>
 80043e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	dc02      	bgt.n	80043ec <__sflush_r+0x20>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	d0f9      	beq.n	80043e6 <__sflush_r+0x1a>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f8:	682f      	ldr	r7, [r5, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	d033      	beq.n	8004466 <__sflush_r+0x9a>
 80043fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	075a      	lsls	r2, r3, #29
 8004404:	d505      	bpl.n	8004412 <__sflush_r+0x46>
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800440c:	b10b      	cbz	r3, 8004412 <__sflush_r+0x46>
 800440e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004410:	1ac0      	subs	r0, r0, r3
 8004412:	2300      	movs	r3, #0
 8004414:	4602      	mov	r2, r0
 8004416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004418:	6a21      	ldr	r1, [r4, #32]
 800441a:	4628      	mov	r0, r5
 800441c:	47b0      	blx	r6
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	d106      	bne.n	8004432 <__sflush_r+0x66>
 8004424:	6829      	ldr	r1, [r5, #0]
 8004426:	291d      	cmp	r1, #29
 8004428:	d84b      	bhi.n	80044c2 <__sflush_r+0xf6>
 800442a:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <__sflush_r+0x10c>)
 800442c:	40ca      	lsrs	r2, r1
 800442e:	07d6      	lsls	r6, r2, #31
 8004430:	d547      	bpl.n	80044c2 <__sflush_r+0xf6>
 8004432:	2200      	movs	r2, #0
 8004434:	6062      	str	r2, [r4, #4]
 8004436:	6922      	ldr	r2, [r4, #16]
 8004438:	04d9      	lsls	r1, r3, #19
 800443a:	6022      	str	r2, [r4, #0]
 800443c:	d504      	bpl.n	8004448 <__sflush_r+0x7c>
 800443e:	1c42      	adds	r2, r0, #1
 8004440:	d101      	bne.n	8004446 <__sflush_r+0x7a>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	b903      	cbnz	r3, 8004448 <__sflush_r+0x7c>
 8004446:	6560      	str	r0, [r4, #84]	; 0x54
 8004448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800444a:	602f      	str	r7, [r5, #0]
 800444c:	2900      	cmp	r1, #0
 800444e:	d0ca      	beq.n	80043e6 <__sflush_r+0x1a>
 8004450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004454:	4299      	cmp	r1, r3
 8004456:	d002      	beq.n	800445e <__sflush_r+0x92>
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f9bf 	bl	80047dc <_free_r>
 800445e:	2000      	movs	r0, #0
 8004460:	6360      	str	r0, [r4, #52]	; 0x34
 8004462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004466:	6a21      	ldr	r1, [r4, #32]
 8004468:	2301      	movs	r3, #1
 800446a:	4628      	mov	r0, r5
 800446c:	47b0      	blx	r6
 800446e:	1c41      	adds	r1, r0, #1
 8004470:	d1c6      	bne.n	8004400 <__sflush_r+0x34>
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0c3      	beq.n	8004400 <__sflush_r+0x34>
 8004478:	2b1d      	cmp	r3, #29
 800447a:	d001      	beq.n	8004480 <__sflush_r+0xb4>
 800447c:	2b16      	cmp	r3, #22
 800447e:	d101      	bne.n	8004484 <__sflush_r+0xb8>
 8004480:	602f      	str	r7, [r5, #0]
 8004482:	e7b0      	b.n	80043e6 <__sflush_r+0x1a>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004490:	690f      	ldr	r7, [r1, #16]
 8004492:	2f00      	cmp	r7, #0
 8004494:	d0a7      	beq.n	80043e6 <__sflush_r+0x1a>
 8004496:	0793      	lsls	r3, r2, #30
 8004498:	bf18      	it	ne
 800449a:	2300      	movne	r3, #0
 800449c:	680e      	ldr	r6, [r1, #0]
 800449e:	bf08      	it	eq
 80044a0:	694b      	ldreq	r3, [r1, #20]
 80044a2:	eba6 0807 	sub.w	r8, r6, r7
 80044a6:	600f      	str	r7, [r1, #0]
 80044a8:	608b      	str	r3, [r1, #8]
 80044aa:	f1b8 0f00 	cmp.w	r8, #0
 80044ae:	dd9a      	ble.n	80043e6 <__sflush_r+0x1a>
 80044b0:	4643      	mov	r3, r8
 80044b2:	463a      	mov	r2, r7
 80044b4:	6a21      	ldr	r1, [r4, #32]
 80044b6:	4628      	mov	r0, r5
 80044b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044ba:	47b0      	blx	r6
 80044bc:	2800      	cmp	r0, #0
 80044be:	dc07      	bgt.n	80044d0 <__sflush_r+0x104>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d0:	4407      	add	r7, r0
 80044d2:	eba8 0800 	sub.w	r8, r8, r0
 80044d6:	e7e8      	b.n	80044aa <__sflush_r+0xde>
 80044d8:	20400001 	.word	0x20400001

080044dc <_fflush_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	690b      	ldr	r3, [r1, #16]
 80044e0:	4605      	mov	r5, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	b1db      	cbz	r3, 800451e <_fflush_r+0x42>
 80044e6:	b118      	cbz	r0, 80044f0 <_fflush_r+0x14>
 80044e8:	6983      	ldr	r3, [r0, #24]
 80044ea:	b90b      	cbnz	r3, 80044f0 <_fflush_r+0x14>
 80044ec:	f000 f860 	bl	80045b0 <__sinit>
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <_fflush_r+0x48>)
 80044f2:	429c      	cmp	r4, r3
 80044f4:	d109      	bne.n	800450a <_fflush_r+0x2e>
 80044f6:	686c      	ldr	r4, [r5, #4]
 80044f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fc:	b17b      	cbz	r3, 800451e <_fflush_r+0x42>
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004506:	f7ff bf61 	b.w	80043cc <__sflush_r>
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <_fflush_r+0x4c>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d101      	bne.n	8004514 <_fflush_r+0x38>
 8004510:	68ac      	ldr	r4, [r5, #8]
 8004512:	e7f1      	b.n	80044f8 <_fflush_r+0x1c>
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_fflush_r+0x50>)
 8004516:	429c      	cmp	r4, r3
 8004518:	bf08      	it	eq
 800451a:	68ec      	ldreq	r4, [r5, #12]
 800451c:	e7ec      	b.n	80044f8 <_fflush_r+0x1c>
 800451e:	2000      	movs	r0, #0
 8004520:	bd38      	pop	{r3, r4, r5, pc}
 8004522:	bf00      	nop
 8004524:	080052f4 	.word	0x080052f4
 8004528:	08005314 	.word	0x08005314
 800452c:	080052d4 	.word	0x080052d4

08004530 <_cleanup_r>:
 8004530:	4901      	ldr	r1, [pc, #4]	; (8004538 <_cleanup_r+0x8>)
 8004532:	f000 b8a9 	b.w	8004688 <_fwalk_reent>
 8004536:	bf00      	nop
 8004538:	080044dd 	.word	0x080044dd

0800453c <std.isra.0>:
 800453c:	2300      	movs	r3, #0
 800453e:	b510      	push	{r4, lr}
 8004540:	4604      	mov	r4, r0
 8004542:	6003      	str	r3, [r0, #0]
 8004544:	6043      	str	r3, [r0, #4]
 8004546:	6083      	str	r3, [r0, #8]
 8004548:	8181      	strh	r1, [r0, #12]
 800454a:	6643      	str	r3, [r0, #100]	; 0x64
 800454c:	81c2      	strh	r2, [r0, #14]
 800454e:	6103      	str	r3, [r0, #16]
 8004550:	6143      	str	r3, [r0, #20]
 8004552:	6183      	str	r3, [r0, #24]
 8004554:	4619      	mov	r1, r3
 8004556:	2208      	movs	r2, #8
 8004558:	305c      	adds	r0, #92	; 0x5c
 800455a:	f7ff fc74 	bl	8003e46 <memset>
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <std.isra.0+0x38>)
 8004560:	6224      	str	r4, [r4, #32]
 8004562:	6263      	str	r3, [r4, #36]	; 0x24
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <std.isra.0+0x3c>)
 8004566:	62a3      	str	r3, [r4, #40]	; 0x28
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <std.isra.0+0x40>)
 800456a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <std.isra.0+0x44>)
 800456e:	6323      	str	r3, [r4, #48]	; 0x30
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop
 8004574:	08003f69 	.word	0x08003f69
 8004578:	08003f8b 	.word	0x08003f8b
 800457c:	08003fc3 	.word	0x08003fc3
 8004580:	08003fe7 	.word	0x08003fe7

08004584 <__sfmoreglue>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	2568      	movs	r5, #104	; 0x68
 8004588:	1e4a      	subs	r2, r1, #1
 800458a:	4355      	muls	r5, r2
 800458c:	460e      	mov	r6, r1
 800458e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004592:	f000 f96f 	bl	8004874 <_malloc_r>
 8004596:	4604      	mov	r4, r0
 8004598:	b140      	cbz	r0, 80045ac <__sfmoreglue+0x28>
 800459a:	2100      	movs	r1, #0
 800459c:	e880 0042 	stmia.w	r0, {r1, r6}
 80045a0:	300c      	adds	r0, #12
 80045a2:	60a0      	str	r0, [r4, #8]
 80045a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045a8:	f7ff fc4d 	bl	8003e46 <memset>
 80045ac:	4620      	mov	r0, r4
 80045ae:	bd70      	pop	{r4, r5, r6, pc}

080045b0 <__sinit>:
 80045b0:	6983      	ldr	r3, [r0, #24]
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	bb33      	cbnz	r3, 8004606 <__sinit+0x56>
 80045b8:	6483      	str	r3, [r0, #72]	; 0x48
 80045ba:	64c3      	str	r3, [r0, #76]	; 0x4c
 80045bc:	6503      	str	r3, [r0, #80]	; 0x50
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <__sinit+0x58>)
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <__sinit+0x5c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6282      	str	r2, [r0, #40]	; 0x28
 80045c6:	4298      	cmp	r0, r3
 80045c8:	bf04      	itt	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	6183      	streq	r3, [r0, #24]
 80045ce:	f000 f81f 	bl	8004610 <__sfp>
 80045d2:	6060      	str	r0, [r4, #4]
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 f81b 	bl	8004610 <__sfp>
 80045da:	60a0      	str	r0, [r4, #8]
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 f817 	bl	8004610 <__sfp>
 80045e2:	2200      	movs	r2, #0
 80045e4:	60e0      	str	r0, [r4, #12]
 80045e6:	2104      	movs	r1, #4
 80045e8:	6860      	ldr	r0, [r4, #4]
 80045ea:	f7ff ffa7 	bl	800453c <std.isra.0>
 80045ee:	2201      	movs	r2, #1
 80045f0:	2109      	movs	r1, #9
 80045f2:	68a0      	ldr	r0, [r4, #8]
 80045f4:	f7ff ffa2 	bl	800453c <std.isra.0>
 80045f8:	2202      	movs	r2, #2
 80045fa:	2112      	movs	r1, #18
 80045fc:	68e0      	ldr	r0, [r4, #12]
 80045fe:	f7ff ff9d 	bl	800453c <std.isra.0>
 8004602:	2301      	movs	r3, #1
 8004604:	61a3      	str	r3, [r4, #24]
 8004606:	bd10      	pop	{r4, pc}
 8004608:	080052d0 	.word	0x080052d0
 800460c:	08004531 	.word	0x08004531

08004610 <__sfp>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <__sfp+0x74>)
 8004614:	4607      	mov	r7, r0
 8004616:	681e      	ldr	r6, [r3, #0]
 8004618:	69b3      	ldr	r3, [r6, #24]
 800461a:	b913      	cbnz	r3, 8004622 <__sfp+0x12>
 800461c:	4630      	mov	r0, r6
 800461e:	f7ff ffc7 	bl	80045b0 <__sinit>
 8004622:	3648      	adds	r6, #72	; 0x48
 8004624:	68b4      	ldr	r4, [r6, #8]
 8004626:	6873      	ldr	r3, [r6, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	d503      	bpl.n	8004634 <__sfp+0x24>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	b133      	cbz	r3, 800463e <__sfp+0x2e>
 8004630:	6836      	ldr	r6, [r6, #0]
 8004632:	e7f7      	b.n	8004624 <__sfp+0x14>
 8004634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004638:	b16d      	cbz	r5, 8004656 <__sfp+0x46>
 800463a:	3468      	adds	r4, #104	; 0x68
 800463c:	e7f4      	b.n	8004628 <__sfp+0x18>
 800463e:	2104      	movs	r1, #4
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ff9f 	bl	8004584 <__sfmoreglue>
 8004646:	6030      	str	r0, [r6, #0]
 8004648:	2800      	cmp	r0, #0
 800464a:	d1f1      	bne.n	8004630 <__sfp+0x20>
 800464c:	230c      	movs	r3, #12
 800464e:	4604      	mov	r4, r0
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4620      	mov	r0, r4
 8004654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800465a:	81e3      	strh	r3, [r4, #14]
 800465c:	2301      	movs	r3, #1
 800465e:	6665      	str	r5, [r4, #100]	; 0x64
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	6025      	str	r5, [r4, #0]
 8004664:	60a5      	str	r5, [r4, #8]
 8004666:	6065      	str	r5, [r4, #4]
 8004668:	6125      	str	r5, [r4, #16]
 800466a:	6165      	str	r5, [r4, #20]
 800466c:	61a5      	str	r5, [r4, #24]
 800466e:	2208      	movs	r2, #8
 8004670:	4629      	mov	r1, r5
 8004672:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004676:	f7ff fbe6 	bl	8003e46 <memset>
 800467a:	6365      	str	r5, [r4, #52]	; 0x34
 800467c:	63a5      	str	r5, [r4, #56]	; 0x38
 800467e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004680:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004682:	e7e6      	b.n	8004652 <__sfp+0x42>
 8004684:	080052d0 	.word	0x080052d0

08004688 <_fwalk_reent>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	4680      	mov	r8, r0
 800468e:	4689      	mov	r9, r1
 8004690:	2600      	movs	r6, #0
 8004692:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004696:	b914      	cbnz	r4, 800469e <_fwalk_reent+0x16>
 8004698:	4630      	mov	r0, r6
 800469a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469e:	68a5      	ldr	r5, [r4, #8]
 80046a0:	6867      	ldr	r7, [r4, #4]
 80046a2:	3f01      	subs	r7, #1
 80046a4:	d501      	bpl.n	80046aa <_fwalk_reent+0x22>
 80046a6:	6824      	ldr	r4, [r4, #0]
 80046a8:	e7f5      	b.n	8004696 <_fwalk_reent+0xe>
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d907      	bls.n	80046c0 <_fwalk_reent+0x38>
 80046b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b4:	3301      	adds	r3, #1
 80046b6:	d003      	beq.n	80046c0 <_fwalk_reent+0x38>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4640      	mov	r0, r8
 80046bc:	47c8      	blx	r9
 80046be:	4306      	orrs	r6, r0
 80046c0:	3568      	adds	r5, #104	; 0x68
 80046c2:	e7ee      	b.n	80046a2 <_fwalk_reent+0x1a>

080046c4 <__locale_ctype_ptr_l>:
 80046c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80046c8:	4770      	bx	lr
	...

080046cc <_lseek_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4605      	mov	r5, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	2200      	movs	r2, #0
 80046d6:	4c05      	ldr	r4, [pc, #20]	; (80046ec <_lseek_r+0x20>)
 80046d8:	6022      	str	r2, [r4, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fb fda6 	bl	800022c <_lseek>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_lseek_r+0x1e>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_lseek_r+0x1e>
 80046e8:	602b      	str	r3, [r5, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20002918 	.word	0x20002918

080046f0 <__swhatbuf_r>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f8:	b090      	sub	sp, #64	; 0x40
 80046fa:	2900      	cmp	r1, #0
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	da07      	bge.n	8004712 <__swhatbuf_r+0x22>
 8004702:	2300      	movs	r3, #0
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	89b3      	ldrh	r3, [r6, #12]
 8004708:	061a      	lsls	r2, r3, #24
 800470a:	d410      	bmi.n	800472e <__swhatbuf_r+0x3e>
 800470c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004710:	e00e      	b.n	8004730 <__swhatbuf_r+0x40>
 8004712:	aa01      	add	r2, sp, #4
 8004714:	f000 fc24 	bl	8004f60 <_fstat_r>
 8004718:	2800      	cmp	r0, #0
 800471a:	dbf2      	blt.n	8004702 <__swhatbuf_r+0x12>
 800471c:	9a02      	ldr	r2, [sp, #8]
 800471e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004722:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004726:	425a      	negs	r2, r3
 8004728:	415a      	adcs	r2, r3
 800472a:	602a      	str	r2, [r5, #0]
 800472c:	e7ee      	b.n	800470c <__swhatbuf_r+0x1c>
 800472e:	2340      	movs	r3, #64	; 0x40
 8004730:	2000      	movs	r0, #0
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	b010      	add	sp, #64	; 0x40
 8004736:	bd70      	pop	{r4, r5, r6, pc}

08004738 <__smakebuf_r>:
 8004738:	898b      	ldrh	r3, [r1, #12]
 800473a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800473c:	079d      	lsls	r5, r3, #30
 800473e:	4606      	mov	r6, r0
 8004740:	460c      	mov	r4, r1
 8004742:	d507      	bpl.n	8004754 <__smakebuf_r+0x1c>
 8004744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	2301      	movs	r3, #1
 800474e:	6163      	str	r3, [r4, #20]
 8004750:	b002      	add	sp, #8
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	ab01      	add	r3, sp, #4
 8004756:	466a      	mov	r2, sp
 8004758:	f7ff ffca 	bl	80046f0 <__swhatbuf_r>
 800475c:	9900      	ldr	r1, [sp, #0]
 800475e:	4605      	mov	r5, r0
 8004760:	4630      	mov	r0, r6
 8004762:	f000 f887 	bl	8004874 <_malloc_r>
 8004766:	b948      	cbnz	r0, 800477c <__smakebuf_r+0x44>
 8004768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800476c:	059a      	lsls	r2, r3, #22
 800476e:	d4ef      	bmi.n	8004750 <__smakebuf_r+0x18>
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	f043 0302 	orr.w	r3, r3, #2
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	e7e3      	b.n	8004744 <__smakebuf_r+0xc>
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <__smakebuf_r+0x7c>)
 800477e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	6020      	str	r0, [r4, #0]
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	9b00      	ldr	r3, [sp, #0]
 800478c:	6120      	str	r0, [r4, #16]
 800478e:	6163      	str	r3, [r4, #20]
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	b15b      	cbz	r3, 80047ac <__smakebuf_r+0x74>
 8004794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004798:	4630      	mov	r0, r6
 800479a:	f000 fbf3 	bl	8004f84 <_isatty_r>
 800479e:	b128      	cbz	r0, 80047ac <__smakebuf_r+0x74>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	431d      	orrs	r5, r3
 80047b0:	81a5      	strh	r5, [r4, #12]
 80047b2:	e7cd      	b.n	8004750 <__smakebuf_r+0x18>
 80047b4:	08004531 	.word	0x08004531

080047b8 <__ascii_mbtowc>:
 80047b8:	b082      	sub	sp, #8
 80047ba:	b901      	cbnz	r1, 80047be <__ascii_mbtowc+0x6>
 80047bc:	a901      	add	r1, sp, #4
 80047be:	b142      	cbz	r2, 80047d2 <__ascii_mbtowc+0x1a>
 80047c0:	b14b      	cbz	r3, 80047d6 <__ascii_mbtowc+0x1e>
 80047c2:	7813      	ldrb	r3, [r2, #0]
 80047c4:	600b      	str	r3, [r1, #0]
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	1c10      	adds	r0, r2, #0
 80047ca:	bf18      	it	ne
 80047cc:	2001      	movne	r0, #1
 80047ce:	b002      	add	sp, #8
 80047d0:	4770      	bx	lr
 80047d2:	4610      	mov	r0, r2
 80047d4:	e7fb      	b.n	80047ce <__ascii_mbtowc+0x16>
 80047d6:	f06f 0001 	mvn.w	r0, #1
 80047da:	e7f8      	b.n	80047ce <__ascii_mbtowc+0x16>

080047dc <_free_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4605      	mov	r5, r0
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d043      	beq.n	800486c <_free_r+0x90>
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f0c      	subs	r4, r1, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfb8      	it	lt
 80047ee:	18e4      	addlt	r4, r4, r3
 80047f0:	f000 fc00 	bl	8004ff4 <__malloc_lock>
 80047f4:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <_free_r+0x94>)
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	4610      	mov	r0, r2
 80047fa:	b933      	cbnz	r3, 800480a <_free_r+0x2e>
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6014      	str	r4, [r2, #0]
 8004800:	4628      	mov	r0, r5
 8004802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004806:	f000 bbf6 	b.w	8004ff6 <__malloc_unlock>
 800480a:	42a3      	cmp	r3, r4
 800480c:	d90b      	bls.n	8004826 <_free_r+0x4a>
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	1862      	adds	r2, r4, r1
 8004812:	4293      	cmp	r3, r2
 8004814:	bf01      	itttt	eq
 8004816:	681a      	ldreq	r2, [r3, #0]
 8004818:	685b      	ldreq	r3, [r3, #4]
 800481a:	1852      	addeq	r2, r2, r1
 800481c:	6022      	streq	r2, [r4, #0]
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	6004      	str	r4, [r0, #0]
 8004822:	e7ed      	b.n	8004800 <_free_r+0x24>
 8004824:	4613      	mov	r3, r2
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	b10a      	cbz	r2, 800482e <_free_r+0x52>
 800482a:	42a2      	cmp	r2, r4
 800482c:	d9fa      	bls.n	8004824 <_free_r+0x48>
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	1858      	adds	r0, r3, r1
 8004832:	42a0      	cmp	r0, r4
 8004834:	d10b      	bne.n	800484e <_free_r+0x72>
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	4401      	add	r1, r0
 800483a:	1858      	adds	r0, r3, r1
 800483c:	4282      	cmp	r2, r0
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	d1de      	bne.n	8004800 <_free_r+0x24>
 8004842:	6810      	ldr	r0, [r2, #0]
 8004844:	6852      	ldr	r2, [r2, #4]
 8004846:	4401      	add	r1, r0
 8004848:	6019      	str	r1, [r3, #0]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e7d8      	b.n	8004800 <_free_r+0x24>
 800484e:	d902      	bls.n	8004856 <_free_r+0x7a>
 8004850:	230c      	movs	r3, #12
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	e7d4      	b.n	8004800 <_free_r+0x24>
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	1821      	adds	r1, r4, r0
 800485a:	428a      	cmp	r2, r1
 800485c:	bf01      	itttt	eq
 800485e:	6811      	ldreq	r1, [r2, #0]
 8004860:	6852      	ldreq	r2, [r2, #4]
 8004862:	1809      	addeq	r1, r1, r0
 8004864:	6021      	streq	r1, [r4, #0]
 8004866:	6062      	str	r2, [r4, #4]
 8004868:	605c      	str	r4, [r3, #4]
 800486a:	e7c9      	b.n	8004800 <_free_r+0x24>
 800486c:	bd38      	pop	{r3, r4, r5, pc}
 800486e:	bf00      	nop
 8004870:	20002348 	.word	0x20002348

08004874 <_malloc_r>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	1ccd      	adds	r5, r1, #3
 8004878:	f025 0503 	bic.w	r5, r5, #3
 800487c:	3508      	adds	r5, #8
 800487e:	2d0c      	cmp	r5, #12
 8004880:	bf38      	it	cc
 8004882:	250c      	movcc	r5, #12
 8004884:	2d00      	cmp	r5, #0
 8004886:	4606      	mov	r6, r0
 8004888:	db01      	blt.n	800488e <_malloc_r+0x1a>
 800488a:	42a9      	cmp	r1, r5
 800488c:	d903      	bls.n	8004896 <_malloc_r+0x22>
 800488e:	230c      	movs	r3, #12
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	2000      	movs	r0, #0
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	f000 fbad 	bl	8004ff4 <__malloc_lock>
 800489a:	4a23      	ldr	r2, [pc, #140]	; (8004928 <_malloc_r+0xb4>)
 800489c:	6814      	ldr	r4, [r2, #0]
 800489e:	4621      	mov	r1, r4
 80048a0:	b991      	cbnz	r1, 80048c8 <_malloc_r+0x54>
 80048a2:	4c22      	ldr	r4, [pc, #136]	; (800492c <_malloc_r+0xb8>)
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	b91b      	cbnz	r3, 80048b0 <_malloc_r+0x3c>
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 fb3b 	bl	8004f24 <_sbrk_r>
 80048ae:	6020      	str	r0, [r4, #0]
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 fb36 	bl	8004f24 <_sbrk_r>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d126      	bne.n	800490a <_malloc_r+0x96>
 80048bc:	230c      	movs	r3, #12
 80048be:	4630      	mov	r0, r6
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	f000 fb98 	bl	8004ff6 <__malloc_unlock>
 80048c6:	e7e4      	b.n	8004892 <_malloc_r+0x1e>
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	1b5b      	subs	r3, r3, r5
 80048cc:	d41a      	bmi.n	8004904 <_malloc_r+0x90>
 80048ce:	2b0b      	cmp	r3, #11
 80048d0:	d90f      	bls.n	80048f2 <_malloc_r+0x7e>
 80048d2:	600b      	str	r3, [r1, #0]
 80048d4:	18cc      	adds	r4, r1, r3
 80048d6:	50cd      	str	r5, [r1, r3]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 fb8c 	bl	8004ff6 <__malloc_unlock>
 80048de:	f104 000b 	add.w	r0, r4, #11
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	f020 0007 	bic.w	r0, r0, #7
 80048e8:	1ac3      	subs	r3, r0, r3
 80048ea:	d01b      	beq.n	8004924 <_malloc_r+0xb0>
 80048ec:	425a      	negs	r2, r3
 80048ee:	50e2      	str	r2, [r4, r3]
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
 80048f2:	428c      	cmp	r4, r1
 80048f4:	bf0b      	itete	eq
 80048f6:	6863      	ldreq	r3, [r4, #4]
 80048f8:	684b      	ldrne	r3, [r1, #4]
 80048fa:	6013      	streq	r3, [r2, #0]
 80048fc:	6063      	strne	r3, [r4, #4]
 80048fe:	bf18      	it	ne
 8004900:	460c      	movne	r4, r1
 8004902:	e7e9      	b.n	80048d8 <_malloc_r+0x64>
 8004904:	460c      	mov	r4, r1
 8004906:	6849      	ldr	r1, [r1, #4]
 8004908:	e7ca      	b.n	80048a0 <_malloc_r+0x2c>
 800490a:	1cc4      	adds	r4, r0, #3
 800490c:	f024 0403 	bic.w	r4, r4, #3
 8004910:	42a0      	cmp	r0, r4
 8004912:	d005      	beq.n	8004920 <_malloc_r+0xac>
 8004914:	1a21      	subs	r1, r4, r0
 8004916:	4630      	mov	r0, r6
 8004918:	f000 fb04 	bl	8004f24 <_sbrk_r>
 800491c:	3001      	adds	r0, #1
 800491e:	d0cd      	beq.n	80048bc <_malloc_r+0x48>
 8004920:	6025      	str	r5, [r4, #0]
 8004922:	e7d9      	b.n	80048d8 <_malloc_r+0x64>
 8004924:	bd70      	pop	{r4, r5, r6, pc}
 8004926:	bf00      	nop
 8004928:	20002348 	.word	0x20002348
 800492c:	2000234c 	.word	0x2000234c

08004930 <__ssputs_r>:
 8004930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	688e      	ldr	r6, [r1, #8]
 8004936:	4682      	mov	sl, r0
 8004938:	429e      	cmp	r6, r3
 800493a:	460c      	mov	r4, r1
 800493c:	4691      	mov	r9, r2
 800493e:	4698      	mov	r8, r3
 8004940:	d835      	bhi.n	80049ae <__ssputs_r+0x7e>
 8004942:	898a      	ldrh	r2, [r1, #12]
 8004944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004948:	d031      	beq.n	80049ae <__ssputs_r+0x7e>
 800494a:	2302      	movs	r3, #2
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	6909      	ldr	r1, [r1, #16]
 8004950:	1a6f      	subs	r7, r5, r1
 8004952:	6965      	ldr	r5, [r4, #20]
 8004954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004958:	fb95 f5f3 	sdiv	r5, r5, r3
 800495c:	f108 0301 	add.w	r3, r8, #1
 8004960:	443b      	add	r3, r7
 8004962:	429d      	cmp	r5, r3
 8004964:	bf38      	it	cc
 8004966:	461d      	movcc	r5, r3
 8004968:	0553      	lsls	r3, r2, #21
 800496a:	d531      	bpl.n	80049d0 <__ssputs_r+0xa0>
 800496c:	4629      	mov	r1, r5
 800496e:	f7ff ff81 	bl	8004874 <_malloc_r>
 8004972:	4606      	mov	r6, r0
 8004974:	b950      	cbnz	r0, 800498c <__ssputs_r+0x5c>
 8004976:	230c      	movs	r3, #12
 8004978:	f8ca 3000 	str.w	r3, [sl]
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f04f 30ff 	mov.w	r0, #4294967295
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498c:	463a      	mov	r2, r7
 800498e:	6921      	ldr	r1, [r4, #16]
 8004990:	f7ff fa4e 	bl	8003e30 <memcpy>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	6126      	str	r6, [r4, #16]
 80049a2:	443e      	add	r6, r7
 80049a4:	6026      	str	r6, [r4, #0]
 80049a6:	4646      	mov	r6, r8
 80049a8:	6165      	str	r5, [r4, #20]
 80049aa:	1bed      	subs	r5, r5, r7
 80049ac:	60a5      	str	r5, [r4, #8]
 80049ae:	4546      	cmp	r6, r8
 80049b0:	bf28      	it	cs
 80049b2:	4646      	movcs	r6, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	4632      	mov	r2, r6
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	f000 fb01 	bl	8004fc0 <memmove>
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	2000      	movs	r0, #0
 80049c2:	1b9b      	subs	r3, r3, r6
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	441e      	add	r6, r3
 80049ca:	6026      	str	r6, [r4, #0]
 80049cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d0:	462a      	mov	r2, r5
 80049d2:	f000 fb11 	bl	8004ff8 <_realloc_r>
 80049d6:	4606      	mov	r6, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1e1      	bne.n	80049a0 <__ssputs_r+0x70>
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	4650      	mov	r0, sl
 80049e0:	f7ff fefc 	bl	80047dc <_free_r>
 80049e4:	e7c7      	b.n	8004976 <__ssputs_r+0x46>
	...

080049e8 <_svfiprintf_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	b09d      	sub	sp, #116	; 0x74
 80049ee:	9303      	str	r3, [sp, #12]
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	4680      	mov	r8, r0
 80049f4:	061c      	lsls	r4, r3, #24
 80049f6:	460d      	mov	r5, r1
 80049f8:	4616      	mov	r6, r2
 80049fa:	d50f      	bpl.n	8004a1c <_svfiprintf_r+0x34>
 80049fc:	690b      	ldr	r3, [r1, #16]
 80049fe:	b96b      	cbnz	r3, 8004a1c <_svfiprintf_r+0x34>
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	f7ff ff37 	bl	8004874 <_malloc_r>
 8004a06:	6028      	str	r0, [r5, #0]
 8004a08:	6128      	str	r0, [r5, #16]
 8004a0a:	b928      	cbnz	r0, 8004a18 <_svfiprintf_r+0x30>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	f8c8 3000 	str.w	r3, [r8]
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	e0c4      	b.n	8004ba2 <_svfiprintf_r+0x1ba>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	616b      	str	r3, [r5, #20]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	2320      	movs	r3, #32
 8004a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a26:	2330      	movs	r3, #48	; 0x30
 8004a28:	f04f 0b01 	mov.w	fp, #1
 8004a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a30:	4637      	mov	r7, r6
 8004a32:	463c      	mov	r4, r7
 8004a34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d13c      	bne.n	8004ab6 <_svfiprintf_r+0xce>
 8004a3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a40:	d00b      	beq.n	8004a5a <_svfiprintf_r+0x72>
 8004a42:	4653      	mov	r3, sl
 8004a44:	4632      	mov	r2, r6
 8004a46:	4629      	mov	r1, r5
 8004a48:	4640      	mov	r0, r8
 8004a4a:	f7ff ff71 	bl	8004930 <__ssputs_r>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f000 80a2 	beq.w	8004b98 <_svfiprintf_r+0x1b0>
 8004a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a56:	4453      	add	r3, sl
 8004a58:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5a:	783b      	ldrb	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 809b 	beq.w	8004b98 <_svfiprintf_r+0x1b0>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	9205      	str	r2, [sp, #20]
 8004a6e:	9306      	str	r3, [sp, #24]
 8004a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a74:	931a      	str	r3, [sp, #104]	; 0x68
 8004a76:	2205      	movs	r2, #5
 8004a78:	7821      	ldrb	r1, [r4, #0]
 8004a7a:	4850      	ldr	r0, [pc, #320]	; (8004bbc <_svfiprintf_r+0x1d4>)
 8004a7c:	f000 fa92 	bl	8004fa4 <memchr>
 8004a80:	1c67      	adds	r7, r4, #1
 8004a82:	9b04      	ldr	r3, [sp, #16]
 8004a84:	b9d8      	cbnz	r0, 8004abe <_svfiprintf_r+0xd6>
 8004a86:	06d9      	lsls	r1, r3, #27
 8004a88:	bf44      	itt	mi
 8004a8a:	2220      	movmi	r2, #32
 8004a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a90:	071a      	lsls	r2, r3, #28
 8004a92:	bf44      	itt	mi
 8004a94:	222b      	movmi	r2, #43	; 0x2b
 8004a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a9a:	7822      	ldrb	r2, [r4, #0]
 8004a9c:	2a2a      	cmp	r2, #42	; 0x2a
 8004a9e:	d016      	beq.n	8004ace <_svfiprintf_r+0xe6>
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	200a      	movs	r0, #10
 8004aa4:	9a07      	ldr	r2, [sp, #28]
 8004aa6:	4627      	mov	r7, r4
 8004aa8:	783b      	ldrb	r3, [r7, #0]
 8004aaa:	3401      	adds	r4, #1
 8004aac:	3b30      	subs	r3, #48	; 0x30
 8004aae:	2b09      	cmp	r3, #9
 8004ab0:	d950      	bls.n	8004b54 <_svfiprintf_r+0x16c>
 8004ab2:	b1c9      	cbz	r1, 8004ae8 <_svfiprintf_r+0x100>
 8004ab4:	e011      	b.n	8004ada <_svfiprintf_r+0xf2>
 8004ab6:	2b25      	cmp	r3, #37	; 0x25
 8004ab8:	d0c0      	beq.n	8004a3c <_svfiprintf_r+0x54>
 8004aba:	4627      	mov	r7, r4
 8004abc:	e7b9      	b.n	8004a32 <_svfiprintf_r+0x4a>
 8004abe:	4a3f      	ldr	r2, [pc, #252]	; (8004bbc <_svfiprintf_r+0x1d4>)
 8004ac0:	463c      	mov	r4, r7
 8004ac2:	1a80      	subs	r0, r0, r2
 8004ac4:	fa0b f000 	lsl.w	r0, fp, r0
 8004ac8:	4318      	orrs	r0, r3
 8004aca:	9004      	str	r0, [sp, #16]
 8004acc:	e7d3      	b.n	8004a76 <_svfiprintf_r+0x8e>
 8004ace:	9a03      	ldr	r2, [sp, #12]
 8004ad0:	1d11      	adds	r1, r2, #4
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	9103      	str	r1, [sp, #12]
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	db01      	blt.n	8004ade <_svfiprintf_r+0xf6>
 8004ada:	9207      	str	r2, [sp, #28]
 8004adc:	e004      	b.n	8004ae8 <_svfiprintf_r+0x100>
 8004ade:	4252      	negs	r2, r2
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	9207      	str	r2, [sp, #28]
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	783b      	ldrb	r3, [r7, #0]
 8004aea:	2b2e      	cmp	r3, #46	; 0x2e
 8004aec:	d10d      	bne.n	8004b0a <_svfiprintf_r+0x122>
 8004aee:	787b      	ldrb	r3, [r7, #1]
 8004af0:	1c79      	adds	r1, r7, #1
 8004af2:	2b2a      	cmp	r3, #42	; 0x2a
 8004af4:	d132      	bne.n	8004b5c <_svfiprintf_r+0x174>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	3702      	adds	r7, #2
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	4c2d      	ldr	r4, [pc, #180]	; (8004bc0 <_svfiprintf_r+0x1d8>)
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	7839      	ldrb	r1, [r7, #0]
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fa47 	bl	8004fa4 <memchr>
 8004b16:	b138      	cbz	r0, 8004b28 <_svfiprintf_r+0x140>
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	1b00      	subs	r0, r0, r4
 8004b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004b20:	9b04      	ldr	r3, [sp, #16]
 8004b22:	3701      	adds	r7, #1
 8004b24:	4303      	orrs	r3, r0
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	7839      	ldrb	r1, [r7, #0]
 8004b2a:	2206      	movs	r2, #6
 8004b2c:	4825      	ldr	r0, [pc, #148]	; (8004bc4 <_svfiprintf_r+0x1dc>)
 8004b2e:	1c7e      	adds	r6, r7, #1
 8004b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b34:	f000 fa36 	bl	8004fa4 <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d035      	beq.n	8004ba8 <_svfiprintf_r+0x1c0>
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <_svfiprintf_r+0x1e0>)
 8004b3e:	b9fb      	cbnz	r3, 8004b80 <_svfiprintf_r+0x198>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	3308      	adds	r3, #8
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4e:	444b      	add	r3, r9
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	e76d      	b.n	8004a30 <_svfiprintf_r+0x48>
 8004b54:	fb00 3202 	mla	r2, r0, r2, r3
 8004b58:	2101      	movs	r1, #1
 8004b5a:	e7a4      	b.n	8004aa6 <_svfiprintf_r+0xbe>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	240a      	movs	r4, #10
 8004b60:	4618      	mov	r0, r3
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	460f      	mov	r7, r1
 8004b66:	783a      	ldrb	r2, [r7, #0]
 8004b68:	3101      	adds	r1, #1
 8004b6a:	3a30      	subs	r2, #48	; 0x30
 8004b6c:	2a09      	cmp	r2, #9
 8004b6e:	d903      	bls.n	8004b78 <_svfiprintf_r+0x190>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ca      	beq.n	8004b0a <_svfiprintf_r+0x122>
 8004b74:	9005      	str	r0, [sp, #20]
 8004b76:	e7c8      	b.n	8004b0a <_svfiprintf_r+0x122>
 8004b78:	fb04 2000 	mla	r0, r4, r0, r2
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e7f1      	b.n	8004b64 <_svfiprintf_r+0x17c>
 8004b80:	ab03      	add	r3, sp, #12
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	462a      	mov	r2, r5
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <_svfiprintf_r+0x1e4>)
 8004b88:	a904      	add	r1, sp, #16
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	f3af 8000 	nop.w
 8004b90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b94:	4681      	mov	r9, r0
 8004b96:	d1d9      	bne.n	8004b4c <_svfiprintf_r+0x164>
 8004b98:	89ab      	ldrh	r3, [r5, #12]
 8004b9a:	065b      	lsls	r3, r3, #25
 8004b9c:	f53f af39 	bmi.w	8004a12 <_svfiprintf_r+0x2a>
 8004ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba2:	b01d      	add	sp, #116	; 0x74
 8004ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	462a      	mov	r2, r5
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <_svfiprintf_r+0x1e4>)
 8004bb0:	a904      	add	r1, sp, #16
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f000 f884 	bl	8004cc0 <_printf_i>
 8004bb8:	e7ea      	b.n	8004b90 <_svfiprintf_r+0x1a8>
 8004bba:	bf00      	nop
 8004bbc:	0800533e 	.word	0x0800533e
 8004bc0:	08005344 	.word	0x08005344
 8004bc4:	08005348 	.word	0x08005348
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	08004931 	.word	0x08004931

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4691      	mov	r9, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	4606      	mov	r6, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	bfb8      	it	lt
 8004be2:	4613      	movlt	r3, r2
 8004be4:	f8c9 3000 	str.w	r3, [r9]
 8004be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bec:	460c      	mov	r4, r1
 8004bee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf2:	b112      	cbz	r2, 8004bfa <_printf_common+0x2a>
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f8c9 3000 	str.w	r3, [r9]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0699      	lsls	r1, r3, #26
 8004bfe:	bf42      	ittt	mi
 8004c00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c04:	3302      	addmi	r3, #2
 8004c06:	f8c9 3000 	strmi.w	r3, [r9]
 8004c0a:	6825      	ldr	r5, [r4, #0]
 8004c0c:	f015 0506 	ands.w	r5, r5, #6
 8004c10:	d107      	bne.n	8004c22 <_printf_common+0x52>
 8004c12:	f104 0a19 	add.w	sl, r4, #25
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	f8d9 2000 	ldr.w	r2, [r9]
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	429d      	cmp	r5, r3
 8004c20:	db2a      	blt.n	8004c78 <_printf_common+0xa8>
 8004c22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	3300      	adds	r3, #0
 8004c2a:	bf18      	it	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	0692      	lsls	r2, r2, #26
 8004c30:	d42f      	bmi.n	8004c92 <_printf_common+0xc2>
 8004c32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c36:	4639      	mov	r1, r7
 8004c38:	4630      	mov	r0, r6
 8004c3a:	47c0      	blx	r8
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d022      	beq.n	8004c86 <_printf_common+0xb6>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	68e5      	ldr	r5, [r4, #12]
 8004c44:	f003 0306 	and.w	r3, r3, #6
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	bf18      	it	ne
 8004c4c:	2500      	movne	r5, #0
 8004c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c52:	f04f 0900 	mov.w	r9, #0
 8004c56:	bf08      	it	eq
 8004c58:	1aad      	subeq	r5, r5, r2
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	bf08      	it	eq
 8004c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bfc4      	itt	gt
 8004c68:	1a9b      	subgt	r3, r3, r2
 8004c6a:	18ed      	addgt	r5, r5, r3
 8004c6c:	341a      	adds	r4, #26
 8004c6e:	454d      	cmp	r5, r9
 8004c70:	d11b      	bne.n	8004caa <_printf_common+0xda>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d103      	bne.n	8004c8e <_printf_common+0xbe>
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	3501      	adds	r5, #1
 8004c90:	e7c1      	b.n	8004c16 <_printf_common+0x46>
 8004c92:	2030      	movs	r0, #48	; 0x30
 8004c94:	18e1      	adds	r1, r4, r3
 8004c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ca0:	4422      	add	r2, r4
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ca8:	e7c3      	b.n	8004c32 <_printf_common+0x62>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4622      	mov	r2, r4
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d0e6      	beq.n	8004c86 <_printf_common+0xb6>
 8004cb8:	f109 0901 	add.w	r9, r9, #1
 8004cbc:	e7d7      	b.n	8004c6e <_printf_common+0x9e>
	...

08004cc0 <_printf_i>:
 8004cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	4617      	mov	r7, r2
 8004cc6:	7e0a      	ldrb	r2, [r1, #24]
 8004cc8:	b085      	sub	sp, #20
 8004cca:	2a6e      	cmp	r2, #110	; 0x6e
 8004ccc:	4698      	mov	r8, r3
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cd4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004cd8:	f000 80bc 	beq.w	8004e54 <_printf_i+0x194>
 8004cdc:	d81a      	bhi.n	8004d14 <_printf_i+0x54>
 8004cde:	2a63      	cmp	r2, #99	; 0x63
 8004ce0:	d02e      	beq.n	8004d40 <_printf_i+0x80>
 8004ce2:	d80a      	bhi.n	8004cfa <_printf_i+0x3a>
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 80c8 	beq.w	8004e7a <_printf_i+0x1ba>
 8004cea:	2a58      	cmp	r2, #88	; 0x58
 8004cec:	f000 808a 	beq.w	8004e04 <_printf_i+0x144>
 8004cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004cf8:	e02a      	b.n	8004d50 <_printf_i+0x90>
 8004cfa:	2a64      	cmp	r2, #100	; 0x64
 8004cfc:	d001      	beq.n	8004d02 <_printf_i+0x42>
 8004cfe:	2a69      	cmp	r2, #105	; 0x69
 8004d00:	d1f6      	bne.n	8004cf0 <_printf_i+0x30>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d0a:	d023      	beq.n	8004d54 <_printf_i+0x94>
 8004d0c:	1d11      	adds	r1, r2, #4
 8004d0e:	6019      	str	r1, [r3, #0]
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	e027      	b.n	8004d64 <_printf_i+0xa4>
 8004d14:	2a73      	cmp	r2, #115	; 0x73
 8004d16:	f000 80b4 	beq.w	8004e82 <_printf_i+0x1c2>
 8004d1a:	d808      	bhi.n	8004d2e <_printf_i+0x6e>
 8004d1c:	2a6f      	cmp	r2, #111	; 0x6f
 8004d1e:	d02a      	beq.n	8004d76 <_printf_i+0xb6>
 8004d20:	2a70      	cmp	r2, #112	; 0x70
 8004d22:	d1e5      	bne.n	8004cf0 <_printf_i+0x30>
 8004d24:	680a      	ldr	r2, [r1, #0]
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	600a      	str	r2, [r1, #0]
 8004d2c:	e003      	b.n	8004d36 <_printf_i+0x76>
 8004d2e:	2a75      	cmp	r2, #117	; 0x75
 8004d30:	d021      	beq.n	8004d76 <_printf_i+0xb6>
 8004d32:	2a78      	cmp	r2, #120	; 0x78
 8004d34:	d1dc      	bne.n	8004cf0 <_printf_i+0x30>
 8004d36:	2278      	movs	r2, #120	; 0x78
 8004d38:	496f      	ldr	r1, [pc, #444]	; (8004ef8 <_printf_i+0x238>)
 8004d3a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004d3e:	e064      	b.n	8004e0a <_printf_i+0x14a>
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004d46:	1d11      	adds	r1, r2, #4
 8004d48:	6019      	str	r1, [r3, #0]
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a3      	b.n	8004e9c <_printf_i+0x1dc>
 8004d54:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d58:	f102 0104 	add.w	r1, r2, #4
 8004d5c:	6019      	str	r1, [r3, #0]
 8004d5e:	d0d7      	beq.n	8004d10 <_printf_i+0x50>
 8004d60:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da03      	bge.n	8004d70 <_printf_i+0xb0>
 8004d68:	222d      	movs	r2, #45	; 0x2d
 8004d6a:	425b      	negs	r3, r3
 8004d6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d70:	4962      	ldr	r1, [pc, #392]	; (8004efc <_printf_i+0x23c>)
 8004d72:	220a      	movs	r2, #10
 8004d74:	e017      	b.n	8004da6 <_printf_i+0xe6>
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004d7e:	d003      	beq.n	8004d88 <_printf_i+0xc8>
 8004d80:	1d08      	adds	r0, r1, #4
 8004d82:	6018      	str	r0, [r3, #0]
 8004d84:	680b      	ldr	r3, [r1, #0]
 8004d86:	e006      	b.n	8004d96 <_printf_i+0xd6>
 8004d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d8c:	f101 0004 	add.w	r0, r1, #4
 8004d90:	6018      	str	r0, [r3, #0]
 8004d92:	d0f7      	beq.n	8004d84 <_printf_i+0xc4>
 8004d94:	880b      	ldrh	r3, [r1, #0]
 8004d96:	2a6f      	cmp	r2, #111	; 0x6f
 8004d98:	bf14      	ite	ne
 8004d9a:	220a      	movne	r2, #10
 8004d9c:	2208      	moveq	r2, #8
 8004d9e:	4957      	ldr	r1, [pc, #348]	; (8004efc <_printf_i+0x23c>)
 8004da0:	2000      	movs	r0, #0
 8004da2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004da6:	6865      	ldr	r5, [r4, #4]
 8004da8:	2d00      	cmp	r5, #0
 8004daa:	60a5      	str	r5, [r4, #8]
 8004dac:	f2c0 809c 	blt.w	8004ee8 <_printf_i+0x228>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	f020 0004 	bic.w	r0, r0, #4
 8004db6:	6020      	str	r0, [r4, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13f      	bne.n	8004e3c <_printf_i+0x17c>
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	f040 8095 	bne.w	8004eec <_printf_i+0x22c>
 8004dc2:	4675      	mov	r5, lr
 8004dc4:	2a08      	cmp	r2, #8
 8004dc6:	d10b      	bne.n	8004de0 <_printf_i+0x120>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	07da      	lsls	r2, r3, #31
 8004dcc:	d508      	bpl.n	8004de0 <_printf_i+0x120>
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	bfde      	ittt	le
 8004dd6:	2330      	movle	r3, #48	; 0x30
 8004dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004de0:	ebae 0305 	sub.w	r3, lr, r5
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	f8cd 8000 	str.w	r8, [sp]
 8004dea:	463b      	mov	r3, r7
 8004dec:	aa03      	add	r2, sp, #12
 8004dee:	4621      	mov	r1, r4
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff feed 	bl	8004bd0 <_printf_common>
 8004df6:	3001      	adds	r0, #1
 8004df8:	d155      	bne.n	8004ea6 <_printf_i+0x1e6>
 8004dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfe:	b005      	add	sp, #20
 8004e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004e08:	493c      	ldr	r1, [pc, #240]	; (8004efc <_printf_i+0x23c>)
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e12:	f100 0504 	add.w	r5, r0, #4
 8004e16:	601d      	str	r5, [r3, #0]
 8004e18:	d001      	beq.n	8004e1e <_printf_i+0x15e>
 8004e1a:	6803      	ldr	r3, [r0, #0]
 8004e1c:	e002      	b.n	8004e24 <_printf_i+0x164>
 8004e1e:	0655      	lsls	r5, r2, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0x15a>
 8004e22:	8803      	ldrh	r3, [r0, #0]
 8004e24:	07d0      	lsls	r0, r2, #31
 8004e26:	bf44      	itt	mi
 8004e28:	f042 0220 	orrmi.w	r2, r2, #32
 8004e2c:	6022      	strmi	r2, [r4, #0]
 8004e2e:	b91b      	cbnz	r3, 8004e38 <_printf_i+0x178>
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	f022 0220 	bic.w	r2, r2, #32
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	e7b1      	b.n	8004da0 <_printf_i+0xe0>
 8004e3c:	4675      	mov	r5, lr
 8004e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e42:	fb02 3310 	mls	r3, r2, r0, r3
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d1f5      	bne.n	8004e3e <_printf_i+0x17e>
 8004e52:	e7b7      	b.n	8004dc4 <_printf_i+0x104>
 8004e54:	6808      	ldr	r0, [r1, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e5c:	6949      	ldr	r1, [r1, #20]
 8004e5e:	d004      	beq.n	8004e6a <_printf_i+0x1aa>
 8004e60:	1d10      	adds	r0, r2, #4
 8004e62:	6018      	str	r0, [r3, #0]
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	6019      	str	r1, [r3, #0]
 8004e68:	e007      	b.n	8004e7a <_printf_i+0x1ba>
 8004e6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e6e:	f102 0004 	add.w	r0, r2, #4
 8004e72:	6018      	str	r0, [r3, #0]
 8004e74:	6813      	ldr	r3, [r2, #0]
 8004e76:	d0f6      	beq.n	8004e66 <_printf_i+0x1a6>
 8004e78:	8019      	strh	r1, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	4675      	mov	r5, lr
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	e7b1      	b.n	8004de6 <_printf_i+0x126>
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	1d11      	adds	r1, r2, #4
 8004e86:	6019      	str	r1, [r3, #0]
 8004e88:	6815      	ldr	r5, [r2, #0]
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f888 	bl	8004fa4 <memchr>
 8004e94:	b108      	cbz	r0, 8004e9a <_printf_i+0x1da>
 8004e96:	1b40      	subs	r0, r0, r5
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea4:	e79f      	b.n	8004de6 <_printf_i+0x126>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4639      	mov	r1, r7
 8004eac:	4630      	mov	r0, r6
 8004eae:	47c0      	blx	r8
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0a2      	beq.n	8004dfa <_printf_i+0x13a>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	079b      	lsls	r3, r3, #30
 8004eb8:	d507      	bpl.n	8004eca <_printf_i+0x20a>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	f104 0919 	add.w	r9, r4, #25
 8004ec0:	68e3      	ldr	r3, [r4, #12]
 8004ec2:	9a03      	ldr	r2, [sp, #12]
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	db05      	blt.n	8004ed6 <_printf_i+0x216>
 8004eca:	68e0      	ldr	r0, [r4, #12]
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	4298      	cmp	r0, r3
 8004ed0:	bfb8      	it	lt
 8004ed2:	4618      	movlt	r0, r3
 8004ed4:	e793      	b.n	8004dfe <_printf_i+0x13e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	464a      	mov	r2, r9
 8004eda:	4639      	mov	r1, r7
 8004edc:	4630      	mov	r0, r6
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d08a      	beq.n	8004dfa <_printf_i+0x13a>
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	e7eb      	b.n	8004ec0 <_printf_i+0x200>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1a7      	bne.n	8004e3c <_printf_i+0x17c>
 8004eec:	780b      	ldrb	r3, [r1, #0]
 8004eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef6:	e765      	b.n	8004dc4 <_printf_i+0x104>
 8004ef8:	08005360 	.word	0x08005360
 8004efc:	0800534f 	.word	0x0800534f

08004f00 <_read_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4c05      	ldr	r4, [pc, #20]	; (8004f20 <_read_r+0x20>)
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fb f94b 	bl	80001aa <_read>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_read_r+0x1e>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_read_r+0x1e>
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20002918 	.word	0x20002918

08004f24 <_sbrk_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	2300      	movs	r3, #0
 8004f28:	4c05      	ldr	r4, [pc, #20]	; (8004f40 <_sbrk_r+0x1c>)
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	f7fb f958 	bl	80001e4 <_sbrk>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_sbrk_r+0x1a>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_sbrk_r+0x1a>
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20002918 	.word	0x20002918

08004f44 <__ascii_wctomb>:
 8004f44:	b149      	cbz	r1, 8004f5a <__ascii_wctomb+0x16>
 8004f46:	2aff      	cmp	r2, #255	; 0xff
 8004f48:	bf8b      	itete	hi
 8004f4a:	238a      	movhi	r3, #138	; 0x8a
 8004f4c:	700a      	strbls	r2, [r1, #0]
 8004f4e:	6003      	strhi	r3, [r0, #0]
 8004f50:	2001      	movls	r0, #1
 8004f52:	bf88      	it	hi
 8004f54:	f04f 30ff 	movhi.w	r0, #4294967295
 8004f58:	4770      	bx	lr
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4770      	bx	lr
	...

08004f60 <_fstat_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	2300      	movs	r3, #0
 8004f64:	4c06      	ldr	r4, [pc, #24]	; (8004f80 <_fstat_r+0x20>)
 8004f66:	4605      	mov	r5, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	f7fb f956 	bl	800021e <_fstat>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d102      	bne.n	8004f7c <_fstat_r+0x1c>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	b103      	cbz	r3, 8004f7c <_fstat_r+0x1c>
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	bd38      	pop	{r3, r4, r5, pc}
 8004f7e:	bf00      	nop
 8004f80:	20002918 	.word	0x20002918

08004f84 <_isatty_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	2300      	movs	r3, #0
 8004f88:	4c05      	ldr	r4, [pc, #20]	; (8004fa0 <_isatty_r+0x1c>)
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	f7fb f94a 	bl	8000228 <_isatty>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_isatty_r+0x1a>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_isatty_r+0x1a>
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20002918 	.word	0x20002918

08004fa4 <memchr>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	b2c9      	uxtb	r1, r1
 8004fa8:	4402      	add	r2, r0
 8004faa:	4290      	cmp	r0, r2
 8004fac:	4603      	mov	r3, r0
 8004fae:	d101      	bne.n	8004fb4 <memchr+0x10>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	781c      	ldrb	r4, [r3, #0]
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	428c      	cmp	r4, r1
 8004fba:	d1f6      	bne.n	8004faa <memchr+0x6>
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd10      	pop	{r4, pc}

08004fc0 <memmove>:
 8004fc0:	4288      	cmp	r0, r1
 8004fc2:	b510      	push	{r4, lr}
 8004fc4:	eb01 0302 	add.w	r3, r1, r2
 8004fc8:	d803      	bhi.n	8004fd2 <memmove+0x12>
 8004fca:	1e42      	subs	r2, r0, #1
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	d10c      	bne.n	8004fea <memmove+0x2a>
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	d2f9      	bcs.n	8004fca <memmove+0xa>
 8004fd6:	1881      	adds	r1, r0, r2
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	42d3      	cmn	r3, r2
 8004fdc:	d100      	bne.n	8004fe0 <memmove+0x20>
 8004fde:	bd10      	pop	{r4, pc}
 8004fe0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fe4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004fe8:	e7f7      	b.n	8004fda <memmove+0x1a>
 8004fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ff2:	e7eb      	b.n	8004fcc <memmove+0xc>

08004ff4 <__malloc_lock>:
 8004ff4:	4770      	bx	lr

08004ff6 <__malloc_unlock>:
 8004ff6:	4770      	bx	lr

08004ff8 <_realloc_r>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	460e      	mov	r6, r1
 8005000:	b921      	cbnz	r1, 800500c <_realloc_r+0x14>
 8005002:	4611      	mov	r1, r2
 8005004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005008:	f7ff bc34 	b.w	8004874 <_malloc_r>
 800500c:	b922      	cbnz	r2, 8005018 <_realloc_r+0x20>
 800500e:	f7ff fbe5 	bl	80047dc <_free_r>
 8005012:	4625      	mov	r5, r4
 8005014:	4628      	mov	r0, r5
 8005016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005018:	f000 f814 	bl	8005044 <_malloc_usable_size_r>
 800501c:	4284      	cmp	r4, r0
 800501e:	d90f      	bls.n	8005040 <_realloc_r+0x48>
 8005020:	4621      	mov	r1, r4
 8005022:	4638      	mov	r0, r7
 8005024:	f7ff fc26 	bl	8004874 <_malloc_r>
 8005028:	4605      	mov	r5, r0
 800502a:	2800      	cmp	r0, #0
 800502c:	d0f2      	beq.n	8005014 <_realloc_r+0x1c>
 800502e:	4631      	mov	r1, r6
 8005030:	4622      	mov	r2, r4
 8005032:	f7fe fefd 	bl	8003e30 <memcpy>
 8005036:	4631      	mov	r1, r6
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff fbcf 	bl	80047dc <_free_r>
 800503e:	e7e9      	b.n	8005014 <_realloc_r+0x1c>
 8005040:	4635      	mov	r5, r6
 8005042:	e7e7      	b.n	8005014 <_realloc_r+0x1c>

08005044 <_malloc_usable_size_r>:
 8005044:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005048:	2800      	cmp	r0, #0
 800504a:	f1a0 0004 	sub.w	r0, r0, #4
 800504e:	bfbc      	itt	lt
 8005050:	580b      	ldrlt	r3, [r1, r0]
 8005052:	18c0      	addlt	r0, r0, r3
 8005054:	4770      	bx	lr
	...

08005058 <_init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr

08005064 <_fini>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	bf00      	nop
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr
